a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:6:"
    
";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:500:"
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:11:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:66:"Articles on Smashing Magazine — For Web Designers And Developers";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"https://www.smashingmagazine.com/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:84:"Recent content in Articles on Smashing Magazine — For Web Designers And Developers";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:13:"lastBuildDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Sat, 25 Dec 2021 18:34:50 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"docs";a:1:{i:0;a:5:{s:4:"data";s:44:"https://validator.w3.org/feed/docs/rss2.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:6:"manual";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"language";a:1:{i:0;a:5:{s:4:"data";s:2:"en";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"image";a:1:{i:0;a:6:{s:4:"data";s:48:"
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:3:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:66:"Articles on Smashing Magazine — For Web Designers And Developers";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"url";a:1:{i:0;a:5:{s:4:"data";s:68:"https://www.smashingmagazine.com/images/favicon/app-icon-512x512.png";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"https://www.smashingmagazine.com/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}s:9:"copyright";a:1:{i:0;a:5:{s:4:"data";s:43:"All rights reserved 2021, Smashing Media AG";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"category";a:5:{i:0;a:5:{s:4:"data";s:11:"Development";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:6:"Design";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:2:"UX";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:6:"Mobile";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:9:"Front-end";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:40:{i:0;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:71:"Creating A Custom Range Input That Looks Consistent Across All Browsers";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:83:"https://smashingmagazine.com/2021/12/create-custom-range-input-consistent-browsers/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:83:"https://smashingmagazine.com/2021/12/create-custom-range-input-consistent-browsers/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 23 Dec 2021 11:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:340:"Range inputs have notoriously been a pain to style. Each browser renders the input differently requiring you to use vendor prefixes in order to create a cohesive look and feel. In this article, we’ll take a look at the quirkiness of the HTML range input and demonstrate how to style the input to look consistent across all major browsers.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:43:"hello@smashingmagazine.com (Alyssa Holland)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:166:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0deb2d53-1482-44c1-bf77-4dcc92ce3cd5/create-custom-range-input-consistent-browsers.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:18435:"<p>As one of the maintainers of a UI component library, I’ve implemented and styled myriads of input elements. One day I was assigned the task of adding a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range">range input</a> to the library and, I figured it would be a similar process to the other inputs I had implemented in the past. That assumption was correct until I began testing the range input across multiple browsers and quickly realized that I had a lot more work on my hands.</p>
<p>After a lot of research, I was finally able to pinpoint enough <a href="https://brennaobrien.com/blog/2014/05/style-input-type-range-in-every-browser.html">blog posts</a>, <a href="https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/">articles</a>, and <a href="https://css-tricks.com/sliding-nightmare-understanding-range-input/">in-depth tutorials</a> to help me style the range input to render consistently. Instead of having to search around for multiple resources, the purpose behind this blog post is to provide a one-stop shop for learning how to properly style a range input that will look consistent across all browsers. It’s the article I wish I had when I had to do this myself and, I hope that it helps make this process faster and smoother for you.</p>
Anatomy Of A Range Input
<p>The range input consists of two main parts:</p>
<ol>
<li><strong>Track</strong><br />This is the part of the slider that the thumb <em>runs</em> along. Or put another way, it’s the long element that represents the ranges of values that can be selected.</li>
<li><strong>Thumb</strong><br />This is an element on the track that the user can move around to select varying range values.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/024ce3fb-9e84-4f70-b9c5-83d76f73dc42/1-create-custom-range-input.png" /></p>
<p>If it were a mathematical equation:</p>
<blockquote>range input = track + thumb</blockquote>

<p>The range input is sometimes referred to as a “slider” and throughout the rest of this article, I will be using those terms interchangeably.</p>
Browser Inconsistencies
<p>To demonstrate why we even need a tutorial on styling range inputs in the first place, we’ll take a look at some screenshots of the default HTML range input and how it gets rendered across the four major browsers (Chrome, Firefox, Safari, and Edge). Or, if you prefer, you can view this <a href="https://37osw.csb.app/">CodeSandbox demo</a> in each of the respective browsers to see the browser inconsistencies in all their glory. </p>
<p><strong>Note:</strong> <em>These screenshots were taken as of September 2021 and may be subject to change as the respective browsers update.</em></p>
<p>Let’s start things off by looking at Chrome which, in my opinion, renders the most user-friendly version of the input by default.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1b0ca6b-c21c-478d-af5e-ac071e0a8e54/2-create-custom-range-input.png" /></p>
<p>Firefox is next up and looks different from the Chrome rendered input. In Firefox, the height of the track is slightly shorter. On the other hand, the height and width of the thumb are larger and do not have the same blue background color that the Chrome version has.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e41b8da4-4475-4d3a-b0ac-e0288ce1c299/3-create-custom-range-input.png" /></p>
<p>The Safari slider is closest in looks to the Firefox version but, it is, yet again, still different. This time around the track seems to have a shadowy effect and, the height of the thumb and width is smaller than Chrome and Firefox’s renditions. If you look closely, you can also see that the thumb is not centered directly on the track giving it an unpolished look and feel.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd5cbf69-d2c2-4412-93b1-a14b1eee6b9f/4-create-custom-range-input.png" /></p>
<p>Last but not least is Edge which, now that <a href="https://support.microsoft.com/en-us/microsoft-edge/download-the-new-microsoft-edge-based-on-chromium-0f4a3dd7-55df-60f5-739f-00010dba52cf">Microsoft Edge is built off Chromium</a>, is way more aligned with the other three browsers than its pre-Chromium predecessor. However, we can see that it is still rendering differently than the other three browsers. Edge’s rendition of its range input looks very similar to the Chrome version, except it has a darker grey background color for the thumb and left-hand side of the track before the thumb.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3f263c31-7657-4e3c-add3-9c78026f0423/5-create-custom-range-input.png" /></p>
<p>Now that we’ve seen how awfully inconsistent each browser renders the range input, we’ll take a look at how we can use CSS to uniform them.</p>
Range Reset (Baseline Styles)
<p>Because the browser inconsistencies vary so greatly, we need to start from a level playing field. Once the default styles that each browser applies have been stripped away, we can start working towards making a more uniformed looking input. We’ll use the <code>input[type="range"]</code> element-attribute selector and the styles applied here will act like a CSS reset for the input. </p>
<p>To apply the baseline styles we need four properties:</p>
<ol>
<li><code>-webkit-appearance: none;</code><br />This property is a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">vendor prefix</a> that applies to all the major browsers. By giving it the value of <code>none</code> this tells each respective browser to clear out any default styles. This allows us to be able to start from scratch and build up the look of the input from that point.</li>
<li><code>background: transparent;</code><br />This clears out the default background that is applied to the input.</li>
<li><code>cursor: pointer;</code></li>
<li><code>width</code><br />Sets the overall width of the input.</li>
</ol>
<pre><code>input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
  width: 15rem;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/76c6f3b4-4bae-4230-bcaf-130078760c7f/6-create-custom-range-input.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b5ec91a-7594-4870-8557-60a772f74b3f/7-create-custom-range-input.png" /></p>
Styling The Track
<p>When styling the track (and the thumb) we will need to target the different browsers specific vendor prefixes in order to apply the proper styles in the relevant element. Going forward, any <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">pseudo-element</a> prefixed with <code>-webkit</code> will be applied to the Chrome, Safari, Opera and Edge (post-Chromium) browsers. Anything prefixed with <code>-moz</code> pertains to Firefox.</p>
<p>Below are the pseudo-elements we will use to target the track:</p>
<ul>
<li><code>::-webkit-slider-runnable-track</code><br />Targets the <strong><em>track</em></strong> in Chrome, Safari, and Edge Chromium.</li>
<li><code>::-moz-range-track</code><br />Targets the <strong><em>track</em></strong> in Firefox.</li>
</ul>
<pre><code>                        /***** Track Styles *****/
/***** Chrome, Safari, Opera, and Edge Chromium *****/
input[type="range"]::-webkit-slider-runnable-track {
  background: #053a5f;
  height: 0.5rem;
}

/******** Firefox ********/
input[type="range"]::-moz-range-track {
  background: #053a5f;
  height: 0.5rem;
}</code></pre>

<p>The only required properties for the track are the <code>height</code> and <code>background</code>. However, it is common to see a <code>border-radius</code> applied in order to round out the edges.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78914328-171c-4cb6-90f0-0cb3d4461f0f/8-create-custom-range-input.png" /></p>
Styling The Thumb
<p>Styling the thumb (the middle knob that the user moves) has more nuances that need to be considered since there are more inconsistencies between the browsers on that part of the range input. </p>
<p>Below are the pseudo-elements we will use to target the thumb:</p>
<ul>
<li><code>::-webkit-slider-thumb</code><br />Targets the <strong><em>thumb</em></strong> in Chrome, Safari, and Edge Chromium.</li>
<li><code>::-moz-range-thumb</code><br />Targets the <strong><em>thumb</em></strong> in Firefox.</li>
</ul>
<p>Since Firefox and the Webkit browsers have different styling problems, I will address each issue individually and demonstrate how to handle each of the quirky defaults that get applied to the thumb.</p>
<h3>Chrome, Safari, Edge Chromium (Webkit)</h3>
<p>The first style we need to apply to the <code>::-webkit-slider-thumb</code> pseudo-element is the <code>-webkit-appearance: none;</code> vendor prefix. We used this property within the “Baseline Styles” section to override the general default styles that are applied by the browser and it serves a similar purpose on the thumb. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0c9b8ca4-812a-4225-98d2-f9ed194541a5/9-create-custom-range-input.png" /></p>
<p>Once the default styles are removed, we can then apply our own custom styles. Assuming we apply a <code>height</code>, <code>width</code> and <code>background-color</code> to the thumb, here is an example of what we would have so far:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee69d2e5-e91c-4c48-8a34-10d1e16c17be/10-create-custom-range-input.png" /></p>
<p>By default, the WebKit browsers render the thumb so that it is not centered on the track.</p>
<p>In order to properly center the thumb on the track we can use the following formula and apply it to the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top"><code>margin-top</code></a> property: </p>
<blockquote>margin-top = (track height in pixels / 2) - (thumb height in pixels /2)</blockquote>

<p>Taking the styles we have applied in the previous sections and converting <code>rems</code> to pixels we would have a track height of 8px and a thumb height of 32px. This would mean that:</p>
<blockquote>margin-top = (8/2) - (32/2) = 4 - 16 = -12px</blockquote>

<p>Based on this, our finalized styles for the webkit browsers would look like the following code block:</p>
<pre><code>/***** Thumb Styles *****/
/***** Chrome, Safari, Opera, and Edge Chromium *****/
input[type="range"]::-webkit-slider-thumb {
   -webkit-appearance: none; /* Override default look */
   appearance: none;
   margin-top: -12px; /* Centers thumb on the track */
   background-color: #5cd5eb;
   height: 2rem;
   width: 1rem;    
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/772082cc-f388-4d25-b5d2-415fdf1a39a7/11-create-custom-range-input.png" /></p>
<h3>Firefox</h3>
<p>When applying styles to the thumb in Firefox, you will need to leverage the <code>::-moz-range-thumb</code> pseudo-element. Thankfully, Firefox does not suffer from the same centering issue as the Webkit browsers. However, it’s one gotcha is around the default border-radius and grey border that it applies to the thumb.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3f0edf50-50a5-4b8c-bc9a-6138d060378c/12-create-custom-range-input.png" /></p>
<p>In order to remediate the default grey border we can add the <code>border: none;</code> property. To remove the default border-radius that gets applied, we can add the <code>border-radius: 0</code> property and now the thumb will look consistent across all the browsers. </p>
<p>Based on this our finalized styles for the webkit browsers would look like this:</p>
<pre><code>                     /***** Thumb Styles *****/
/***** Firefox *****/
input[type="range"]::-moz-range-thumb {
    border: none; /*Removes extra border that FF applies*/
    border-radius: 0; /*Removes default border-radius that FF applies*/
    background-color: #5cd5eb;
    height: 2rem;
    width: 1rem;
}</code></pre>

<p><strong>Note:</strong> <em>The Webkit browsers do not automatically apply this radius to the border so if you find that you do want to apply some form of border-radius to the thumb, as opposed to canceling it out as we’ve done above, you will need to apply the desired <code>border-radius</code> dimensions to both the <code>-webkit-slider-thumb</code> and <code>::-moz-range-thumb</code> pseudo-elements.</em></p>
Focus Styles
<p>Because the range input is an interactive element, it is imperative to add focus styles to comply with accessibility best practices and standards. When focus styles are applied, it provides a visual indicator to users and is especially important for those using a keyboard to navigate a page.</p>
<p>According to the <a href="https://w3c.github.io/aria-practices/#slider">WAI-ARIA: Slider documentation</a>, it is recommended that: </p>
<blockquote>
<p>Focus is placed on the slider (the visual object that the mouse user would move, also known as the thumb).</p>
</blockquote>
<p>The first thing we will want to do is remove the default focus styles so that we can override them with custom styles. In order to target the thumbs focus styles, we can leverage the <code>::-webkit-slider-thumb</code> and <code>::-moz-range-thumb</code> pseudo-elements that we used in the previous section and combine them with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus"><code>:focus</code></a> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus">psuedo-class</a>. We can then use the CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline">outline</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/outline">outline-offset</a> properties to style it the way we want.</p>
<pre><code>/***** Focus Styles *****/
/* Removes default focus */
input[type="range"]:focus {
  outline: none;
}

/***** Chrome, Safari, Opera, and Edge Chromium *****/
input[type="range"]:focus::-webkit-slider-thumb {
  border: 1px solid #053a5f;
  outline: 3px solid #053a5f;
  outline-offset: 0.125rem;
}

/******** Firefox ********/
input[type="range"]:focus::-moz-range-thumb {
  border: 1px solid #053a5f;
  outline: 3px solid #053a5f;
  outline-offset: 0.125rem;     
}</code></pre>

<p><strong>Note</strong>: <em>If a <code>border-radius</code> is applied to the thumb, Firefox renders an outline in the</em> <strong><em>shape of the thumb</em></strong> <em>while the other browsers display a blocky outline. Unfortunately, there is not a simple CSS fix for this and it is the only inconsistency that will be present. However, the main purpose of adding these styles is for accessibility purposes and the main goal, providing a visual indicator when the element is focused, is still achieved.</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa725e79-ffbb-4df6-9686-4780c5a32349/13-create-custom-range-input.png" /></p>
Putting It All Together
<p>Now that we’ve covered all the styles needed to uniform the range input, here’s what the final CSS stylesheet will look like:</p>
<pre><code>/********** Range Input Styles **********/
/*Range Reset*/
input[type="range"] {
   -webkit-appearance: none;
    appearance: none;
    background: transparent;
    cursor: pointer;
    width: 15rem;
}

/* Removes default focus */
input[type="range"]:focus {
  outline: none;
}

/***** Chrome, Safari, Opera and Edge Chromium styles *****/
/* slider track */
input[type="range"]::-webkit-slider-runnable-track {
   background-color: #053a5f;
   border-radius: 0.5rem;
   height: 0.5rem;  
}

/* slider thumb */
input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none; /* Override default look */
   appearance: none;
   margin-top: -12px; /* Centers thumb on the track */

   /*custom styles*/
   background-color: #5cd5eb;
   height: 2rem;
   width: 1rem;
}

input[type="range"]:focus::-webkit-slider-thumb {   
  border: 1px solid #053a5f;
  outline: 3px solid #053a5f;
  outline-offset: 0.125rem; 
}

/******** Firefox styles ********/
/* slider track */
input[type="range"]::-moz-range-track {
   background-color: #053a5f;
   border-radius: 0.5rem;
   height: 0.5rem;
}

/* slider thumb */
input[type="range"]::-moz-range-thumb {
   border: none; /*Removes extra border that FF applies*/
   border-radius: 0; /*Removes default border-radius that FF applies*/

   /*custom styles*/
   background-color: #5cd5eb;
   height: 2rem;
   width: 1rem;
}

input[type="range"]:focus::-moz-range-thumb {
  border: 1px solid #053a5f;
  outline: 3px solid #053a5f;
  outline-offset: 0.125rem; 
}
</code></pre>

Conclusion
<p>In addition to the methods outlined throughout the article, you can also take advantage of the <a href="https://range-input-css.netlify.app/">range input CSS generator</a> I created called <strong>range-input.css</strong>. The crux of this project was to create a tool that makes this process simpler for developers. The CSS generator allows you to quickly style common CSS properties and provides a demo slider that displays a real-time preview of the styles you want to apply. </p>
<p>Hopefully, styling range inputs will be simpler in the future. However, until that day comes, knowing which pseudo-elements and vendor prefixes to target will help you get well on your way to styling sliders to suit your needs.</p>
<h3>Further Resources On Smashing Magazine</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/03/css-generators/">CSS Generators</a></li>
<li><a href="https://www.smashingmagazine.com/2021/09/simplifying-form-styles-accent-color/">Simplifying Form Styles With <code>accent-color</code></a></li>
<li><a href="https://www.smashingmagazine.com/2021/10/modern-css-solutions-for-common-problems/">Smart CSS Solutions For Common UI Challenges</a></li>
<li><a href="https://www.smashingmagazine.com/2021/10/object-fit-background-size-css/">A Deep Dive Into <code>object-fit</code> And <code>background-size</code> In CSS</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:41:"Useful UX Guidelines, Tools And Resources";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:91:"https://smashingmagazine.com/2021/12/tools-tips-resources-to-build-better-user-experiences/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:91:"https://smashingmagazine.com/2021/12/tools-tips-resources-to-build-better-user-experiences/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 22 Dec 2021 10:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:316:"A meaningful user experience is what can set your site apart from others. But what makes an experience truly meaningful? And how to achieve that? The tools, tips, and resources in this post not only help you to come up with a UX strategy that works for you and your team but also to circumvent potential UX pitfalls.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Cosima Mielke)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:135:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb38ba21-df76-4d15-b7ef-bbda38aeea6b/laws-of-ux-opt.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:27918:"<p>What does it take to create meaningful user experiences? While there’s no one secret recipe for success, there are some fundamentals that you can consider to master the challenge. In this post, we compiled useful tools, tips, and resources that are bound to help you build better user experiences. You’ll find <strong>psychology heuristics</strong> just like tips for building a <strong>winning UX strategy</strong>, dive deep into <strong>user research</strong> and <strong>UX writing</strong>, and explore <strong>real-world examples</strong> — good and bad — from which you can learn to create experiences that truly matter. But be warned, there’s quite a lot to digest in this post, so you might want to consider to bookmark it and split it up over several coffee breaks. Happy reading!</p>
Laws Of UX
<p>Fitt’s Law, Miller’s Law, the Serial Position Effect. Do you know what’s behind these names? If not, <a href="https://lawsofux.com/">Laws Of UX</a> will shed more light on their meaning.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb38ba21-df76-4d15-b7ef-bbda38aeea6b/laws-of-ux-opt.png" /></p>
<p>Created by Jon Yablonski, this lovely website explains 21 psychological principles that designers can consider to create more human-centered products and experiences. A great initiative to make complex psychology heuristics more accessible.</p>
Tools To Build Better Digital Experiences
<p>The right tools at the right time, help streamline the design process. To give you a better overview of which tools could enhance your UX design projects, Jordan Bowman and Taylor Palmer curate the site <a href="https://uxtools.co/">UX Tools</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7649b7c-9ba8-412b-a885-cb7e9934cbfb/ux-tools-opt.png" /></p>
<p>Their <a href="https://uxtools.co/tools/design">design tools database</a> features tools for everything from UI design and prototyping, to user flow and handoff, design systems and versioning. Each tool is rated by usage and user rating and comes with detailed information on platform support, cost, and features. On the site, you’ll also find practical <a href="https://uxtools.co/challenges/">UX challenges</a> to train yourself in crucial UX skills. A great resource to build better digital experiences.</p>
The Ultimate Guide To UX Research
<p>User experience research is a crucial component of the human-centered design process. But how do you tackle the task and integrate a UX research process into your team’s workflow? To get you up and running, the folks at <em>Maze</em> put together the “<a href="https://maze.design/guides/ux-research">Ultimate Guide to UX Research</a>”.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4c6dc1d-2eed-4b4a-bf1d-1a85c1c1d7af/ux-research-opt.png" /></p>
<p>The comprehensive guide dives into the fundamentals of UX research and its various methods. It starts off taking a closer look at what UX research is all about and why it’s the backbone of building good products, dissects different research methods and tools, and shares tips for creating a research plan and establishing a UX research process. A great read for UX designers and product managers alike.</p>
How To Build A Winning UX Strategy
<p>As designers, we often get in heated debates on design processes, our workflows, and our tooling. Of course, we want to improve the overall user experience and user satisfaction, and we want to establish a lasting, positive relationship with our customers by keeping them happy and productive with our services. Yet how exactly do we get there?
In his <a href="https://vimeo.com/140302789">talk on UX strategy</a> (<a href="https://www.uie.com/wp-assets/transcripts/building_a_winning_ux_strategy.html">transcript</a>), Jared Spool has been looking into ways for us to create a better product and UX strategy. That involves regularly pruning features rather than adding them, continuously exploring common expectations and frequent frustrations, adding value by innovating where customers are most frustrated and establishing exposure hours with customers for the entire team.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e47625de-e44a-41dd-b26e-93969727ff62/ux-tipping-point.png" /></p>
<p>In his other talk on <a href="https://vimeo.com/351580133">growth stages in UX</a> (<a href="https://www.uie.com/wp-assets/transcripts/beyond_the_ux_tipping_point.html">transcript</a>), Jared explains how everybody involved in the product is a designer as well, so increasing design literacy among the entire team is necessary to make the product fully focused on overall design and UX. He speaks about the UX tipping point which organizations need to reach when design becomes an organization’s competitive advantage. Both talks are a great starting point when you want to understand how to take your organization from status quo to a better place, and where to start.</p>
The Maturity Of UX Writing
<p>For the past few years, organizations and designers have turned their focus to the importance of writing. They’ve realized that content can indeed help to design clear and meaningful experiences. But what is UX Writing and why is it that important?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1555179d-1497-4fef-9bb9-f67e6aa3251d/ux-writing-report-opt.png" /></p>
<p>According to the <a href="https://dxrc.qrplanet.com/l/media?f=2ad36b665a91e877fe5e40b35d19a102">UX Writing Worldwide Report</a>, UX Writing focuses on users and helps create experiences that are relevant to their needs. The survey conducted among 110 writing professionals in May 2020 gives interesting insights into the role of the UX Writer in companies around the world.</p>
The Food And User Experience Combination
<p>What do food and UX have in common? Quite a lot actually! If you’re open for a different kind of approach to UX, we came across a project that already has a few years on its back but offers a perspective on user experience design that you probably haven’t taken on before.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/229fa23c-897d-4256-904f-0e259244cb46/food-ux-opt.png" /></p>
<p>For a talk he gave in 2010, Peter J. Bogaards collected thoughts, ideas, and resources, simply everything that creates a link between the disciplines food/gastronomy and user experience design on his blog <a href="http://www.foodux.org/">Food UX</a>. What might seem a bit strange at first will start to make sense the deeper you start to dive into Peter’s way of thinking. As it turns out, in the end both gastronomy and UX are really about the same thing: engaging the senses to allow experiences to emerge, setting the stage for something good to happen, and serving something delightful.</p>
The Deck Of Brilliance
<p>Do you sometimes find yourself facing a blank page with little or no inspiration whatsoever? Competing with creatives from every corner of the globe certainly doesn’t make it easy to generate brand-new ideas, especially when you feel like they’ve all already been taken.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8afacd90-dd1c-4e87-a51a-a90136d9969e/deck-of-brilliance-opt.png" /></p>
<p>The <a href="https://deckofbrilliance.com/">Deck of Brilliance</a> gives you 52 free tools that are bound to help you work up ideas in short periods of time. All you need to do is pick a tool one after the other, and be prepared to note down your ideas when they start rolling in. The more ideas you generate, the better the chances of nailing the big one!</p>
Accessibility For Teams
<p>Accessibility goes far beyond the code, so when it comes to delivering accessible websites, each person in a team has their specific responsibilities. If you feel that your team hasn’t found the right strategy to tackle accessibility yet, Peter van Grieken’s guide “<a href="https://accessibility-for-teams.com/">Accessibility for teams</a>” has got your back.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35740067-7e63-43d8-9193-356e2d5f9ffc/a11y-for-teams-opt.png" /></p>
<p>The guide consists of six parts, with each one of them aimed at the different specialists in your team: product managers, content designers, UX designers, visual designers, and front-end developers, plus a guide on accessibility testing. The latter two haven’t been released yet. A great resource that helps incorporate accessibility into your team’s workflow from the ground up.</p>
Slack Communities For Designers
<p>Supporting each other, sharing inspiration, asking for feedback, encouraging discussion — all of this is a crucial part of any creative process. If you’re a designer and are eager to connect with likeminded people, there are a lot of design communities on Slack to participate in. To help you discover the right one for your needs, Ryan Yao set up <em><a href="https://designerslack.community/">Designer Slack Communities</a></em>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0bc9927a-41d2-448b-9b83-e1a85ed81263/designer-slack-opt.png" /></p>
<p>No matter if you’re into UX, animation, or web typography, or are looking for ways to create positive social change, explore how to shape a design culture, or just want to talk shop about design systems, Ryan’s overview has got you covered. If you know of a community that is worth joining but not listed yet, you are welcome to add it. Happy connecting!</p>
The Past, Present, And Future Of Interfaces
<p>Why do we interface? After several months of strict Covid quarantine gave product designer Ehsan Noursalehi a new perspective on our relationship with technology, he decided to convert his obervations and questions into an online micro book.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/439c6f76-62aa-431e-9368-2e0a36c1c2c4/why-do-we-interface-opt.png" /></p>
<p><em><a href="https://whydoweinterface.com/">Why Do We Interface</a></em> takes a historical look at interfaces to build an understanding of how they allow us to utilize information in such powerful ways that they can fundamentally change what it means to be human. A thought-provoking journey from the failed Apple Newton of 1993 to the voice-first interfaces of today and the challenges the future might bring, as well as a precious reminder about the true purpose of a designer’s job.</p>
Fonts Knowledge
<p>Without a doubt, it’s possible to do great design work with a poor quality typeface, but, on the other hand, <a href="https://fonts.google.com/knowledge/introducing_type/why_care_about_typography">well-considered typographic choices improve the user experience</a>: they enhance the meaning of text, aid users in wayfinding, and improve readability. To ease your first steps into the world of typography (or help you take your skills to the next level) the Google Fonts team teamed up with typographic experts from around the world to create a library of typographic guides: <a href="https://fonts.google.com/knowledge">Fonts Knowledge</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7f69fee-87ac-4dc0-9b5b-78cc36a4ca31/fonts-knowledge-opt.png" /></p>
<p>Fonts Knowledge enables designers and developers of all skill sets to choose and use type with purpose. The topics include OpenType, web fonts, type essentials, and variable fonts and are divided into three sections: “Introducing type”, “Choosing type”, and “Using type”. A glossary helps you make sense of typographic terms.</p>
Designing Better Landing Pages
<p>Persuading someone to take an action isn’t always about convincing them with arguments. Sometimes it’s enough to describe clearly what pain points a product addresses, make the pricing transparent, and explain what audience the product is addressing (perhaps backed up with some social proof).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af32dde4-606c-452c-b121-6fee6732a7c9/landing-page-hot-tips-opt.png" /></p>
<p>In a Twitter thread on <a href="https://twitter.com/robhope/status/1265278107088347136">Landing Page Hot Tips</a>, Rob Hope, a passionate UX designer from Cape Town, South Africa, lists 100 useful tips to keep in mind when designing a landing page (or any other interface really). Each tip has a visual and a little cheatsheet — along with a few quick pointers of things to do and things to avoid. All tips are also collected in a lovely eBook.</p>
The UX Of Banking
<p>Every bank claims to offer the best overall banking experience, and why wouldn’t they, right? Well, in order to find out what the challenger banks did differently, UX specialist Peter Ramsey decided it was time to put a few of them to the test.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1c98727-09c9-4ac9-8d33-fe224a1235e7/ux-of-banking-opt.png" /></p>
<p>First, he opened 12 real bank accounts in the UK, and logged everything. What followed next were <a href="https://builtformars.co.uk/banks/">six detailed chapters of his user journey</a>: opening an account, making his first payment, freezing his card, making international payments, open banking, and last but not least, customer support. A fantastic reference guide to help you craft better experiences indeed.</p>
Common Pitfalls In Mobile E-Commerce UX
<p>Large ads in primary areas of the mobile homepage, no autocomplete suggestions for only slightly misspelled search queries, no load indicators when new content is loading — these are just a few of the common UX pitfalls that the Baymard Institute came across when <a href="https://baymard.com/blog/2021-current-state-mobile-ecommerce">analyzing the current state of mobile e-commerce</a>. For users, things like these are annoying; for the e-commerce industry, they are missed opportunities.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ebcc841-8d30-467d-baa2-01595cdaac63/mobile-ux-trends-opt.png" /></p>
<p>In fact, as the Baymard Institute found out, the mobile e-commerce performance for the average top-grossing US and European e-commerce sites is only mediocre. To help us all do better, they distilled their findings down into 18 common design pitfalls and strategic oversights that offer room for improvements, in particular when it comes to the UX within the mobile homepage, on-site search, forms, as well as site-wide features and elements. A must-read.</p>
Streamlining The Checkout Experience
<p>Fifty-six. That’s the number of actions a customer needs to complete to buy an American Airlines ticket. Let’s face it, checkout forms are often too long and a hassle to fill out. In the worst case, customers might even abandon the process. To help us do better, UX Planet published a four-part article series on streamlining the checkout experience back in 2017 which is still gold for everyone working on a checkout flow today.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ffb7be8-fe5f-481a-8a4d-df646a14babd/checkout-ux-opt.png" /></p>
<p>The <a href="https://uxplanet.org/why-is-online-checkout-so-difficult-and-how-to-simplify-it-eeb3da2ea530">first part</a> in the series examines examples where the checkout experience has gone wrong and why. The <a href="https://uxplanet.org/the-18-must-do-principles-in-the-form-design-fe89d0127c92">second part</a> pins down the most important things that will help improve any checkout form experience in 16 easy-to-follow tips. <a href="https://uxplanet.org/streamlining-the-checkout-experience-b4b00840884a">Part three</a> is dedicated to form validation and how to minimize the number of errors a customer might make, while also taking a closer look at differences between B2C and B2B markets that lead to differences in design. Last but not least, <a href="https://uxplanet.org/streamlining-the-checkout-experience-4-4-6793dad81360">part four</a> is all about bank card details, teaching you how to detect and validate a card number and how to deal with the other payment form fields. A long but worthwhile read.</p>
UX Takeaways From Streaming Services
<p>Users are sensitive to any friction while using an app and as the number of apps that offer similar features is growing, the more important the experience is as a differentiator. Joseph Mueller analyzed the little <a href="https://uxdesign.cc/experience-is-in-the-details-analyzing-the-netflix-ux-6aa81a8f4d2b">experience decisions that make all the difference</a> in the top streaming apps on iOS.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db7c5cc-76d5-4e09-ab82-73f03a70f021/streaming-ux-opt.png" /></p>
<p>Diving deeper into Netflix’s “kitchen sink”, Hulu’s concept of “back 10 forward 30”, YouTube’s double tap targets, and “rotate for more” approaches, Joseph summarized five key takeaways to improve UX that can be applied to any kind of project: Remove the reasons a user will have to exit the app; pay attention to the nuance of a user’s motivation as it could lead to a new solution; educate the user with the interface; change exit points to opportunities; let your users get the results they want without having to be too precise. Joseph’s analysis shows great examples of how all of this can be achieved.</p>
Getting Push Notifications Right
<p>Many users genuinely dislike push notifications because many websites abuse them for the mere purpose of increasing engagement. But instead of forgoing them completely, Stéphanie Walter suggests a different approach — after all, if done right, there are use cases where notifications can improve the user experience.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/186373db-4a94-4348-b8c2-d21fd6a0ce1b/push-notifications-opt.png" /></p>
<p>In her <a href="https://stephaniewalter.design/blog/the-ultimate-guide-to-not-fck-up-push-notifications/">guide to push notifications</a> Stéphanie shares valuable advice on how to stop ruining push notifications and get the trust of users back. The two pillars that a good notification is built upon: Give your users a chance to understand what they gain from notifications and ask for permission in context, not on page load. This could be an e-commerce site that asks customers if they want to receive notifications about parcel status and delivery after completing a purchase or an airline notifying users when their flight is delayed, for example. A must-read.</p>
The “Back” Button UX
<p>The quality of an experience shows in situations when something goes unexpectedly. What happens when the customer accidentally reloads the page in the middle of a checkout, e.g. when scrolling up and down on a mobile phone? Does the payment form get cleared out as a user notices a name’s typo on a review page? What happens when a customer hits the “Back” button in a multi-step-process within your single-page-application?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0341e372-f94d-4ebe-bc93-52f8e23c1eed/back-button-opt.png" /></p>
<p>In fact, the unexpected “Back” button behavior often has severe usability issues, and some of them are highlighted in Baymard Institute’s article “<a href="https://baymard.com/blog/back-button-expectations">Design Patterns That Violate ‘Back’ Button Expectations</a>”. It’s worth testing the “Back” button for overlays, lightboxes, anchor links and content jumps, infinite scroll and “load more” behavior, filtering and sorting, accordions, checkout and inline editing.</p>
<p>We can use the HTML5 History API, or specifically <code>history.pushState()</code> to invoke a URL change without a page reload. The article goes into detail highlighting common issues and solutions to get things just right. Worth reading and bookmarking, and coming back to every now and again.</p>
Should The Buttons Be Disabled?
<p>It has become quite common for lengthy web forms to keep the “Continue” button disabled until the customer has provided all data correctly. This behavior acts as an indicator that something is wrong with the form, and it can’t be completed without reviewing the input. But be careful: It works if the inline validation for every input field is working well, and it doesn’t work at all when it’s glitchy or buggy.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ff9729b-2bef-4b18-b37b-c40f78a07509/disabled-buttons-opt.png" /></p>
<p>In “<a href="https://axesslab.com/disabled-buttons-suck/">Disabled Buttons Suck</a>”, Hampus Sethfors highlights the downsides of disabled buttons. With them in place, we do communicate that something is wrong, but we don’t really explain what is wrong or how to fix it.  So if the customer has overlooked an error message — be it in a lengthy form on desktop, or even in a short form on mobile, they’ll be lost. In many ways, keeping buttons active and communicating errors is more efficient. And if it’s not possible, at least provide a way out with a button “I can’t complete the form, please help”, so customer support can get back to customers in case they get into trouble. If you need a more detailed refresher on web forms, “<a href="https://adamsilver.io/articles/form-design-from-zero-to-hero-all-in-one-blog-post/">Form design: from zero to hero</a>” will keep you busy.</p>
Designing Better Complex Enterprise Tables
<p>Designing large complex tables is tricky. There is quite a bit of information that we need to show, and showing that information in a structured form requires quite a bit of space. For desktop, we could allow customers to customize the table, move columns around and change the views. In fact, in her article, “<a href="https://medium.com/design-with-figma/the-ultimate-guide-to-designing-data-tables-7db29713a85a">The Ultimate Guide to Designing Data Tables</a>,” Molly Helmuth highlights some of the best practices for designing complex data tables, and Andrew Coyle has some <a href="https://medium.com/nextux/design-better-data-tables-4ecc99d23356">table design patterns</a> that you can use as well.</p>
<p>When it comes specifically to enterprise tables that usually require inline editing and filtering, Fanny Vassilatos and Ceara Crawshaw have written a <a href="https://pencilandpaper.io/articles/user-experience/ux-pattern-analysis-enterprise-data-tables/">detailed guide to enterprise tables</a>, with useful considerations about viewing options, scroll behavior, sticky headers and footers, pagination, sorting, filtering and search.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/350a03ed-b852-4562-82d3-b591a1ee2045/enterprise-tables-opt.png" /></p>
<p>But what do we do for mobile? Transforming a table into a slightly narrower table on mobile usually doesn’t work particularly well. Usually, we’d need to redesign the experience from scratch. As Joe Winter shows in his piece on <a href="https://uxdesign.cc/designing-a-complex-table-for-mobile-consumption-nom-7472f7b11fe6">designing a complex table for mobile</a>, we could allow customers to navigate the data set by column first or by row first — combining a dropdown with cards and filters to support this type of navigation. All excellent patterns that we can use to start off our project on the right foot!</p>
Localization In UX
<p>Localization goes far beyond translation. It’s also about small nuances in mindset and culture. <a href="https://uxdesign.cc/beyond-text-translation-ux-design-and-localization-77b337b1f686">As Tania Conte points out</a>, an effective product, as for UX design, is not likely to be faithful to its original version when it becomes available to a different country. Instead, the experience needs to be aligned to different cultures, tastes, and styles.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a94372a1-bf6a-4a74-a639-3135d6ebe1a2/localization-in-ux-opt.png" /></p>
<p>To prevent you from common pitfalls when introducing your product to new markets, Tania collected the main <a href="https://uxdesign.cc/beyond-text-translation-ux-design-and-localization-77b337b1f686">UX design actions applied to localization of products and services</a>. In a nutshell: Consider that cultural value can change the way visual content is processed. Be respectful of cultural and religious pecularity. Introduce some variants that leverage the characteristics of a country. Get focused on habits and local traditions around the globe. And, last but not least, research legal aspects that might be involved. A great reminder to overcome assumptions.</p>
Enhancing User Experience With CSS Animations
<p>Animations have become a popular way to improve the user experience in the last years. But how do we make sure that our CSS animations and transitions will be meaningful to users and not just some nice decoration? Stéphanie Walter gave a talk about enhancing UX with CSS animations at the virtual Shift Remote conference in August last year. In case you missed it, she summarized everything you need to know in an accompanying <a href="https://stephaniewalter.design/blog/enhancing-user-experience-with-css-animations/">blog post</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ecf0633-2d22-4979-b06a-cce44308a3a2/ux-css-animations-opt.png" /></p>
<p>Starting with a reminder of CSS syntax to build transitions and animations, Stéphanie explores why certain animations work better than others. She shares tips for finding the correct timing and duration to make UI animations feel right and explains why and how animations do contribute to improving the user experience. And since great power brings along great responsibility, she also takes a closer look at how you can make sure your animations don’t trigger motion sickness. A great reference guide.</p>
The Role Of Sounds
<p>Just like logos, sounds play an important part in creating your visual brand identity. While there are two categories of UI sounds that designers mostly focus on (i.e. notification and interaction sounds), all of them need to draw users’ attention to a certain event and make the experience as pleasant as possible.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/700ba43b-11d3-4030-a8f5-70a5e7d499fb/sounds-in-ux-opt.png" /></p>
<p>So how do sound designers find the best appropriate sound for a certain app notification or a particular event taking place at a particular moment in time? As sound designer and musician <a href="https://uxplanet.org/the-role-of-sounds-in-ux-47adb8f82b38">Roman Zimarev explains</a>: “Only the sounds that provide useful information or improve the user’s experience should stay.” Make sure to study what kind of sounds there are, what their functions are, and where we actually need to use them. That way, there’s no doubt that users’ experiences will be more pleasant and memorable.</p>
Wrapping Up
<p>Have you come across a UX resource, article, or tool recently that comes in handy in your day-to-day work or that maybe even changed the way you approach UX challenges? Let us know in the comments below! We’d love to hear about it.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:57:"Improving Core Web Vitals, A Smashing Magazine Case Study";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:82:"https://smashingmagazine.com/2021/12/core-web-vitals-case-study-smashing-magazine/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:82:"https://smashingmagazine.com/2021/12/core-web-vitals-case-study-smashing-magazine/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 20 Dec 2021 05:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:160:"How to improve Core Web Vitals, a Smashing Magazine case study on how we detected and fixed the bottlenecks, and how we ended up with green scores, all the way.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Barry Pollard)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:165:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88f0021e-6f6e-4570-954f-eab757e4485b/core-web-vitals-case-study-smashing-magazine.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:38969:"<p>“Why are my Core Web Vitals failing?” Many developers have been asking themselves that question lately. Sometimes it’s easy enough to find the answer to that question and the site just needs to <strong>invest in performance</strong>. Sometimes though, it’s a little trickier and, despite thinking your site was great on the performance for some reason it still fails. That’s what happened to our very own smashingmagazine.com and figuring out, and fixing, the issue took a bit of digging.</p>
A Cry For Help
<p>It all started with <a href="https://twitter.com/smashingmag/status/1367782646332395520?s=20">a series of tweets last March with a cry for help</a>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4411217d-1606-4db9-9dcc-4d7d1afc9428/10-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>Well, this piqued my interest! I’m a big fan of Smashing Magazine and am very interested in web performance and the Core Web Vitals. <a href="https://www.smashingmagazine.com/author/barry-pollard/">I’ve written a few articles here before</a> on Core Web Vitals, and am always interested to see what’s in their annual <a href="https://www.smashingmagazine.com/2021/01/front-end-performance-2021-free-pdf-checklist/">Web Performance Checklist</a>. So, Smashing Magazine knows about web performance, and if they were struggling, then this could be an interesting test case to look at!</p>
<p>A few of us made some suggestions on that thread as to what the problem might be after using some of our favorite web performance analysis tools like <a href="https://www.webpagetest.org/">WebPageTest</a> or <a href="https://pagespeed.web.dev/">PageSpeed Insights</a>.</p>
Investigating The LCP Issue
<p>The issue was that LCP was too slow on mobile. LCP, or <a href="https://web.dev/lcp/">Largest Contentful Paint</a>, is one of the three Core Web Vitals that you must “pass” to get the full search ranking boost from Google as part of their <a href="https://developers.google.com/search/docs/advanced/experience/page-experience">Page Experience Update</a>. As its name suggests, LCP aims to measure when the largest content of the page is drawn (or “painted”) to the screen. Often this is the hero image or the title text. It is intended to measure what the site visitor likely came here to see.</p>
<p>Previous metrics measured variations of the <em>first paint</em> to screen (often this was a header or background color); incidental content that isn’t really <strong>what the user actually wants</strong> to get out of the page. The largest content is often a good indicator or what’s most important. And the “contentful” part of the name shows this metric is intended to ignore (e.g. background colors); they may be the largest content, but they are not “contentful”, so don’t count for LCP and instead the algorithm tries to find something better.</p>
<p>LCP only looks at the initial viewport. As soon as you scroll down or otherwise interact with the page the LCP element is fixed and we can calculate how long it took to draw that element from when the page first started loading — and that’s your LCP!</p>
<p>There are many ways of <a href="https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/">measuring your Core Web Vitals</a>, but the definitive way — even if it’s not the best way, as we’ll see soon — is in <a href="https://search.google.com/search-console/welcome?ref=findseotools.com">Google Search Console</a> (GSC). From an SEO perspective, it doesn’t really matter what other tools tell you, GSC is what Google Search sees. Of course, <strong>it matters what your users experience</strong> rather than what some search engine crawler sees, but one of the great things about the Core Web Vitals initiative is that it does measure <em>real user experience</em> rather than what Google Bot sees! So, if GSC says you have bad experiences, then you do have bad experiences <em>according to your users</em>.</p>
<p>Search Console told Smashing Magazine that their LCP on mobile for most of their pages needed improving. A standard enough output of that part of GSC and pretty easily addressed: just make your LCP element draw faster! This shouldn’t take too long. Certainly not six months (or so we thought). So, first up is finding out what the LCP element is.</p>
<p>Running a failing article page through WebPageTest highlighted the LCP element:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffd276a0-380d-48fa-96c8-a828d892a7f9/7-core-web-vitals-case-study-smashingmagazine.png" /></p>
Improving The LCP Image
<p>OK, so the article author photo is the LCP element. The first instinct is to ask what could we do to make that faster? This involves delving into waterfalls, seeing when the image is requested, how long it takes to download, and then deciding how to optimize that. Here, the image was <strong>well optimized</strong> in terms of size and format (usually the first, and easiest option for improving the performance of images!). The image was served from <strong>a separate assets domain</strong> (often bad for performance), but it wasn’t going to be possible to change that in the short term, and Smashing Magazine had already added a <code>preconnect</code> resource hint to speed that up as best they could.</p>
<p>As I mentioned before, Smashing Magazine knows about web performance, had <a href="https://www.smashingmagazine.com/2021/01/smashingmag-performance-case-study/">only recently worked on improving their performance</a>, and had done everything right here, but still were failing. Interesting…</p>
<p>Other suggestions rolled in, including reducing load, delaying the service worker (to avoid contention), or investigating HTTP/2 priorities, but they didn’t have the necessary impact on the LCP timing. So we had to reach into our web performance toolbag for <strong>all the tips and tricks</strong> to see what else we could do here.</p>
<p>If a resource is critical to the page load, you can inline it, so it’s included in the HTML itself. That way, the page includes everything necessary to do the initial paint without delays. For example, Smashing Magazine already inlines critical CSS to allow a quick first paint but did not inline the author's image. Inlining is a double-edged sword and must be used with caution. It beefs up the page and means subsequent page views do not benefit from the fact that data is already downloaded. I’m <a href="https://www.tunetheweb.com/blog/inlining-css-is-not-for-me/">not a fan of over-inlining</a> because of this and think it must be used with caution.</p>
<p>So, it’s not normally recommended to inline images. However, here the image was causing us real problems, was reasonably small, and was directly linked to the page. Yes, if you read a lot of articles by that one author it’s a waste to redownload the same image multiple times instead of downloading the author's image once and reusing it, but in all likelihood, you’re here to read <strong>different articles by different authors</strong>.</p>
<p>There have been a few advances in image formats recently, but AVIF is causing a stir as it’s here already (at least <a href="https://caniuse.com/avif">in Chrome and Firefox</a>), and it has impressive compression results over the old JPEG formats traditionally used for photographs. Vitaly didn’t want to inline the JPEG version of the author images, but investigated whether inlining the AVIF version would work. Compressing the author image using AVIF, and then base64-ing the image into the HTML led to a 3 KB increase to the HTML page weight — which is tiny and so was acceptable.</p>
<p>Since AVIF was only supported in Chrome at the time (it came to Firefox after all this), and since Core Web Vitals is a Google initiative, it did feel slightly “icky” optimizing for a Google browser because of a Google edict. Chrome is often at the forefront of new feature support and that’s to be commended, but it always feels a little off when those two sides of its business impact each other. Still, this was <strong>a new standard image format</strong> rather than some proprietary Chrome-only format (even if it was only supported in Chrome initially), and was a progressive enhancement for performance (Safari users still get the same content, just not quite as fast), so with the addition of the AVIF twist Smashing took the suggestion and inlined the image and did indeed see impressive results in lab tools. Problem solved!</p>
An Alternative LCP
<p>So, we let that bed in and waited <a href="https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/#the-chrome-user-experience-report-crux">the usual 28 days or so</a> for the Core Web Vitals numbers to all turn green… but they didn’t. They flitted between green and amber so we’d certainly improved things, but hadn’t solved the issue completely. After staying a long stretch in the amber “needs improvement” section, Vitaly reached out to see if there were any other ideas.</p>
<p>The image was drawing quickly. Not quite instantly (it still takes time to process an image after all) but as near as it could be. To be honest, I was running out of ideas but took another look with fresh eyes. And then an alternative idea struck me — were we optimizing the <em>right</em> LCP element? Authors are important of course, but <strong>is that really what the reader came here to see?</strong> Much as our egos would like to say yes, and that our beautiful shining mugs are much more important than the content we write, the readers probably don’t think that (readers, huh — what can you do!).</p>
<p>The reader came for the article, not the author. So the LCP element should reflect that, which might also solve the LCP image drawing issue. To do that we just put the headline above the author image, and increased the font size on mobile a bit. This may sound like a sneaky trick to fool the Core Web Vital SEO Gods at the expense of the users, but in this case, <strong>it helps both!</strong> Although many sites do try to go for the quick and easy hack or optimize for GoogleBot over real users, this was not a case of that and we were quite comfortable with the decision here. In fact, further tweaks remove the author image completely on mobile view, where there’s limited space and that article currently looks like this on mobile, with the LCP element highlighted:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bb83558-c586-49d0-b67f-80de138a3aa8/11-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>Here we show the title, the key information about the article and the start of the summary — much more useful to the user, than taking up all the precious mobile screen space with a big photo!</p>
<p>And that’s one of the main things I like about the Core Web Vitals: they are measuring user experience.</p>
<p> To improve the metrics, you have to improve the experience.</p>
<p>And NOW we were finally done. Text draws much quicker than images so that should sort out the LCP issue. Thank you all very much and good night!</p>
I Hate That CWV Graph In Google Search Console…
<p>Again we were disappointed. That didn’t solve the issue and it wasn’t long before the Google Search Console graph returned to amber:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eebd28c1-7bee-45fd-baba-80b4fc9435c1/9-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>At this point, we should talk a little more about page groupings and Core Web Vitals. You might have noticed from the above graph that pretty much the whole graph swings at once. But there was also a core group of about 1,000 pages that stayed green most of the time. Why is that?</p>
<p>Well, Google Search Console categorizes pages into page groupings and <a href="https://www.searchenginejournal.com/grouped-core-web-vitals-scoring/407899/">measures the Core Web Vitals metrics of those page groupings</a>. This is an attempt to fill in missing data for those pages that don’t get enough traffic to have meaningful user experience data. There’s a number of ways that they could have tackled this: they could have just not given any ranking boost to such pages, or maybe assumed the best and given a full boost to pages without any data. Or they could have fallen back to origin-level core web vitals data. Instead, they tried to do something more clever, which was an attempt to be helpful, but is in many ways also more confusing: <strong>Page groupings</strong>.</p>
<p>Basically, every page is assigned a page grouping. How they do this isn’t made clear, but URLs and technologies used on the page have been mentioned before. You also can’t see what groupings Google has chosen for each of your pages, and if their algorithm got it right, which is another frustrating thing for website owners, though they do give sample URLs for each different Core Web Vitals score below the graph in Google Search Console from which the grouping can sometimes be implied.</p>
<p>Page groupings can work well for sites like Smashing Magazine. For other sites, page groupings may be less clear, and many sites may just have one grouping. The Smashing site, however, has several different types of pages: articles, author pages, guides, and so on. If an article page is slow because the author image is the LCP image is slow to load, then that will likely be the case for <em>all</em> article pages. And the fix will likely be the same for <em>all</em> article pages. So <strong>grouping them together there makes sense</strong> (assuming Google can accurately figure out the page groupings).</p>
<p>However, where it can get confusing is when a page does get enough visitors to get its own Core Web Vitals score and it passes, but it’s lumped in with a failing group. You can call the CrUX API for all the pages in your site, see most of them are passing, then be confused when those same pages are showing as failing in Search Console because they’ve been lumped in a group with failing URLs and most of the traffic for that group is for failing. I still wonder if Search Console should use page-level Core Web Vital data when it has, rather than always using the grouping data.</p>
<p>Anyway, that accounts for the large swings. Basically, all the articles (of which there are about 3,000) appear to be in the same page grouping (not unreasonably!) and that page grouping is either passing or failing. When it switches, <strong>the graph moves dramatically</strong>.</p>
<p>You can also get more detailed data on the Core Web Vitals through the CrUX API. This is available at an origin-level (i.e. for the whole site), or for individual URLs (where enough data exists), but annoyingly not at the page grouping level. I’d been tracking the origin level LCP using the CrUX API to get a more precise measure of the LCP and it showed a depressing story too:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/802f75a9-f827-4e5c-a735-06d5ab19ccc8/12-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>We can see we’ve never really “solved” the issue and the amount of “Good” pages (the green line above) still hovered too close to the 75% pass rate. Additionally the p75 LCP score (the dotted line which uses the right-hand axis) never really moved far enough away from the 2500 milliseconds threshold. It was no wonder the pages passing and failing were flipping back and forth. A bit of a bad day, with a few more slow page loads, was enough to flip the whole page grouping into the “needs improvement” category. We needed something more to give us some headroom to be able to absorb these “bad days”.</p>
<p>At this point, <strong>it was tempting to optimize further</strong>. We know the article title was the LCP element so what could we do to further improve that? Well, it uses a font, and fonts have always been a bane of web performance so we could look into that.</p>
<p>But hold up a minute. Smashing Magazine WAS a fast site. Running it through web performance tools like Lighthouse and WebPageTest showed that — even on slower network speeds. And it was doing everything right! It was built as a static site generator so didn’t require any server-side generation to occur, it inlined everything for the initial paint so there were no resource loading constraints other than the HTML itself, it was hosted by Netlify on a CDN so should be near its users.</p>
<p>Sure, we could look at removing the font, but if Smashing Magazine couldn’t deliver a fast experience given all that, then how could anyone else? Passing Core Web Vitals shouldn’t be impossible, nor require you to only be on a plain site with no fonts or images. Something else was up here and it was time to find out a bit more about what was going on instead of just blindly attempting another round of optimizations.</p>
Digging A Little Deeper Into The Metrics
<p>Smashing Magazine didn’t have a RUM solution so instead we delved into the Chrome User Experience Report  (CrUX) data that Google collects for the top 8 million or so websites and then makes that data available to query in various forms. It’s this CrUX data that drives the Google Search Console data and ultimately the ranking impact. We’d already been using the CrUX API above but decided to delve into other CrUX resources.</p>
<p>We used the sitemap and a Google Sheets script to look at all the CrUX data for the whole site where it was available (Fabian Krumbholz has since created a <a href="https://fabkrum.github.io/core-web-vitals-optimizer/">much more comprehensive tool</a> to make this easier!) and it showed <strong>mixed results for pages</strong>. Some pages passed, while others, particularly older pages, were failing.</p>
<p>The <a href="https://rviscomi.github.io/crux-dash-launcher/">CrUX dashboard</a> didn’t really tell us much that we didn’t already know in this instance: the LCP was  borderline, and unfortunately not trending down:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e983e7f8-4084-4337-af8a-92ed1bb8fc16/4-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>Digging into the other stats (TTFB, First Paint, Online, DOMContentLoaded) didn’t give us any hints. There was, however, a noticeable increase in mobile usage:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9be789df-2195-4e5e-b3a9-fed1f2ee9d17/8-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>Was this part of a general trend in mobile adoption? Could that be what was affecting the mobile LCP despite the improvements we’d done? We had questions but no answers or solutions.</p>
<p>One thing I wanted to look at was the global distribution of the traffic. We’d noticed in Google Analytics a lot of traffic from India to old articles — could that be an issue?</p>
The India Connection
<p>Country-level CrUX data isn’t available in the CrUX dashboard but is available in the BigQuery CrUX dataset, and <a href="https://docs.google.com/spreadsheets/d/1apZVYtIzHpDTe1UJi83ETeaUv8Yzw0jJyU8sepQhCpI/edit#gid=1085026550">running a query in there at the www.smashingmagazine.com origin level</a> shows a wide disparity in LCP values (the SQL is included on the second tab of that link btw in case you want to try the same thing on your own domain). Based on the top 10 countries in Google Analytics we have the following data:</p>
<table>
  <thead>
    <tr>
      <th>Country</th>
      <th>Mobile p75 LCP value</th>
      <th>% of traffic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>United States</td>
      <td>88.34%</td>
      <td>23%</td>
    </tr>
    <tr>
      <td>India</td>
      <td>74.48%</td>
      <td>16%</td>
    </tr>
    <tr>
      <td>United Kingdom</td>
      <td>92.07%</td>
      <td>6%</td>
    </tr>
    <tr>
      <td>Canada</td>
      <td>93.75%</td>
      <td>4%</td>
    </tr>
    <tr>
      <td>Germany</td>
      <td>93.01%</td>
      <td>3%</td>
    </tr>
    <tr>
      <td>Philippines</td>
      <td>57.21%</td>
      <td>3%</td>
    </tr>
    <tr>
      <td>Australia</td>
      <td>85.88%</td>
      <td>3%</td>
    </tr>
    <tr>
      <td>France</td>
      <td>88.53%</td>
      <td>2%</td>
    </tr><tr>
      <td>Pakistan</td>
      <td>56.32%</td>
      <td>2%</td>
    </tr>
    <tr>
      <td>Russia</td>
      <td>77.27%</td>
      <td>2%</td>
    </tr>
  </tbody>
</table>

<p>India traffic is a big proportion for Smashing Magazine (16%) and it is not meeting the target for LCP at an origin level. That could be the problem and certainly was <strong>worth investigating further</strong>. There was also the Philippines and Pakistan data with very bad scores but that was a relatively small amount of traffic.</p>
<p>At this point, I had an inkling what might be going on here, and a potential solution so got Smashing Magazine to install the <a href="https://github.com/GoogleChrome/web-vitals"><code>web-vitals</code></a> library to collect RUM data and post it back to Google Analytics for analysis. After a few days of collecting, we used the <a href="https://github.com/GoogleChromeLabs/web-vitals-report">Web Vitals Report</a> to give us a lot at the data in ways we hadn’t been able to see before, in particular, the country-level breakdown:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ca7b461-291d-4b02-8745-b3e6ee7b3e9d/6-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>And there it was. All the top countries in the analytics <em>did have</em> very good LCP scores, except one: India. Smashing Magazine uses Netlify which is a global CDN and <a href="https://answers.netlify.com/t/is-there-a-list-of-where-netlifys-cdn-pops-are-located/855">it does have a Mumbai presence</a>, so it should be as performant as other countries, but some countries are just slower than others (more on this later).</p>
<p>However, the mobile traffic for India was only just outside the 2500 limit, and it was only the second most visited country. Surely the good USA scores should have been enough to offset that? Well, the above two graphs show the countries order by traffic. But CrUX counts mobile and desktop traffic separately (and tablet btw, but no one ever seems to care about that!). What happens if we <strong>filter the traffic to just mobile traffic</strong>? And one step further — just mobile Chrome traffic (since only Chrome feeds CrUX and so only Chrome counts towards CWV)? Well then we get a much more interesting picture:</p>
<table>
  <thead>
    <tr>
      <th>Country</th>
      <th>Mobile p75 LCP value</th>
      <th>% of mobile traffic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>India</td>
      <td>74.48%</td>
      <td>31%</td>
    </tr>
    <tr>
      <td>United States</td>
      <td>88.34%</td>
      <td>13%</td>
    </tr>
    <tr>
      <td>Philippines</td>
      <td>57.21%</td>
      <td>8%</td>
    </tr>
    <tr>
      <td>United Kingdom</td>
      <td>92.07%</td>
      <td>4%</td>
    </tr>
    <tr>
      <td>Canada</td>
      <td>93.75%</td>
      <td>3%</td>
    </tr>
    <tr>
      <td>Germany</td>
      <td>93.01%</td>
      <td>3%</td>
    </tr>
    <tr>
      <td>Nigeria</td>
      <td>37.45%</td>
      <td>2%</td>
    </tr>
    <tr>
      <td>Pakistan</td>
      <td>56.32%</td>
      <td>2%</td>
    </tr>
    <tr>
      <td>Australia</td>
      <td>85.88%</td>
      <td>2%</td>
    </tr>
    <tr>
      <td>Indonesia</td>
      <td>75.34%</td>
      <td>2%</td>
    </tr>
  </tbody>
</table>

<p>India is actually the top mobile Chrome visitor, by quite some way — nearly triple the next highest visitor (USA)! The Philippines, with its poor score has also shot up there to the number three spot, and Nigeria and Pakistan with their poor scores are also registering in the top 10. Now the bad overall LCP scores on mobile were starting to make sense.</p>
<p>While the mobile has overtaken desktop as the most popular way to access the Internet in the, so-called, <em>Western world</em>, there still is a fair mix of mobile and desktop here — <a href="https://almanac.httparchive.org/en/2021/mobile-web#not-all-days-are-equal">often tied to our working hours</a> where many of us are sat in front of a desktop. The next billion users may not be the same, and <strong>mobile plays a much bigger part</strong> in those countries. The above stats show this is even true for sites like Smashing Magazine that you might consider would get more traffic from designers and developers sitting in front of desktops while designing and developing!</p>
<p>Additionally because <strong>CrUX only measures from Chrome users</strong>, that means countries with more iPhones (like the USA) will have a much smaller proportion of their mobile users represented in CrUX and so in Core Web Vitals, so additionally amplifying the effect of those countries.</p>
Core Web Vitals Are Global
<p>Core Web Vitals don’t have a different threshold per country, and it doesn’t matter if your site is visited by different countries — it simply registers all Chrome users the same. <a href="https://youtu.be/HWm6WNkHs90?t=1024">Google has confirmed this before</a>, so Smashing Magazine will not get the ranking boost for the good USA scores, and not get it for the India users. Instead, all users go into the <strong>melting pot</strong>, and if the score for those page groupings do not meet the threshold, then the ranking signal for all users is affected.</p>
<p>Unfortunately, the world is not an even place. And <a href="https://almanac.httparchive.org/en/2021/performance#by-geographic-region">web performance does vary hugely by country</a>, and shows a clear divide between richer and poorer countries. Technology costs money, and many countries are more focused on getting their populations online at all, rather than on continually upgrading infrastructure to the latest and greatest tech.</p>
<p>The lack of other browsers (like Firefox or iPhones) in CrUX has always been known, but we’ve always considered it more of a blind spot for measuring Firefox or iPhone performance. This example shows the <strong>impact is much bigger</strong>, and for sites with global traffic, it skews the results significantly in favor of Chrome users, which often means poor countries, which often means worse connectivity.</p>
Should Core Web Vitals Be Split By Country?
<p>On the one hand, it seems unfair to hold websites to the same standard if the infrastructure varies so much. Why should Smashing Magazine be penalized or held to a higher standard than a similar website that is only read by designers and developers from the Western world? Should Smashing Magazine block Indian users to keep the Core Web Vitals happy (I want to be quite clear here that this <em>never</em> came up in discussion, so please do take this as the author making the point and not a sleight on Smashing!).</p>
<p>On the other hand, “giving up” on some countries by accepting their slowness risks permanently relegating them to the lower tier many of them are in. It’s hardly the average Indian reader of Smashing Magazine’s fault that their infrastructure is slower and in many ways, these are the people that deserve <em>more</em> highlighting and effort, rather than less!</p>
<p>And it’s not just a rich country versus poor country debate. Let’s take the example of a French website which is aimed at readers in France, funded by advertising or sales from France, and has a fast website in that country. However, if the site is read by a lot of French Canadians, but suffers because the company does not use a global CDN, then should that company suffer in French Google Search because it’s not as fast to those Canadian users? Should the company be “held to ransom” by the threat of Core Web Vitals and have to invest in the global CDN to keep those Canadian readers, and so Google happy?</p>
<p>Well, if a significant enough proportion of your viewers are suffering then that’s exactly what the Core Web Vital’s initiative is supposed to surface. Still, it’s an interesting moral dilemma which is a side effect of the Core Web Vitals initiative being linked to <strong>SEO ranking boost</strong>: money always changes things!</p>
<p>One idea could be to keep the limits the same, but <strong>measure them per country</strong>. The French Google Search site could give a ranking boost to those users in French (because those users pass CWV for this site), while Google Search Canada might not (because they fail). That would level the playing field and measure sites to each country, even if the targets are the same.</p>
<p>Similarly, Smashing Magazine could rank well in the USA and other countries where they pass, but be ranked against other Indian sites (where the fact they are in the “needs improvement” segment might actually still be better than a lot of sites there, assuming they all suffer the same performance constraints).</p>
<p>Sadly, I think that would have a negative effect, with some countries again being ignored while sites only justify web performance investment for more lucrative countries. Plus, as this example already illustrates, the Core Web Vitals are already complicated enough without bringing nearly 200 additional dimensions into play by having one for every country in the world!</p>
So How To Fix It?
<p>So we now finally knew why Smashing Magazine was struggling to pass Core Web Vitals but what, if anything, could be done about it? The hosting provider (Netlify) already has the Mumbai CDN, which should therefore provide a fast access for Indian users, so was this a Netlify problem to improve that? We had optimized the site as much as possible so was this just something they were going to have to live with? Well no, we now return to our idea from earlier: <strong>optimizing the web fonts a bit more</strong>.</p>
<p>We could take the drastic option of not delivering fonts at all. Or perhaps not delivering fonts to certain locations (though that would be more complicated, given the SSG nature of Smashing Magazine’s website). Alternatively, we could wait and load fonts in the front end, based on certain criteria, but that risked slowing down fonts for others while we assessed that criteria. If only there was some easy-to-use browser signal for when we should take this drastic action. Something like the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data">SaveData header</a>, which is intended exactly for this!</p>
<code>SaveData</code> And <code>prefers-reduced-data</code>
<p><strong><code>SaveData</code></strong> is a setting that users can turn on in their browser when they really want to… well save data. This can be useful for people on restricted data plans, for those traveling with expensive roaming charges, or for those in countries where the infrastructure isn’t quite as fast as we’d like.</p>
<p>Users can turn on this setting in browsers that support it, and then websites can then use this information to optimize their sites even more than usual. Perhaps returning lower quality images (or turning images off completely!), or not using fonts. And the best thing about this setting is that you are acting upon the user's request, and <strong>not arbitrarily making a decision</strong> for them (many Indian users might have fast access and not want a restricted version of the website!).</p>
<p>The Save Data information is available in two (soon to be three!) ways:</p>
<ol>
<li>A <code>SaveData</code> header is sent on each HTTP request. This allows dynamic backends to change the HTML returned.</li>
<li>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData"><code>NetworkInformation.saveData</code></a> JavaScript API. This allows front-end scripts to check this and act accordingly.</li>
<li>The upcoming <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-data"><code>prefers-reduced-data</code></a> media query, allowing CSS to set different options depending on this setting. This is available behind a flag in Chrome, but <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1051189">not yet on by default while it finishes standardization</a>.</li>
</ol>
<p>So the question is, do many of the Smashing Magazine readers (and particularly those in the countries struggling with Core Web Vitals) use this option and is this something we can therefore use to serve them a faster site? Well, when we added the <code>web-vitals</code> script mentioned above, we also decided to measure that, as well as the Effective Connection Type. You can see the <a href="https://www.smashingmagazine.com/js/web-vitals-tracking.js">full script here</a>. After a bit of time allowing it to collect we could display the results in a simple /Google Analytics dashboard, along with the Chrome browser version:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/329a44f2-a1b5-4119-acc5-3cec7d4f9024/5-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>So, the good news was that a <strong>large proportion of mobile Indian users</strong> (about two-thirds) <em>did</em> have this setting set. The ECT was less useful with most showing as 4g. I’ve argued before that this API has gotten less and less useful as most users are classified under this 4g setting. Plus using this value effectively for initial loads is <a href="https://www.smashingmagazine.com/2013/01/bandwidth-media-queries-we-dont-need-em/">fraught with issues</a>.</p>
<p>More good news as most users seem to be on an up-to-date Chrome so would benefit from newer features like the <code>prefers-reduced-data</code> media query when it becomes fully available.</p>
<p>Ilya from the Smashing team applied the JavaScript API version to their font-loader script so additional fonts are not loaded for these users. The Smashing folks also applied the <code>prefers-reduce-data</code> media query to their CSS so fallback fonts are used rather than custom web fonts for the initial render, but this will not be taking effect for most users until that setting moves out of the experimental stage.</p>
I Love That Graph In Google Search Console
<p>And did it work? Well, we’ll let Google Search Console tell that store as it showed us the good news a couple of weeks later:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa3466bf-5384-49f4-b368-81cc89257853/2-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>Additionally, since this was introduced in mid-November, the original level LCP score has steadily ticked downwards:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71cb6fe6-0e30-4463-ba6d-20397707d5e1/3-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>There’s still not nearly enough headroom to make me comfortable, but I’m hopeful that this will be enough for now, and will only improve when the <code>prefers-reduced-data</code> media query comes into play — hopefully soon.</p>
<p>Of course, a surge in traffic from mobile users with bad connectivity could easily be enough to flip the site back into the amber category, which is why you want that headroom, so I’m sure the Smashing team will be keeping a close eye on their Google Search Console graph for a bit longer, but I feel we’ve made the best efforts basis to improve the experience of users so I am hopeful it will be enough.</p>
Impact Of The User Experience Ranking Factor
<p>The User Experience ranking factor is supposed to be a small differentiator at the moment, and maybe we worried too much about a small issue that is, in many ways outside of our control? If Smashing Magazine is borderline, and the impact is small, then maybe the team should worry about other issues instead of obsessing over this one? But I can understand that and, as I said, Smashing Magazine are knowledgeable in performance and so understand why they wanted to solve — or at the very least understand! — this issue.</p>
<p>So, was there any impact? Interestingly we did see a large uptick in search impression in the last week at the same time as it flipped to green:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffafe109-6b61-4e3f-969c-740e11260de2/1-core-web-vitals-case-study-smashingmagazine.png" /></p>
<p>It’s since reverted back to normal, so this may have been an unrelated blip but interesting nonetheless!</p>
Conclusions
<p>So, an interesting case study with a few important points to take away:</p>
<ul>
<li>When RUM (including CrUX or Google Search Console) tells you there’s a problem, there probably is! It’s all too easy to try to compare your experiences and then blame the metric.</li>
<li>Implementing your own RUM solution gives you access to much more valuable data than the high-level data CrUX is intended to provide, which can help you drill down into issues, plus also give you potentially more information about the devices your site visitors are using to visit your site.</li>
<li>Core Web Vitals are global, and that causes some interesting challenges for global sites like Smashing Magazine. This can make it difficult to understand CrUX numbers unless you have a RUM solution and perhaps Google Search Console or CrUX could help surface this information more?</li>
<li>Chrome usage also varies throughout the world, and on mobile is biased towards poorer countries where more expensive iPhones are less prevalent.</li>
<li>Core Web Vitals are getting much better at measuring User Experience. But that doesn’t mean every user has to get the <em>same user experience</em> — especially if they are telling you (through things like the Save Data option) that they would actually prefer a different experience.</li>
</ul>
<p>I hope that this case study helps others in a similar situation, who are struggling to understand their Core Web Vitals. And I hope you can use the information here to make the experience better for your website visitors.</p>
<p>Happy optimizing!</p>
<p><strong>Note:</strong> <em>It should be noted that Vitaly, Ilya and others at the Smashing team did all the work here, and a lot more performance improvements were not covered in the above article. I just answered a few queries for them on this specific problem over the last 6 months and then suggested this article might make an interesting case study for other readers to learn from.</em></p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:61:"Designing Human-Machine Interfaces For Vehicles Of The Future";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:88:"https://smashingmagazine.com/2021/12/designing-human-machine-interfaces-future-vehicles/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:88:"https://smashingmagazine.com/2021/12/designing-human-machine-interfaces-future-vehicles/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 17 Dec 2021 14:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:343:"Modern HMIs are transforming the way we interact with our vehicles. A car becomes a gadget that we use in a similar way as we use our phones. Users expect a lot of HMI, they even evaluate car experience based on the experience they have with HMI. In this article, let’s look at some ways to help us satisfy users’ needs with proper design.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:57:"hello@smashingmagazine.com (Nick Babich & Gleb Kuznetsov)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:171:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d9f919a-44bf-46ef-bfff-ee673c58e83f/designing-human-machine-interfaces-future-vehicles.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:20881:"<p>A human-machine interface (HMI) is an interface that allows us to interact with a digital system. No matter what HMI we design, we need to allow users to take advantage of all that a system has to offer. For almost two decades, the personal computer was the first thing that came to mind when we heard about digital HMI. But the situation changed, and today <strong>HMI is an integral part of many devices we use daily</strong> — mobile phones, smartwatches, IoT devices, and even cars. Car HMI design is a relatively new field with its specifics that you need to be aware of. </p>
<p>My team has experience designing for major automotive companies like Mercedes-Benz and Mitsubishi, and we want to share some practical experience in this article. This article covers HMI car design, touching on why it is an essential aspect of car design.  </p>
What Is HMI?
<p>Car HMI is a collection of functional elements (such as head unit, instrument cluster, and head-up display (HUD) as well as interaction mediums (touch, voice, haptic) that allow turning the vehicle into a living space.</p>
Brief History Of Digital HMI
<p>Digital HMI as we know them was initially introduced in the early 80s. At that time, the number of features that a regular vehicle was capable of doing was rising rapidly, and one of the tasks that designers had was to provide controls that allowed drivers to manage the new functionality. Designers follow two different approaches: some of them use <strong>analog controls</strong> (they add a physical button for each feature) while others add a screen with <strong>dynamic content</strong>.</p>
<p>The first approach was popular among German car manufacturers, while the second was popular among American and Japanese car manufacturers. One of the earliest examples of such systems was introduced in the 1986 <a href="https://en.wikipedia.org/wiki/Buick_Riviera">Buick Riviera</a>. This system allows users to control radio stations and climate using the monochromatic touchscreen display. It’s quite clear that the design of this system was inspired by the aircraft.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d79078da-94b2-46f8-9b4a-e3dd753d2714/6-designing-human-machine-interfaces-future-vehicles.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46aaf78e-ce8c-4bce-880b-285457e6d4fb/8-designing-human-machine-interfaces-future-vehicles.png" /></p>
<p>Another noticeable example is Nissan’s CUE-X Concept introduced in 1985. The system offered colored touch screens with nice graphics. As you can see, the design and location of functional controls are very similar to modern vehicles. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ac1c6ddf-a674-47ad-a017-6eafb5860c8e/10-designing-human-machine-interfaces-future-vehicles.png" /></p>
<p>The modern HMI is a mix of a car control center with an entertainment system. It allows users to change climate settings, find a route to a particular destination or watch YouTube videos.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/267e655f-03c6-444b-9bf0-1e51af297fc8/7-designing-human-machine-interfaces-future-vehicles.png" /></p>
Benefits Of Using Digital HMI
<p>Digital HMI just recently became a mass-market technology. Just a few years ago, HMI was a prerogative of luxury vehicles. What is the reason why many car manufacturers suddenly decided to introduce displays in their vehicles?</p>
<p>The primary reason is money. It’s much easier to integrate a display in a cockpit and update the software once you see whether something works or doesn’t work for your users (similar to mobile phones) rather than design a set of physical controls and have to redesign it completely if something went wrong.</p>
<p>Another reason is market expectations — users expect to see HMI in the car they purchase today. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3013e913-ed7e-4f90-a070-042fbd1b83e6/5-designing-human-machine-interfaces-future-vehicles.png" /></p>
<p>But those are market reasons, what about human needs? HMI has tremendous power to improve the user experience of drivers and passengers.</p>
<p>Here are just a few areas where HMI can be valuable:</p>
<ul>
<li><strong>Help drivers make informed decisions.</strong><br />HMI can provide real-time data to users in an easy-to-consume manner. Take electric vehicles, for example. A driver might be able to see just how much energy was used up in real-time based on how hard they accelerated the vehicle.</li>
<li><strong>Can contribute to a safer driving experience.</strong><br />HMI can inform drivers about dangerous conditions (i.e. when the vehicle is close to the lane limit) and prevent driving collisions (i.e. slow down the car to avoid car accidents).</li>
<li><strong>More natural interaction between the driver and the car.</strong><br />HMI can establish a more natural interaction between humans and machines. For example, a voice-based system can allow drivers to use natural words to give commands to the car. </li>
</ul>
What To Focus On When Designing A Digital HMI
<p>Based on my experience, designing a beautiful and effective HMI requires looking at artistry and functionality as one. Artistry and functionality should be equals, working together in perfect harmony to immerse users in the experience. </p>
<p>Here are a few essential design principles I want to share with you:</p>
<h3>Give Users A Sense Of Control</h3>
<p>One of the <a href="https://www.nngroup.com/articles/ten-usability-heuristics/">ten usability heuristics for UI design</a> coined by Jakob Nielsen says,</p>
<blockquote>“The design should always keep users informed about what is going on, through appropriate feedback within a reasonable amount of time.”</blockquote>

<p>This heuristic applies to any digital system, including HMI design for vehicles. HMI should always inform users about the current status through appropriate feedback within a reasonable amount of time. It is especially important when a user is driving, and no actions with consequences to users should be taken without informing them.</p>
<p>Even when a car avoids an accident, it should inform the user what is happening (for example, by showing a visual alert with sound):</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/866b1a23-3696-476e-ae8d-8f7704f0deff/1-designing-human-machine-interfaces-future-vehicles.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/866b1a23-3696-476e-ae8d-8f7704f0deff/1-designing-human-machine-interfaces-future-vehicles.gif" /></a>Digital cockpit with various gadgets that inform the driver about the current state. (Image by <a href="https://milkinside.com/">Milkinside</a>) (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/866b1a23-3696-476e-ae8d-8f7704f0deff/1-designing-human-machine-interfaces-future-vehicles.gif">Large preview</a>)

<h3>Follow The “Safety First” Approach</h3>
<p>As I’ve mentioned above, the primary benefit of HMI systems is that they help us save lives. Modern cars are equipped with a lot of sensors and it’s possible for sensors to collect information, then use that information to track driving conditions. At the end of the day, the system can monitor real-time situations and prevent traffic collisions and accidents. The system response to conditions can be:</p>
<ul>
<li><strong>Reactive</strong><br />The system informs the driver about what just happened, such as low tire pressure or microsleep (eyelids get heavy), and alerts the driver about that. </li>
<li><strong>Proactive</strong><br />The system can analyze conditions, predict what might happen, and warn a driver about potentially bad circumstances. For example, the system analyses weather conditions and suggests users avoid taking a car on a day when roads will be covered with ice.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22006111-9849-43f7-948d-b4f74901dab5/12-designing-human-machine-interfaces-future-vehicles.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b1e8d11-e51a-40fa-a3db-a8c7dfd1017d/2-designing-human-machine-interfaces-future-vehicles.png" /></p>
<p>When you design the system response, it’s critical not to overwhelm users with a lot of information. It’s crucial to craft a solid notification strategy. All updates that you send to the user should be:</p>
<ul>
<li><strong>Valuable</strong><br />Users should see only updates that they care about. </li>
<li><strong>Timely</strong><br />Updates should be sent to the user exactly when they need them. </li>
<li><strong>Clear</strong><br />Users should be able to understand what the update is all about. It’s important to rely on <a href="https://www.nngroup.com/articles/chunking/">chunking</a> and <a href="https://www.interaction-design.org/literature/topics/gestalt-principles">gestalt principles</a> when you design information messages. The easier it’s for users to scan them the better it is for safety.</li>
</ul>
<h3>Minimize Cognitive Load</h3>
<p>Cognitive load is the amount of brain power required to use the system. When a system demands a lot of cognitive load from users, it is typically a clear indication that there is an opportunity to improve system design. There are a few things you can do to minimize cognitive load.</p>
<p>First, <strong>don’t force users</strong> to remember information about driving conditions. It’s a known fact that <a href="https://www.sciencedirect.com/science/article/abs/pii/S0166411508623055">people cannot keep a lot of information in their working memory</a>. You need to design a system in a way that answers all key questions that users might have while they’re driving:</p>
<ul>
<li>What is the temperature in the cabin? </li>
<li>What am I listening to right now?</li>
<li>Where am I going to?</li>
</ul>
<p>Designers need to provide this information upfront in the instrument cluster.</p>
<p>Second, it’s crucial to build your HMI based on existing <strong>mental models</strong>. People already have mental models about how HMIs work, based on their past experiences interacting with other cars. When you follow conventional design principles, you minimize the effort required to learn how to use your system. </p>
<h3>Reduce Unnecessary Distraction</h3>
<p>Over a decade ago, the National Safety Council found that mobile phone use while driving <a href="https://www.prnewswire.com/news-releases/national-safety-council-estimates-that-at-least-16-million-crashes-are-caused-each-year-by-drivers-using-cell-phones-and-texting-81252807.html">leads to 1.6 million crashes annually</a>. Imagine that number today, in a world where mobile devices have only grown in importance. That’s why one of the goals that carmakers have is to make users interact with an HMI instead of their phones.</p>
<p>HMI should serve as a complete replacement for your mobile phone while you’re driving. You shouldn’t have any reason to glance at your phone because HMI should be capable of doing the same things your mobile phone is doing. You might argue that the large display of the HMI system will attract a lot of attention and have a similar impact as mobile phones have now. In reality, <strong>the way we design a system matters</strong>. I believe that voice — not touch — should be the primary medium of interaction with the system. The goal is to define a core set of tasks that a user might want to complete with the system (i.e. changing radio stations, updating climate preferences, sending a message to a friend, and so on) and design scenarios where users can do that with voice alone, to satisfy this need. </p>
<p>The great thing about designing voice-based interactions is that you can test your solution without building an actual system. The <a href="https://en.wikipedia.org/wiki/Wizard_of_Oz_experiment">Wizard of Oz</a> method can help you test your script and find areas where you can do better. </p>
<h3>Help Users With Daily Routine</h3>
<p>What motivates people to start using new products? While there are many reasons why people do what they do, the primary motivator is efficiency. People begin using a particular product because they believe it will help them achieve their goal (or goals) much easier. The same principle applies to the HMI system.</p>
<p>If you live in major metropolitan areas, you know how hard it is to find a parking lot during the business week. In San Francisco, you can spend up to an hour finding a spot in the downtown area. It’s not the most exciting routine. How to make it better? The answer is simple — allow the car to find a place itself. </p>
<p>Modern navigation systems can provide up-to-date information about free parking lots, so when we design HMI, we can use this information to guide the driver to the spot.  </p>
<p>So, <strong>how to find a solution for daily operations?</strong> One promising approach is to rely on “How might we...” techniques. Once you define a routine task you want to help users with, you can ask questions like, “How might we help users solve this problem?” and propose a list of ideas. It is an ideal technique for brainstorming sessions with your team — collect all responses from your co-creators, and vote for the best solution together.</p>
<p>Another question you might have here: How can we incorporate this into HMI design? Well, first of all, operations that the system is capable of doing are called <em>skills</em>. There are <strong>two ways users can activate a skill</strong>: either do it manually (i.e. click on “Navigation app” to find a route to the paid parking lot) or the skill can be activated automatically (i.e. a system understand the user is looking for parking and offers relevant suggestion). Ideally, the system should learn about user needs and habits and predict when the user will need help. </p>
<p>Recently, car manufacturers have started to introduce augmented reality experience in the cars they make. For example, the 2022 Mercedes S-Klasse features a head-up display that projects graphics directly onto its windshield. By doing that, car manufacturers provide the important information in the context of interaction. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca662e20-7c8e-428f-8f4e-7fcdd0b46754/11-designing-human-machine-interfaces-future-vehicles.jpg" /></p>
<h3>The System Constantly Learns About You And Your Preferences</h3>
<p>A lot of articles were written about the importance of creating products that aim to personalize the experience. Yet, we don’t have too many products on the market that actually make it possible. </p>
<p>The sad fact is that many modern HMI do not offer personalization, they offer customization. These systems simply allow users to modify some preferences. But it’s a weak solution since <a href="https://archive.uie.com/brainsparks/2011/09/14/do-users-change-their-settings/">most users don’t change default settings</a> even when the system allows that. When it comes to HMI design, you have an opportunity to create a more comfortable driving experience for users if you consider their personal preferences. </p>
<p>Let me give you a couple of examples where learning about user behavior can improve user experience:</p>
<ul>
<li><strong>Climate Control</strong><br />The system selects the proper temperature for the user and ensures that the user feels comfortable by asking the user. On a winter day, the system asks users “Are you warm enough?” The user might respond with “I like warmer” The system will adjust the temperature and remember this selection.  </li>
<li><strong>Music, Places And Events</strong><br />The system knows user preferences and can suggest content, places, or events that the user likes. For example, the system can suggest new music tracks that match the user preferences.</li>
<li><strong>Comfort</strong><br />When the system notices that the user is turning seat massage on specific conditions (i.e. after a long workday, during the long-range, etc.), the system can turn it on automatically and notify the user about that (i.e. “For your comfort, I’ve turned on the classic massage”). Selecting a massage option is one of the tedious tasks in modern cars, and such intelligent automation can be beneficial for users. </li>
</ul>
<p>At the end of the day, we will have a system tailored to the needs of a particular user. And this will give us a significant competitive advantage — better user engagement and a higher level of trust. When we know that the system understands us and offers relevant recommendations, we are more willing to use it for a longer period.   </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/239bff6c-af25-4e8d-95a0-19991fcb8fec/4-designing-human-machine-interfaces-future-vehicles.png" /></p>
<h3>Inviting Visual Language</h3>
<p>If you ask me to define a pyramid of user needs, I will start give you the following layers:</p>
<ol>
<li>Functional,</li>
<li>Reliable,</li>
<li>Usable,</li>
<li>Pleasurable. </li>
</ol>
<p>Only when you design a system that has the first three layers can you make it pleasurable. But what does pleasurable mean when it comes to design? I think that pleasure is <strong>how the system makes you feel</strong>. Even a system that doesn’t have any visual design can make you feel good. </p>
<p>But when it comes to car HMI design, designers have a fantastic opportunity to use their skills to create an impressive solution. </p>
<blockquote>“One second of emotion can change the whole reality for people engaging with a product.”<br /><br />— Gleb Kuznetsov</blockquote>

<p>The <a href="https://www.nngroup.com/articles/aesthetic-usability-effect/">Aesthetic-Usability Effect</a> states that users tend to perceive attractive products as more usable. Designers have to build identity and character into the visual language they use to communicate with users. By improving the system’s visual aspect, we improve how the system is perceived. </p>
<p>For example, you can design a realistic 3D rendering for navigation that will help users faster understand the context (where they’re now and where they are going) and be a superb first-time experience. Imagine you as a user triggers this for the first time; this likely positively impacts you. </p>
<p>When you validate your HMI, you shouldn’t measure only task competition time and the number of errors. You should <strong>always measure user satisfaction</strong>. It’s important to ask questions “How does this design make you feel?” when you conduct usability testing with real or potential users. If you find that the user doesn’t feel good about your design, you can ask more specific questions to identify areas for improvement.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab7786c1-1ad1-4aed-aaa5-d943c90f6254/3-designing-human-machine-interfaces-future-vehicles.jpg" /></p>
Conclusion
<p>Modern HMIs are transforming the way we interact with our vehicles. A car becomes a gadget that we use in a similar way as we use our phones. Users expect a lot of HMI, they even evaluate car experience based on the experience they have with HMI. And <strong>it’s up to designers to satisfy those needs with proper design</strong>. </p>
<p>So, the next time you design HMI system you need to ensure that it satisfies following criteria:</p>
<ul>
<li>Gives users a sense of control;</li>
<li>Offers good learnability;</li>
<li>No or minimal distraction from driving; </li>
<li>Constantly learns user preferences and suggest changes proactively;</li>
<li>Sparks positive emotional response from users.</li>
</ul>
<h3>Further Reading On Smashing Magazine</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/06/alternative-voice-ui-voice-assistants/">An Alternative Voice UI To Voice Assistants</a>, Ottomatias Peura</li>
<li><a href="https://www.smashingmagazine.com/2021/02/designing-tooltips-mobile-user-interfaces/">Designing Better Tooltips For Mobile User Interfaces</a>, Eric Olive</li>
<li><a href="https://www.smashingmagazine.com/2018/04/designing-emotional-interfaces-boring-apps/">How To Design Emotional Interfaces For Boring Apps</a>, Alice Кotlyarenko</li>
<li><a href="https://www.smashingmagazine.com/2020/10/face-motion-typography/">How To Use Face Motion To Interact With Typography</a>, Edoardo Cavazza</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:75:"Billing Management For Your Next SaaS Idea Using Stripe And Azure Functions";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:84:"https://smashingmagazine.com/2021/12/billing-management-saas-stripe-azure-functions/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:84:"https://smashingmagazine.com/2021/12/billing-management-saas-stripe-azure-functions/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 17 Dec 2021 13:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:259:"In every software-as-a-service solution, user billing and payments are key aspects in the sale of services rendered. Let’s learn about Stripe and how the REST API can be programmatically used in serverless functions to manage the billing for an application.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Nwani Victory)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:167:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/346f3641-b7be-486d-8ac9-327ffe00e232/billing-management-saas-stripe-azure-functions.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:44033:"<p>To follow the steps in this tutorial, you should have the following:</p>
<ul>
<li>a Stripe account (you can <a href="https://dashboard.stripe.com/register">create</a> one for free and use the test mode to avoid incurring any charges while following the steps in this article);</li>
<li>a basic understanding of JavaScript and React;</li>
<li>an Auth0 account (you can <a href="https://auth0.com/signup?place=header&amp;type=button&amp;text=sign%20up">sign up</a> for a free one).</li>
</ul>
Introduction
<p>Delivering a solution to users through <a href="https://www.salesforce.com/in/saas/">software as a service</a> (Saas) often entails making use of cloud providers to host and deliver your entire infrastructure, usually comprising a back end and a front-end client. To offset the charges incurred from your cloud providers, a proper billing model for your users is needed in certain cases. In other scenarios, you might have products or services that you want to sell.</p>
<p>The two applications in the aforementioned scenarios share a functional requirement, which is the <strong>ability to process the user’s payment</strong>. To achieve this, the developer could leverage an external payment infrastructure, such as <a href="https://stripe.com/">Stripe</a>, <a href="https://squareup.com/us/en">Square</a>, or <a href="https://pay.amazon.com/">Amazon Pay</a>, among many others.</p>
<p>In this article, we’ll look at Stripe and use its <a href="https://stripe.com/docs/api">REST API</a> through Stripe’s <a href="https://www.npmjs.com/package/stripe">Node.js package</a> to build an API layer comprising Azure Functions apps that can be executed by an HTTP trigger from a web, mobile, or desktop client. The API layer and the endpoints accessible through each of the functions are depicted in the diagram below.</p>
<p><strong>Note</strong>: An Azure Functions app is an individual serverless function deployed and managed using the Azure Functions service. As depicted in the diagram below, a single project can comprise several Azure Functions apps.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f767369a-7560-4333-a849-5b035e151c0a/azure-functions-api-architecture.png" /></p>
<p>After building the API, we will clone an existing web application, built using React to display art paintings for sale. The APIs above will be used to retrieve the paintings as individual products, and the other endpoints will be used to handle payments.</p>
<p><strong>Note</strong>: While this article makes use of <a href="https://docs.microsoft.com/en-us/azure/azure-functions/">Azure Functions</a> as a provider of serverless functions, you can reuse the logic in your preferred provider, such as AWS’ <a href="https://aws.amazon.com/lambda/">Lambda</a> or Google’s <a href="https://cloud.google.com/functions">Cloud Functions</a>.</p>
Stripe Objects
<p>Before going further, we should understand the Stripe objects that we’ll be creating in this article and what they represent. Below is a list of the five objects we will be working with:</p>
<ol>
<li><p><a href="https://stripe.com/docs/api/subscriptions">subscription</a><br />A <code>subscription</code> object is created to charge users at intervals specified by the <code>billing_period</code> in the <code>price</code> object attached to the product. In this tutorial, we will have a product with a recurring price type, and we will subscribe users to it using the <code>subscription</code> object.</p>
</li>
<li><p><a href="https://stripe.com/docs/api/products">product</a><br />A <code>product</code> object is used to represent a single item or service being sold, and the price of the product is stored in the <code>price</code> object. In this article, we will create a product using Stripe’s admin dashboard, then retrieve it through the Stripe API.</p>
</li>
<li><p><a href="https://stripe.com/docs/api/prices">price</a><br />The <code>price</code> object is used to hold the price-related details of a product, such as currency, price, and billing cycle. In this article, we will again create the <code>price</code> object using Stripe’s admin dashboard, then retrieve it through the Stripe API.</p>
</li>
<li><p><a href="https://stripe.com/docs/api/payment_methods">payment method</a><br />A <code>payment_method</code> object on Stripe is used to hold a customer’s payment details. In this tutorial, we will create a payment method on each transaction and use it together with a <code>payment_intent</code> object.</p>
</li>
<li><p><a href="https://stripe.com/docs/api/payment_intents/object">payment intent</a><br />A <code>payment_intent</code> object is created to track the payment for a product from when it was created to when the payment is finally received. Each <code>payment_intent</code> object contains a <code>status</code> field to record the stage at which the payment is. In this article, we will use a <code>payment_intent</code> when a user purchases a product with a one-time pricing type.</p>
</li>
</ol>
Creating a Stripe Profile for Your Business Idea
<p>The first step to using Stripe is to create an account with your email address and a password, using Stripe’s online dashboard.</p>
<p>Creating a Stripe account will launch the new business in test mode. We can liken test mode to your local development mode, because it allows you to create Stripe objects and test them using test credit cards provided by Stripe, without incurring charges.</p>
<p>As shown in the Stripe dashboard for the sample application below, you can fill in an account name and other details to customize your service.  </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/60334aa4-eec9-4348-a2fe-7be921b3b687/stripe-business-dashboard.png" /></p>
<p>The image above shows the dashboard for our newly created account. Note the highlighted box in the image above, because the section contains the keys that you would use when programmatically working with the Stripe account either through the API or a supported client library.</p>
<p><strong>Note</strong>: Store the secret key in a secure notepad, because we will be using them when working with Stripe through a Node.js package from an Azure function in the next section.</p>
Creating Sample Products on Stripe
<p>To create a <code>product</code> object in Stripe, we can either use the REST API or Stripe’s web admin dashboard. In our case, the application’s owner is the sole manager of the products being sold; hence, we will use Stripe’s admin dashboard to create some sample products to be displayed in the demo application.</p>
<p><strong>Note:</strong> When using <a href="https://stripe.com/docs/api">Stripe’s Node.js package</a>, the <a href="https://stripe.com/docs/api/products/object"><code>product</code> method</a> is used to perform CRUD operations on a <code>product</code> object.</p>
<p>Using the top navigation bar in the Stripe dashboard’s home page, click the “Products” tab to navigate to the “Products” page. On the “Products” page, click the “Create Product” button at the top to create your first product in this Stripe business account.</p>
<p>On the page for creating a product, write “Gallery Subscription” in the “Name” input field. Write some brief text in the “Description” input field, to be used as the product information. And put “150” in the “Price” input field, to be used as the price of the new product, as shown below.</p>
<p><strong>Note:</strong> You can also click the “Image” box on the “Create Product” page to pick an image from your device to use as the image of the product.</p>
<p>The image below shows the input fields on the “Create Product” page for the sample product we’re creating.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6936f070-35c8-4753-968c-3a5318aa478c/stripe-create-recurring-product.png" /></p>
<p>From the image above, we can see that the “Recurring” option in the “Pricing details” is selected. This means that when a user is subscribed to this product, Stripe will automatically attempt to renew the subscription for the product at the end of the “billing period” specified in the “Pricing details” secton shown above. Click the “<a href="https://stripe.com/docs/issuing/testing">Save Product</a>” button to save and continue.</p>
<p>After saving the product, you will be redirected back to the “Products” page. Click the “Create Product” button again to create a product, specifying different information for the “Name”, “Description”, and “Pricing details”. This time, select the “One time” box in the “Pricing details” to enable a user to purchase this item once without being charged again for it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b75d37f-f6c3-41de-9773-823a2a20d7ba/stripe-create-onetime-product.png" /></p>
<p>The image above shows a new product being created with a “one-time” price type. Notice that the “Billing period” dropdown menu is removed when the “One time” option is selected, unlike the first product that we created with a “Recurring” pricing type.</p>
<p><strong>Note</strong>: You can continue to create more products with different names, descriptions, and pricing details, to populate the products in your Stripe business account.</p>
Creating Azure Functions
<p><a href="https://docs.microsoft.com/en-us/azure/azure-functions/">Azure Functions</a> are functions provided by <a href="https://azure.microsoft.com/en-us/">Azure</a> for managing serverless event-driven code that can be executed through a defined <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=csharp">event trigger</a>. All Azure functions that we’ll create in this article will use the <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook">HTTP trigger</a>, which enables a function to be triggered by making an HTTP request to the function’s URL endpoint.</p>
<p>All programmatic operations with Stripe in this article will be done using Stripe’s <a href="https://www.npmjs.com/package/stripe">npm library</a> for a Node.js environment. Serverless functions are used in this article to cover use cases for small applications, using a <a href="https://jamstack.org/">JAMstack</a> architecture without a back-end service.</p>
<p>Azure functions can be developed either through the <a href="https://azure.microsoft.com/en-us/features/azure-portal/">Azure portal</a> or locally on your computer. All Azure functions in this article will be developed and executed locally using Azure’s <a href="https://github.com/Azure/azure-functions-core-tools#linux">Core Tools</a> command-line interface (CLI). Execute the command below to install Azure’s Core Tools globally on your computer using npm.</p>
<pre><code>npm i -g azure-functions-core-tools@3 --unsafe-perm true</code></pre>

<p>Next, run the commands below to create a new project directory to store the Azure Functions files and to bootstrap the Azure Functions project using the Core Tools CLI.</p>
<pre><code>
# Create a new directory
mkdir stripe-serverless-api

# Change into new directory
cd stripe-serverless-api

# Bootstrap Azure Functions project
func new --language='javascript' --worker-runtime='node' --template="HTTP trigger"
--name="products"
</code></pre>

<p>The commands above will create a <code>stripe-serverless-api</code> project directory on your computer. Also, using the parameters passed to the Core Tools CLI, we created an Azure Functions app with an HTTP trigger template using a Node.js runtime with JavaScript.</p>
<p>We can start our new Azure function from the CLI to listen to HTTP requests through localhost on port <code>5050</code>.</p>
<p><strong>Note</strong>: When using the HTTP trigger for an Azure Functions app, the function can be invoked via the function app’s name appended to the endpoint. An example of the products function app created above is <code>&lt;FUNCTIONS_ENDPOINT&gt;/products</code>.</p>
<pre><code>func start -p 5050</code></pre>

<p>Before we begin implementing the Azure functions, let’s install the two dependencies below, to be used within the Azure functions.</p>
<pre><code>yarn add stripe dotenv</code></pre>

<p>Stripe’s Node.js package, installed above, will be used to interact with the Stripe API. And <a href="https://www.npmjs.com/package/dotenv">dotenv</a> will be used to load Stripe’s secret credentials, used in the Azure functions that will be created next.</p>
<p>Create a <code>.env</code> file to store the Stripe credentials copied from the Stripe dashboard in the format below, replacing the placeholder in angled brackets with the appropriate value.</p>
<pre><code>// .env

STRIPE_SECRET_KEY=&lt;STRIPE_SECRET_KEY&gt;
</code></pre>

<p>The Stripe credentials stored above will be used to authenticate the Stripe package with the Stripe API. These credentials are sensitive and should be privately stored. To prevent them from getting pushed when the entire project is pushed to a GitHub repository, create a <code>.gitignore</code> file and add the <code>.env</code> file name.</p>
<pre><code>// .gitignore
.env</code></pre>

<p>At this point, the Azure Functions project is fully set up, and we can now proceed to build the individual apps within the project. We will proceed with implementing the logic in the Azure Functions apps, starting with the products function app.</p>
<h3>Products Function</h3>
<p>The purpose of this Azure function is to accept a <code>GET</code> HTTP request, and then respond with JSON data containing all products in the Stripe account.</p>
<p>Using your code editor, open the <code>index.js</code> file in the <code>products</code> directory that was made when you created the Azure Functions project. Add the code block below to the <code>index.js</code> file to retrieve all products created in Stripe.</p>
<pre><code>require("dotenv").config();

const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const headers = {
  "Access-Control-Allow-Methods": "*",
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "Content-Type",
  "Content-Type": "application/json",
};

module.exports = async function (context, req) {
  try {
    const { data } = await stripe.products.list({});
    context.res = {
      headers,
      body: {
        data,
      },
    };
  } catch (e) {
    context.res = {
      headers,
      body: e,
    };
  }
};
</code></pre>

<p>The exported function in the code block above uses the <a href="https://stripe.com/docs/api/products/list"><code>list</code></a> method to list all products created in the account belonging to the <code>STRIPE_SECRET_KEY</code> variable being used.</p>
<p>Once the promise from the asynchronous <code>list</code> method is resolved, the data array is destructured and sent back (alongside some request headers) as the response to the request, by setting the body within the <a href="https://stripe.com/docs/api/products/list"><code>context</code></a> object.</p>
<p>To test the function implemented above, open a new CLI and execute the command below, which makes a <code>GET</code> HTTP request, using <a href="https://curl.se">cURL</a>, to the Azure functions running in a separate terminal.</p>
<pre><code>curl http://localhost:4040/api/customer</code></pre>

<p>After executing the command above, a JSON response will be returned to your console containing the previously created products.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9684cd28-874a-4905-b9e7-058c35dd73dd/1-product-function-response.png" /></p>
<h3>Price Function</h3>
<p>As shown in the fields returned from the products function above, the price details of a product are not included in the <code>product</code> object. To get the price details of a product, we need to fetch the <code>price</code> object associated with the product. This will be the job of the price function, because each time it is executed, it will return the <code>price</code> object associated with a product.</p>
<p>To create a new Azure Functions app, copy the the existing <code>products</code> folder, and paste it in the same directory as a duplicate. Then, rename the duplicated folder to <code>price</code>.</p>
<p>Using your code editor, open the <code>index.js</code> file in the new <code>price</code> directory, and replace the existing function with the contents of the code block below, which implements the price function:</p>
<pre><code>require("dotenv").config();

const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const headers = {
  "Access-Control-Allow-Methods": "*",
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "Content-Type",
  "Content-Type": "application/json",
};

module.exports = async function (context, req) {
  const { product } = req.query;

  try {
    const { data } = await stripe.prices.list({
      product,
    });
    context.res = {
      headers,
      body: {
        data : data[0],
      },
    };
  } catch (e) {
    context.res = {
      headers,
      body: e,
    };
  }
};
</code></pre>

<p>The <code>price</code> function app above accepts a <code>GET</code> HTTP request that contains a product in the <code>query</code> parameter with the value of a product’s ID. The <a href="https://stripe.com/docs/api/prices/list"><code>list</code></a> method on the <code>price</code> object is used to retrieve prices within a Stripe account. The <code>product</code> parameter passed to the <code>list</code> method restricts the prices retrieved to the ones associated with the <code>product</code> object whose ID has been passed to the <code>list</code> method.</p>
<p>Once the promise from the <code>list</code> method is resolved, the data array from the <code>list</code> method is destructured, and only the first object within the data array is sent back as the request response.</p>
<p><strong>Note:</strong> Only the first object from the data array is sent back because we want to display only one price entity. A product may have several <code>price</code> objects attached it, but for this application, we will use only one.</p>
<p>To test the function implemented above, execute the command below, which sends a <code>GET</code> HTTP request containing a product ID in a <code>request</code> parameter to the Azure functions running in a separate terminal.</p>
<p><strong>Note:</strong> You can find the ID of a product in the Stripe dashboard. Navigate to the “Products” page, and click a product to view its details. In the details displayed, you will find the ID of the product.</p>
<pre><code>curl http://localhost:4040/api/price?product="prod_JudY3VFuma4zj7"</code></pre>  

<p>Once you execute the command above, a JSON response will be returned to your console with an object containing the <code>price</code> object of a product.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ca10bc6-dc5c-401b-b757-a8867150f162/price-function-response.png" /></p>
<p>From the response shown in the sample above, we can see the price details of the product, including the currency, type, and recurring data.</p>
<h3>Purchase Function</h3>
<p>The purchase function app will be used either to make a one-time purchase of a product or to subscribe a user to a product. Either of these two operations involves charging a user via their bank card.</p>
<p>To create a new function app within the Azure Functions project, copy either the existing products or the <code>price</code> folder, and paste it in the same directory as a duplicate. Then, rename the duplicated folder to <code>purchase</code>.</p>
<p>In your code editor, add the contents of the code block below in the <code>index.js</code> file, which will handle a <code>POST</code> request to create either a subscription or a one-time purchase for a user.</p>
<pre><code>// ./purchase/index.js
require("dotenv").config();

const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const headers = {
  "Access-Control-Allow-Methods": "*",
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "Content-Type",
  "Content-Type": "application/json",
};

module.exports = async function (context, req) {
  const {
    number,
    purchaseCurrency,
    cvc,
    exp_month,
    exp_year,
    purchaseAmount,
    email,
    purchaseType,
    priceEntityId,
  } = req.body;

  try {
    // Create a payment method for user using the card details
    const { id: paymentID } = await stripe.paymentMethods.create({
      type: "card",
      card: {
        number,
        cvc,
        exp_year,
        exp_month,
      },
    });

    const { id: customerID } = await stripe.customers.create({
      email,
      description: "Artwork gallery customer",
      payment_method: paymentID,
    });

    await stripe.paymentMethods.attach(paymentID, { customer: customerID });
    if (purchaseType === "recurring") {
      const subscriptionData = await stripe.subscriptions.create({
        customer: customerID,
        default_payment_method: paymentID,
        items: [
          {
            price: priceEntityId,
          },
        ],
      });
      context.res = {
        headers,
        body: {
          message: "SUBSCRIPTION CREATED",
          userStripeId: customerID,
          userSubscriptionId: subscriptionData.id,
        },
      };
    } else {
      const { id: paymentIntentId } = await stripe.paymentIntents.create({
        amount: purchaseAmount,
        currency: purchaseCurrency || "usd",
        customer: customerID,
        payment_method: paymentID,
      });
      const { amount_received } = await stripe.paymentIntents.confirm(
        paymentIntentId,
        {
          payment_method: paymentID,
        }
      );
      context.res = {
        headers,
        body: {
          message: `PAYMENT OF ${amount_received} RECIEVED`,
        },
      };
    }
  } catch (e) {
    context.res = {
      status: 500,
      body: e,
    };
  }
};
</code></pre>

<p>The function app in the code block above uses the Stripe package to create either a one-time payment or a subscription for a user based on the <code>purchaseType</code> value gotten from the request body. Here is a run down of what happened above:</p>
<ul>
<li>First, a <code>payment_method</code> entity is created using the credit card number, name, CVC, and expiration details, destructured from the data sent in the function’s request body.</li>
<li>Next, a customer is created in Stripe using the <code>email</code> value sent in the request body, a description, and the payment method previously created. The <code>customer</code> object is also attached to the <code>payment_method</code> entity by using the <code>attach</code> method and specifying the <code>payment_method</code> ID string that was returned when the payment method was created, and specifying a <code>customer</code> option with the customer ID that was returned when the <code>customer</code> entity was created.</li>
<li>The last part of the function handler has an <code>if</code> condition that evaluates the <code>purchaseType</code> value sent in the request body. If the <code>purchaseType</code> value is recurring, then the <code>subscription</code> entity would contain the customer ID returned from the <code>customer</code> entity, a <code>default_payment_method</code> with the value of the <code>payment_method</code> ID returned from the <code>payment</code> entity, and an <code>items</code> array with a single <code>item</code> object containing the ID of a <code>price</code> entity.</li>
</ul>
Expanding the Demo Web Application
<p>A web application built using <a href="https://reactjs.org/">React</a> will serve as the web client that directly accesses the Azure Functions apps that we’ve built up to now. As explained earlier, the interface has already been built, and the data has been retrieved from a mock JSON file. We will only make some minimal changes and add the HTTP requests to use the Azure Functions endpoint.</p>
<p>Clone the web application from the <a href="https://github.com/vickywane/stripe-art-app.git">GitHub repository</a> by executing the Git command below from your local CLI:</p>
<pre><code>git clone https://github.com/vickywane/stripe-art-app.git</code></pre>

<p>Next, move into the cloned application’s directory and install the dependencies listed in the <code>package.json</code> file.</p>
<pre><code># change directory
cd stripe-art-app

# install dependencies
yarn install</code></pre>

<p>Once the dependencies have been installed, run the <code>yarn start</code> command from your CLI to view the home page of the web application from your web browser at <code>http://localhost:3000</code>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9469cf13-1a2d-413f-9a79-1f6fa17399cf/gallery-application-home-page.png" /></p>
<p>Before diving into the code base of the web application, let’s note a few things about the existing structure of the application.</p>
<p>First, user management, including authentication and the storing of a user’s personal data from the application, was implemented using <a href="https://auth0.com/">Auth0</a> through the use of the <a href="https://www.npmjs.com/package/@auth0/auth0-react">auth0-react</a> SDK for React applications.</p>
<p>To use Auth0 in the cloned application, we need to supply the credentials from an Auth0 <a href="https://auth0.com/docs/quickstart/spa">single-page application</a> type in the <code>.env</code> file within the web application folder in the format shown below.</p>
<p><strong>Note</strong>: See the <a href="https://auth0.com/docs/quickstart/spa/react">Auth0 quickstart guide</a> for more details on how to get started with a single-page application.</p>
<pre><code># ./env

REACT_APP_AUTHO_DOMAIN=&lt;AUTH0_DOMAIN&gt;
REACT_APP_AUTHO_SECRET_KEY=&lt;AUTH0_SECRET&gt;
REACT_APP_FUNCTION_ENDPOINT="http://localhost:5050/api"</code></pre>

<p>The <code>REACT_APP_FUNCTION_ENDPOINT</code> defined in the <code>.env</code> file above will be accessed with the application components to make HTTP requests to the running function apps. Currently, the Azure Functions apps are being served locally on your computer’s localhost, but this will change to a live URL when the function apps are deployed to Azure Functions.</p>
<p>The second thing to note is that the data of art products displayed on the home page are static, retrieved from a JSON file in the <code>data</code> directory.</p>
<p>In this part of this article, we will extend the functionalities above as follows:</p>
<ul>
<li><strong>Home page</strong><br />We will refactor the home page to fetch and display products created in Stripe using the <code>GET</code> products Azure function created previously, and we will discard the <code>mock.json</code> file containing the prototype art products.</li>
<li><strong>Checkout page</strong><br />We will build a new checkout page for users who want to purchase either an art print or a subscription with their credit card.</li>
</ul>
Home Page
<p>The home page is displayed for all users, whether authenticated or unauthenticated, and it displays a list of all available artwork products, using a child <code>artworkCard</code> component exported from the <code>artworkCard.js</code> file.</p>
<p>We need to make a few changes to this component, because we want the button in the <code>artworkCard</code> component to prompt the user to purchase an artwork. Modify the existing <code>artworkCard.js</code> file in the <code>components</code> directory with the highlighted portions of the code block below.</p>
<div>
 <pre><code>// ./src/components/artworkCard.js

import { navigate } from "@reach/router";
import React, { useState, useEffect } from "react";

const ArtworkCard = ({ name, description, img_uri, productId }) =&gt; {
  const [priceData, setPriceData] = useState({});

  useEffect(() =&gt; {
    (async () =&gt; await fetchPrice())();
  }, []);

  const fetchPrice = async () =&gt; {
    const res = await fetch(
      '${process.env.REACT_APP_FUNCTION_ENDPOINT}/price?product=${productId}'
    );
    const { data } = await res.json();
    setPriceData(data);
  };

  return (
    &lt;div className="artwork-card"&gt;
      &lt;div
        className="card-top"
        style={{
          backgroundImage: 'url(${img_uri})',
        }}
      &gt;&lt;/div&gt;
      &lt;div className="artwork-details"&gt;
        &lt;div className={"align-center"}&gt;
          &lt;h5&gt; {name} &lt;/h5&gt;
        &lt;/div&gt;
        &lt;hr /&gt;
        &lt;div style={{ justifyContent: "space-between" }} className="flex"&gt;
          &lt;div className="align-center"&gt;
          &lt;p&gt; {'$${priceData.unit_amount}'} &lt;/p&gt;
          &lt;/div&gt;
          &lt;div&gt;
            &lt;button
              className="btn"
              onClick={() =&gt;
                navigate('/checkout/${productId}', {
                  state: {
                    name,
                    productId,
                    priceEntityId: priceData.id,
                    price: priceData.unit_amount,
                    purchaseType: priceData.type,
                  },
                })
              }
            &gt;
              Purchase
            &lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;br /&gt;
        &lt;p&gt; {description} &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default ArtworkCard;</code></pre>
</div>

<p>In the highlighted parts of the file above, we introduced a <a href="https://reactjs.org/docs/hooks-effect.html"><code>useEffect</code></a> hook to make an HTTP request to the price function app to retrieve the <code>price</code> object attached to the product being displayed in the card. Once the promise from the <code>fetch</code> method is resolved, the data stream is further converted to JSON and stored in the component’s local state.</p>
<p>A button labelled <code>Purchase</code> was also added to the <code>artworkCard</code> component. When clicked, it navigates the user to the checkout page, where the user can input their bank card details to purchase the product.</p>
<p>In your code editor, open the <code>Home.js</code> file in the <code>pages</code> directory, and modify it with the highlighted portions of the code block below, which will fetch all available products in Stripe through the products function app and then display them.</p>
<div>
 <pre><code># ./src/pages/home.js

import React, { useState, useEffect } from "react";
import Header from "../components/header";
import "../App.css";
import Banner from "../components/banner";
import ArtworkCard from "../components/artworkCard";

const Home = () =&gt; {

  const [artworks, setArtworks] = useState([]);
  useEffect(() =&gt; {
    (async () =&gt; await fetchArtworks())();
  }, []);

  const fetchArtworks = async () =&gt; {
    const res = await fetch(<code>${process.env.REACT_APP_FUNCTION_ENDPOINT}/products</code>);
    const { data } = await res.json();
    setArtworks(data);
  };

  return (
    &lt;div style={{ backgroundColor: "#F3F6FC", height: "100vh" }}&gt;
      &lt;Header /&gt;
      &lt;Banner /&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;div className="page-padding"&gt;
        &lt;div style={{}}&gt;
          &lt;div className="flex"&gt;
            &lt;div className="align-center"&gt;
              &lt;h4&gt; My Rated Art Paints &lt;/h4&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;p&gt;
            Every artist dips his brush in his own soul, &lt;br /&gt;
            and paints his own nature into his pictures.
          &lt;/p&gt;
        &lt;/div&gt;
        &lt;br /&gt;
        &lt;div&gt;
          &lt;ul className="artwork-list"&gt;
            {artworks.map(({ id, name, img_uri, images, description }) =&gt; (
              &lt;li key={id}&gt;
                &lt;ArtworkCard
                  productId={id}
                  description={description}
                  img_uri={images[0]}
                  name={name}
                /&gt;
              &lt;/li&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default Home;
</code></pre>
</div>

<p>In the code block above, a <code>GET</code> request is made as soon as the component is loaded in a <code>useEffect</code> hook using the browser’s fetch API. The stream response from the request made is further converted into JSON format, and the data is stored in the local component state for further use.</p>
<p>With this change, the <code>data.json</code> file is no longer being used. Also, when you view the web application in your browser, you will find the products created in Stripe displayed in a grid, as shown below:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09d59b9f-4892-41f4-9900-3d244e442456/store-app-home-page.png" /></p>
<p>From the details shown in the image above, you will notice that the products displayed on the home page were the ones created at the beginning of this article.</p>
Checkout Page
<p>Create a <code>checkout.js</code> file in the <code>pages</code> directory. This new file will contain the component that will be displayed to collect the user’s credit card details, after they are routed to <code>/checkout</code> upon clicking the “Purchase” button to purchase an art print.</p>
<p>Add the contents of the code block below to create the checkout component that contains the form elements to collect the credit card details:</p>
<pre><code># ./src/pages/checkout.js

import React, { useState } from "react";
import { useAuth0 } from "@auth0/auth0-react";
import Header from "../components/header";
import "../App.css";

const Checkout = (props) =&gt; {
  const { purchaseType, productId, priceEntityId, name, price } =
    props.location.state;

  const [cardNumber, setCardNumber] = useState("");
  const [cardName, setCardName] = useState("");
  const [cvc, setcvc] = useState("");
  const [cardExpiryMonth, setCardExpiryMonth] = useState("");
  const [cardExpiryYear, setCardExpiryYear] = useState("");
  const [loading, setLoading] = useState(false);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const { user } = useAuth0();

  const makePayment = async () =&gt; {
    setLoading(true);
    try {
      const res = await fetch(
        `${process.env.REACT_APP_FUNCTION_ENDPOINT}/purchase`,
        {
          method: "POST",
          body: JSON.stringify({
            number: cardNumber,
            exp_month: cardExpiryMonth,
            exp_year: cardExpiryYear,
            purchaseAmount: price,
            purchaseType,
            priceEntityId,
            cvc,
            email: user.email,
          }),
        }
      );

      if (res.status === 200) {
        const { paymentId } = await res.json();
        await fetch(`${process.env.REACT_APP_FUNCTION_ENDPOINT}/billing-data`, {
          method: "POST",
          body: JSON.stringify({
            productId,
            userId: user.sub,
            paymentId,
          }),
        });
        setPaymentSuccess(true);
      }
    } catch (e) {
      console.log(e);
    } finally {
      setLoading(false);
    }
  };

  return (
    &lt;div
      style={{
        height: "100vh",
        background: "#F3F6FC",
      }}
    &gt;
      &lt;Header /&gt;
      &lt;div
        className="product-page-padding"
        style={{
          height: window.innerHeight,
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      &gt;
        &lt;div className="align-center"&gt;
          &lt;div className="payment-card"&gt;
            &lt;h5 className="align-center"&gt;
              &lt;b&gt;{name} Checkout &lt;/b&gt;
            &lt;/h5&gt;
            &lt;p&gt;
              &lt;b&gt;Total Price:&lt;/b&gt; {`$${price}`}
            &lt;/p&gt;
            &lt;p&gt;
              &lt;b&gt; Payment Type: &lt;/b&gt; {purchaseType.toUpperCase()}
            &lt;/p&gt;
            &lt;hr /&gt;
            {!paymentSuccess ? (
              &lt;form
                onSubmit={(e) =&gt; {
                  e.preventDefault();
                  makePayment();
                }}
              &gt;
                &lt;h5&gt; Payment Details &lt;/h5&gt;
                &lt;br /&gt;
                &lt;div className="input-container"&gt;
                  &lt;label id="name"&gt; Cardholder Name &lt;/label&gt;
                  &lt;input
                    value={cardName}
                    onChange={(e) =&gt; setCardName(e.target.value)}
                    className="payment-input"
                    placeholder="Bank Cardholder Name"
                    type="text"
                  /&gt;
                &lt;/div&gt;
                &lt;br /&gt;
                &lt;div className="input-container"&gt;
                  &lt;label id="name"&gt; Card Number &lt;/label&gt;
                  &lt;input
                    value={cardNumber}
                    onChange={(e) =&gt; setCardNumber(e.target.value)}
                    className="payment-input"
                    placeholder="Bank Card Numbers"
                    type="number"
                  /&gt;
                &lt;/div&gt;
                &lt;br /&gt;
                &lt;div className="input-container"&gt;
                  &lt;label id="name"&gt; Card CVC &lt;/label&gt;
                  &lt;input
                    value={cvc}
                    onChange={(e) =&gt; setcvc(e.target.value)}
                    className="payment-input"
                    placeholder="Bank Card CVC"
                    type="text"
                  /&gt;
                &lt;/div&gt;
                &lt;br /&gt;
                &lt;div className="input-container"&gt;
                  &lt;label id="name"&gt; Card Expiry Month &lt;/label&gt;
                  &lt;input
                    value={cardExpiryMonth}
                    onChange={(e) =&gt; setCardExpiryMonth(e.target.value)}
                    className="payment-input"
                    placeholder="Bank Card Expiry Month"
                    type="text"
                  /&gt;
                &lt;/div&gt;
                &lt;br /&gt;
                &lt;div className="input-container"&gt;
                  &lt;label id="name"&gt; Card Expiry Year &lt;/label&gt;
                  &lt;input
                    value={cardExpiryYear}
                    onChange={(e) =&gt; setCardExpiryYear(e.target.value)}
                    className="payment-input"
                    placeholder="Bank Card Expiry Year"
                    type="text"
                  /&gt;
                &lt;/div&gt;
                &lt;br /&gt;
                &lt;button
                  disabled={loading}
                  style={{ width: "100%" }}
                  onClick={(e) =&gt; {
                    e.preventDefault();
                    makePayment();
                  }}
                  className="btn"
                &gt;
                  {!loading ? "Confirm" : "Confirming"} My Payment
                &lt;/button&gt;
              &lt;/form&gt;
            ) : (
              &lt;div&gt;
                &lt;br /&gt;
                &lt;h5 className="align-center"&gt;
                  Your {`$${price}`} purchase of {name} was successfull{" "}
                &lt;/h5&gt;
                &lt;br /&gt;
              &lt;/div&gt;
            )}
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default Checkout;
</code></pre>

<p>As described earlier, the form component above contains four input fields for the user to type in their name, number, expiration and CVC details. These details are further stored in the component’s local state, and, upon a click of the “Confirm my payment” button, the stored credit card details are used to purchase the product.</p>
<p>Of particular interest in the checkout component above is the <code>makePayment</code> function, because it handles the functionality of the checkout page. When executed, the <code>makePayment</code> function sends a <code>POST</code> request containing the credit card details in its request body using fetch to the <code>/purchase</code> cloud function. Once the first <code>POST</code> request is resolved successfully, with a <code>200</code> status code indicating a successful payment, a new <code>POST</code> request is made to the <code>/billing-data</code> cloud function to store the details of the purchased product.</p>
<p><strong>Note:</strong> As explained when we were designing the <code>productCard</code> component, the purchased product details stored in Auth0 will be used to identify products purchased by the user from the home page.</p>
<p>To test this component, we will fill the input fields with the details of one of the <a href="https://stripe.com/docs/testing#cards">basic test cards</a> provided by Stripe for applications still in test mode, and then click the “Confirm payment” button, as shown below:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9db6345e-71ac-4f14-a04b-5c3982f940a1/checkout-page.png" /></p>
<p><strong>Note:</strong> The credit card used in the image above is one of the <a href="https://stripe.com/docs/testing#cards">basic test cards</a> provided by Stripe and not a real credit card. Stripe accounts in test mode must use one of the basic test cards.</p>
<p>Once the “Confirm my payment” button in the checkout card is clicked, a payment for the product is made from the credit card provided, and the checkout card interface is changed to reflect the successful response.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb7ad85-7bc1-4b43-85e7-679e1fe13322/payment-successful-response.png" /></p>
<p>Going to the “Reports” section of your Stripe admin dashboard, you will see a reflection of the last payment made when the gallery subscription was created on the checkout page above.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/069f5c27-d12b-40a2-80b2-886249640ac4/stripe-dashboard-statistics.png" /></p>
<p>From the charts shown in the image above, taken from the test Stripe card used in this tutorial, you will see that a gross volume of $150.00 was attained once the gallery subscription was created.  </p>
<p><strong>Note</strong>: The image also shows statistics from test operations that were made on the Stripe account while this article was being developed.</p>
<p>At this point, we have fully set up the entire payment flow. You can repeat the process of creating a product through the Stripe dashboard and purchasing it using the React application or any other client that consumes Azure Functions.</p>
Summary
<p>Congratulations on completing this hands-on tutorial.</p>
<p>By going through the steps in this tutorial, we have worked with Stripe, Azure Functions, and React. We started by building an API layer that uses the Stripe API through a Node.js package. Then, we moved on to consuming the Azure Functions app endpoints from a web application, using the function app to retrieve products and make payments for the products.</p>
<h3>References</h3>
<ul>
<li><a href="https://stripe.com/docs">Documentation</a>, Stripe</li>
<li><a href="https://www.npmjs.com/package/@auth0/auth0-react">auth0-react</a> (SDK for React single-page applications)</li>
<li><a href="https://auth0.com">Auth0</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:69:"Touch Design For Mobile Interfaces: Defining Mobile Devices (Excerpt)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:76:"https://smashingmagazine.com/2021/12/touch-design-mobile-interfaces-devices/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:76:"https://smashingmagazine.com/2021/12/touch-design-mobile-interfaces-devices/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 15 Dec 2021 11:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:240:"Before we can talk about how people interact, much less how to take advantage of that knowledge and design, it’s important to understand a bit about the history, the technology, and what today counts as a mobile touchscreen device at all.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Steven Hoober)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:161:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9e9a3814-1de8-4be8-87c4-a14712d76776/1-touch-design-mobile-interfaces-devices.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:14460:"<p>The personal computer (PC) is still assumed to only be used at a desk-like workstation, in discrete sessions of work with the user focused entirely on the computer. Mobile devices have always been different from “computers” in that they are <em>always on</em> (there’s no need to turn them on to start or end work), <em>always with us</em> (not just close at hand, but also personal devices), and <em>aware</em> (by being connected, and full of sensors).</p>
<p>Mobile phones are rapidly becoming touchscreens and touchscreen phones are increasingly all-touch, with the largest possible display area and fewer and fewer hardware buttons. Today, <strong>about half of mobile devices are smartphones</strong>, and some of the remaining feature phones are also touchscreen. (Feature phones are mobile phones with extra features. Usually today this means internet connectivity, cameras, GPS, and so on, but they are distinct from smartphones.) With the majority of Internet access via mobiles, in just another decade almost everyone will use touch as their primary interaction method, worldwide.</p>
<p>To many designers and developers the process of designing for mobile assumes that touch is natural, so we don’t need to pay any particular attention to the design of touch systems. This is not true. As children we all had to learn — for years — how to touch, feel, and manipulate real-world objects. Touchscreens and our standard paradigms of interaction are not the same as the real physical world; touchscreen behaviors are as learned as the use of a mouse or a doorknob.</p>
<p>Touch is also not a direct analogue of “traditional” pointing devices like a mouse or trackpad, and <strong>there is no ‘one’ type of touchscreen</strong>. Changes in the technology of touch over time mean that many assumptions and standards of how to design for touch from just a few decades ago are no longer relevant — and may be actively misleading or dangerous.</p>
<p>Let’s start by defining what a mobile device is and examining the scope of how understanding mobile technology and use patterns is important when designing for the huge number of mobile devices in the world, as well as because the world is changing.</p>
Smartphone
<p>One of the more common assumptions is that mobile means a touchscreen smartphone. Something like one of these in the picture below is certainly in your pocket, or lying next
to you. Some of you have more than one of them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9e9a3814-1de8-4be8-87c4-a14712d76776/1-touch-design-mobile-interfaces-devices.png" /></p>
<p>When you encounter a smartphone anywhere in the world, it is probably an Android phone. It barely matters which manufacturer, in the same way you probably barely care who made the Windows PC on your desk. The hardware matters, but <strong>the underlying OS is the same</strong>, and pretty much all apps will run on any device of the same age. <a href="https://www.scientiamobile.com/movr-mobile-overview-report/">Android holds a bit over half the US market, and closer to 75% of the installed base worldwide</a>.</p>
<p>This simple Android/iOS market distinction was not always true and took a long time to settle into its current shape. It was a full six years after the iPhone launched before the then-ubiquitous Nokia Symbian S60 OS was overtaken by iOS. And perfectly good BlackBerry and Windows devices hung on with good market share in some regions for years longer. Why? Because the smartphone didn’t burst onto the scene fully formed, but it transitioned and offered multple solutions to people’s information and communications needs. The first smartphone was more often called <strong>a PDA phone</strong>, because at that time everyone knew what a PDA was.</p>
<p>The personal digital assistant was a touch device — though most were used with a stylus or pen — with an interface much like we have today on smartphones. But PDAs were not connected and had to be docked to a computer to sync. When the first mobile phones became smart and acquired the PDA pieces, they quickly became marketed as smartphones to differentiate them from other device types.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1ae27b6-709b-4a1c-9114-19f4e26bcfb5/2-touch-design-mobile-interfaces-devices.png" /></p>
Feature Phone
<p>As shown in the introduction, today almost everyone in the world has a mobile device, but fully half of them are still not smartphones. Early cellular mobile phones only made phone calls. Fairly rapidly, text messaging (SMS, short for “Short Message Service”) was added, as it was baked into the network itself, originally as a way to send messages internally or for testing.</p>
<p>By 2002, mobile phones had access to the internet with what became perfectly good web browsers, had cameras, and within a few years would get additional features such as GPS receivers, faster Internet, Bluetooth, and Wi-Fi. These were called feature phones <strong>to differentiate them from plain old phones</strong> (they had more features, get it?) or what would later be derisively called dumbphones. While some feature phones are still clamshell or flip phones, the candy bar or slider are at least as common.</p>
<p>Feature phones all use proprietary and little known operating systems developed by the makers of the phones, as opposed to prevalent ones like Android or iOS. Though usually unable to be meaningfully upgraded, they can install apps. In many ways, the feature phone app ecosystem is simpler than the smartphone ecosystem we have today as almost every app works on almost every phone. Many phones come preinstalled with common apps such as social networking, email, and maps, or with shortcuts to the browser.</p>
<p>Users of feature phones are not the left behind, and can be connected through their mobile phones like any smartphone user. Most project teams, designers, and even governments are quite dismissive of this half of the world, but we shouldn’t be. <strong>These devices tie the world together</strong>, and have formed the foundation of many very large-scale and profitable projects. Your product could probably benefit from working at least in some way on feature phones.</p>
Tablet
<p>iPads are considered an entirely distinct market from phones, but I consider them clearly mobile as well, owing to the way they are used. People carry them around, work with them while standing, unlike how they use laptops. And the way they interact is a direct extension of mobiles.</p>
<p>Notice I just said iPads, because — as every expert says — iOS won that market and <a href="https://jswordsmith.com/how-apple-won-the-tablet-war/">there are almost no Android tablets</a>. At least that’s what I hear from all tech writers discussing how awesome the new iPad keyboard is, or when I go <a href="https://www.digitaltrends.com/apple/the-ipad-is-still-the-only-tablet-worth-buying/">try to buy one</a> at the local discount computer bodega.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1999421b-07bc-4184-9d6a-d9067c9022bd/3-touch-design-mobile-interfaces-devices.png" /></p>
<p>Very often, however, what our gut instinct tells us and what “everyone knows” is flat wrong. Android is installed on a huge number of tablets, and there’s a whole other class of devices called Chromebooks. Most industry-tracking sources classify them as computers. But <strong>the majority are in tablet form factors</strong>, with maybe a dockable keyboard.</p>
<p>Chrome OS is also not really a different OS, much less a computer one, but simply a very minor offshoot of Android. When counted as computers, as they commonly are, they make up 10–20% of all PCs sold &amp;mdahs; and this figure is rising rapidly. These are big numbers, and if considered part of the tablet market, since they are touch-first, mostly Android machines, <a href="https://chromeunboxed.com/chromebook-growth-overtakes-macos-q4-2020">Google would own over 70% of that</a>.</p>
Personal Computer
<p>With the Chrome numbers included, “laptops” are no longer any such thing. But even for Windows, many have touchscreens and undock or fold up to turn into tablets or other types of touch-first devices. The picture below shows my corporate-issue Windows PC being re-docked to its magnetic keyboard:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71ee9b44-284c-45ce-9d22-5baf3addef31/4-touch-design-mobile-interfaces-devices.png" /></p>
<p>The classic clamshell laptop or notebook PC is losing ground to the convertible (fold around to turn into a flat device) and detachable form factors. <a href="https://www.idc.com/promo/pcdforecast">Over 40% of laptops sold in 2020</a> were of one of these 2-in-1 designs.</p>
<p>As early as 2013, <a href="https://www.theverge.com/2013/5/21/4350922/one-in-ten-laptops-shipped-last-quarter-had-a-touchscreen-displaybank">10% of laptops had a touchscreen</a>. Today (in 2021), it is hard to find an exact number, but it appears over half of all laptops sold include touchscreens. And their use is also very tablet-like. People carry them and use them in the hand, tapping the screen to interact and only placing them on a flat surface to type when very long forms have to be filled out.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/63aad619-254e-437f-8b96-6d27943fa600/5-touch-design-mobile-interfaces-devices.png" /></p>
<p>Even while sitting at a desk, people will tab their way through a spreadsheet, mouse into the ribbon to do some formula selection, then reach over and tap the screen to dismiss a dialog, or switch to another app.</p>
<p>In addition, a number of desktop all-in-one computers also include touchscreens, and are used much the same way as any convertible PC when on a desk. Touch and computers generally designed around mobile principles are everywhere.</p>
<p>How did this happen?</p>
<p>It’s helpful to have <strong>a clear understanding of what a mobile device is</strong>. We can all define them better for our projects, and be more aware of how far broadly mobile methods have reached into other more traditional computing platforms. Knowing what we mean by touch is equally important, and essential to that is an appreciation of the many methods and history of touchscreens and other pointing devices in computing.</p>
Device Lab
<p>I am very often asked what my favorite phone is. I have always told everyone that, professionally, I have no opinion. I make a point of having a lot of devices and switch between them regularly — not because I am indecisive or must always have the newest and best thing, but so I can stay familiar with the variations between devices and operating systems. I need to understand how real people use digital products and services.</p>
<p>If you design for mobile devices, you really need to create or get access to a device lab, a small collection of functional phones and tablets that <strong>address the range of the most likely devices</strong> your users employ. My choices in a lab should not be your choices.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea999599-ef84-458f-bdd1-4e3ef37842c0/6-touch-design-mobile-interfaces-devices.png" /></p>
<p>In the past, when there were four or five major OSes, I maintained a very large library of devices and switched which one was my personal phone at least twice a year. Right now as I write this, I mostly carry Android, but pick up the iPhone a lot.</p>
<p>If you’re building products for foreign or global use, don’t just go to the phone store and pick up what is popular wherever you live. Find the most common phones for your target market or audience, and try to get one of those. Yes, many foreign market devices are available in other countries, and work well.</p>
<p><strong>Recommended Reading</strong>: “<a href="https://www.uxmatters.com/mt/archives/2017/01/build-a-mobile-device-lab.php"><em>Build A Mobile-Device Lab!</em></a>”</p>
<p>Remember that mobile networks are not the same as Wi-Fi, so carry a spare SIM and switch that out occasionally, especially during tests of whether your app or website operates properly. Likewise, I have both a Mac and a PC on my desk. My current tablet PC is employer-issued, but when I work for clients who don’t provide one, I buy a PC of my own. And I have a Chromebook. Yes, mostly the toddler watches TV on it, but this is one way that I keep a library on a budget and experience firsthand how they really work. I use these devices in my day-to-day life.</p>
<p>Yes, this will cost something, so with any luck you can get your employer to fund it, or maybe find an open device lab, a shared pool that you can use free or for a nominal fee. I have also known designers who share with one another to create ad hoc labs, so ask around the community and see what resources are already available.</p>
<h3>Editor’s Note</h3>
<p>Do you like what you’ve read so far? This is just an excerpt of Steven’s brand-new book, <a href="https://www.smashingmagazine.com/printed-books/touch-design-for-mobile-interfaces/"><em>Touch Design for Mobile Interfaces</em></a>, in which he shares his in-depth research about designing for touch as well as tips, tricks, trends, tendencies, guidelines, and heuristics you can apply to your work immediately to create human-centered mobile interfaces.</p>

<p><strong>Bonus</strong>: We’ve included durable plastic templates to help you plan type and touch sizes! These templates will help you design usable, efficient interfaces with less guesswork. We’ll be tucking both of the templates into the back of every printed book, so <a href="https://www.smashingmagazine.com/printed-books/touch-design-for-mobile-interfaces/">pre-order now</a> to get your hands on Steven’s book as soon as it starts shipping in mid-January 2022. (The templates are included in the eBook as well!)</p>


    <a href="https://deploy-preview-7914--smashing-prod.netlify.app/printed-books/touch-design-for-mobile-interfaces/">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4a2a924-3e2d-4758-a406-d8d36fb0afb0/touch-design-template.png" />
    </a>





";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:62:"Modifying Headers In HTTP(s) Requests In UI Automation Testing";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:82:"https://smashingmagazine.com/2021/12/headers-https-requests-ui-automation-testing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:82:"https://smashingmagazine.com/2021/12/headers-https-requests-ui-automation-testing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 14 Dec 2021 10:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:297:"To be able to modify headers in a testing environment is a great thing to have. It allows control over your application as one can bypass authentication, set cookies, and so on. In this article, Nafees Nehar explores some methods which allow modification of headers in an automation testing setup.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:41:"hello@smashingmagazine.com (Nafees Nehar)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:165:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8590d77e-8181-4d36-9e2e-d4e9c76a893a/headers-https-requests-ui-automation-testing.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:13422:"<p>There are various methods to modify headers. You can modify headers by using browser extensions or proxy apps (such as Charles and Proxyman) that intercept the request and let you modify the response by including the headers.</p>
<p>But first, let’s start at the beginning.</p>
What Are HTTP(s) Headers?
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">HTTP(s) Headers</a> are key-value pairs that can be used by the client or server to pass additional information along with an HTTP(s) request or response. They hold additional information about the data being sent. An HTTP(s) header consists of a case-insensitive name followed by a colon (<code>:</code>), then by its value. Field names are case insensitive but field values are case sensitive. A header can have multiple values which are separated by commas.</p>
Modifying Headers: How Can This Be Helpful?
<p>I was working on an application that opened the provided webpage and then give the user an option to modify elements, add events, add analytics, and so on. without any need to code. This was being done by loading the page in <code>iframe</code> and giving various options to the user on top of it. I tried with loads of websites to see how they behave in <code>iframe</code>. I observed that most of the websites don’t work in <code>iframe</code> due to <code>x-frame-options</code> and <code>content-security-policy</code> headers.</p>
<p>Almost all websites have a header <code>X-frame-options</code> set to <code>deny</code> or <code>sameorigin</code> due to which the browser does not allow to load the webpage in an <code>iframe</code> or doesn’t when any cross-origin request tries to load it in an <code>iframe</code>. Also, the <code>content-security-policy</code> header has <code>frame-ancestors</code> directive which prevents this.</p>
<p>It was very important to load the page in <code>iframe</code>, I was wandering around the internet to find a way to load it. It was evident that I needed to override the <code>X-frame-options</code> header to <code>allowall</code> or remove it altogether. That was when I stumbled upon <code>Requestly</code> extension which gave me the feature to modify the <code>X-frame-options</code> header by matching the page URL and hence allowing me to override the <code>X-frame-options</code> header when debugging.</p>
<p>That was when I first got to witness the power of network headers. They carry data about the data being transferred. The ability to modify the headers of traffic that pass through your browser is a great tool to have. Besides overriding <code>X-frame-options</code>, you can delete headers to minimize online tracking, override <code>content-security-policy</code> header, test sites in production, and so on.</p>
<p>While testing web applications, modifying headers provides a great hack:</p>
<ul>
<li>to test the guest mode of an application;</li>
<li>can set cookies using headers;</li>
<li>to test certain parts of an application that are by default disabled and can be enabled by passing a custom request header;</li>
<li>to test different test cases associated with headers;</li>
<li>to bypass authentication flow in your application by passing the authorization header.</li>
</ul>
<p>When I got to know about the automated testing of web apps, it occurred to me that modifying headers should be a feature there due to its immense applicability in web app testing. Therefore I decided to write this piece to throw some light on the ways to modify headers in automated testing.</p>
Selenium
<p>Selenium is widely used as a test automation framework for end-to-end testing of web applications. It was developed in 2004. Initially, Selenium IDE was being used but it only supported firefox then Selenium RC was developed to enable cross-browser testing. Now the Selenium WebDriver is being used as it provides support for the mobile experience and dynamic websites. It mimics a real user interacting with the webpage.</p>
<h3>Advantages Of Using Selenium WebDriver</h3>
<ul>
<li>Selenium WebDriver is open source;</li>
<li>It offers bindings for every major programming language;</li>
<li>Works across multiple OS. Test written in Windows would easily work on Mac;</li>
<li>Keyboard and cursor simulation are supported;</li>
<li>Add-ons can be installed.</li>
</ul>
<h3>Limitations Of Selenium WebDriver</h3>
<ul>
<li>No support to modify headers;</li>
<li>No support to add request parameters;</li>
<li>Cannot block a request.</li>
</ul>
<p>As discussed, the ability to modify headers helps tremendously in testing applications but the Selenium WebDriver doesn’t support it, and <a href="https://github.com/seleniumhq/selenium-google-code-issue-archive/issues/141#issuecomment-191404986">they don’t plan to include it lately</a>.</p>
<p>This article focuses on various approaches to modify headers in a Selenium automation setup.</p>
Approach 1: Selenium Wire (Python)
<p><a href="https://github.com/wkeeling/selenium-wire">Selenium Wire</a> extends Selenium Python bindings to give you access to the underlying requests made by the browser. You author your code in the same way as you do with Selenium, but you get extra APIs for inspecting requests and responses and making changes to them on the fly.</p>
<p>It allows modifying requests and responses on the go using interceptors. It can also block requests, mock responses, add request parameters in the URL.</p>
<h3>Usage</h3>
<h4>Adding Request Headers</h4>
<pre><code># interceptor function intercepts the network request
# If one arg is provided, requests are intercepted
# and can be modified
def interceptor(request):
    request.headers['New-Header'] = 'Some Value'
# setting the driver's request_interceptor to equal
# the customised interceptor
driver.request_interceptor = interceptor
driver.get(&lt;URL_where_to_modify_the_header&gt;)

# All requests will now contain New-Header</code></pre>

<p>Duplicate header names are permitted in an HTTP request, so before setting the replacement header you must first delete the existing header using <code>del</code> otherwise two headers of the same name will exist.</p>
<h4>Adding Response Headers</h4>
<pre><code># A response interceptor takes two args which
# then allows to tinker with the response
def interceptor(request, response):  
    if request.url == 'https://server.com/some/path':
        response.headers['New-Header'] = 'Some Value'
driver.response_interceptor = interceptor
driver.get(&lt;URL_where_to_modify_the_header)

# Responses from https://server.com/some/path will now contain 
# the New-Header</code></pre>

<p>A response interceptor should accept two arguments, <a href="https://pypi.org/project/selenium-wire/#intercepting-requests-and-responses">one for the originating request and one for the response</a>.</p>
<h3>Limitations</h3>
<ul>
<li>This is only available as a Python module.</li>
<li>It does not support other languages.</li>
</ul>
Approach 2: Loading Browser Extension In Selenium Which Can Modify Headers
<p>There are tools like <a href="https://requestly.io/">Requestly</a> which is a one-stop tool to debug &amp; modify network requests. Requestly allows users to Modify Headers, Redirect URLs, Switch hosts, Mock API response, Delay network requests, Insert custom scripts, etc. It provides ready to go npm package which is a wrapper around the extension enabling the use of extension in Selenium. It supports Chrome, Firefox and Edge.</p>
<h3>Using Requestly In Selenium</h3>
<p>Requestly allows you to do a lot more things other than just modifying headers. All these things can be set up within a web interface and the shared list can be loaded into the application which allows the user’s flexibility to edit the rules easily in a web application.</p>
<p><strong>To Install: <code>npm i @requestly/selenium</code></strong></p>
<h3>Usage</h3>
<p>A Modify Headers Rule can be created at <a href="https://app.requestly.io/rules">app.requestly.io/rules</a> after installing the extension.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d7717e3-3b0e-4104-b8c8-4675e91267a4/1-headers-https-requests-ui-automation-testing.png" /></p>
<p>After creating the URL, click on the <code>Share</code> button to generate a link for the URL.</p>
<p>The URL for the above created <code>sharedList</code> is <a href="https://app.requestly.io/rules/#sharedList/1626984924247-Adding-Headers-Example">here</a>.</p>
<p>This URL is a Requestly rule which adds <code>Access-Control-Allow-Origin</code> header to all requests. </p>
<p>This rule can be used in the Selenium WebDriver using the <code>sharedList</code> URL which is described below:</p>
<div>
<pre><code>require("chromedriver");
const { Builder } = require("selenium-webdriver");
const chrome = require("selenium-webdriver/chrome");
const { getRequestlyExtension, importRequestlySharedList } = require("@requestly/selenium");

const options = new chrome.Options().addExtensions(getRequestlyExtension("chrome"));
const driver = new Builder()
    .forBrowser("chrome")
    .setChromeOptions(options)
    .build();

// Imports Rules in Selenium using Requestly sharedList feature
// importRequestlySharedList(driver, &lt;sharedList_URL&gt;);

importRequestlySharedList(driver, '<a href="https://app.requestly.io/rules/#sharedList/1626984924247-Adding-Headers-Example')">https://app.requestly.io/rules/#sharedList/1626984924247-Adding-Headers-Example')</a>;</code></pre>
</div>

<p>More information can be found <a href="https://www.npmjs.com/package/@requestly/selenium">here</a>.</p>
<h3>Limitations</h3>
<ul>
<li>It offers an npm package limiting the module to JavaScript only.</li>
<li>Shared Lists have to be created manually to use the rules in Selenium, hence the rules cannot be controlled through the code written for the Selenium automation test.</li>
</ul>
Approach 3: Using Puppeteer
<p><a href="https://www.npmjs.com/package/puppeteer">Puppeteer</a> is a Node library developed by Google which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.</p>
<p>When talking about browser automation setup, Selenium automatically comes to the mind but since the advent of Puppeteer it is widely being used for web scraping. It offers more control over chrome than Selenium probably due to google’s support to it. Also due to the same reason, it rules out the need for an external driver to run the browser.</p>
<h3>Usage</h3>
<pre><code>const puppeteer = require('puppeteer');

(async () =&gt; {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto('&lt;https://example.com&gt;');
    await page.screenshot({ path: 'example.png' });
    await browser.close();
})();</code></pre>

<h3>Modifying Headers</h3>
<p>The <code>page.setExtraHTTPHeaders(headers)</code> method can be used to set headers.</p>
<p>It can also modify and remove existing headers. Once requests are intercepted using a combination of <code>page.setRequestInterception(true)</code> and <code>page.on()</code>.</p>
<pre><code>await page.setRequestInterception(true);
page.on('request', request =&gt; {
// Override headers
    const headers = Object.assign({}, request.headers(), {
    foo: 'bar', // set "foo" header
    origin: undefined, // remove "origin" header
});

request.continue({headers});

});</code></pre>

<p><a href="https://github.com/puppeteer/puppeteer/blob/main/docs/api.md"><em>Code source</em></a></p>
<h3>Limitations</h3>
<ul>
<li>Puppeteer is limited to chrome for now. It cannot be used for cross-browser testing.</li>
<li>It has a smaller community compared to Selenium. There seems to be more support for Selenium in the community.</li>
<li>It only supports JavaScript.</li>
</ul>
Conclusion
<p>Modifying network headers happens to be a very powerful tool in a testing environment. There’s a lot more to it than what can be covered in this article. I have tried to cover some of the simplest methods to modify headers in UI Automation Testing.</p>
<p>Every method has some advantages based on the use case and language you use. Here are some of the preferences:</p>
<ul>
<li>If you want to use Selenium in Python, prefer Selenium-Wire as it provided a lot of features on top of Selenium-Webdriver.</li>
<li>If you want to test on only chrome, prefer puppeteer due to its google support and out-of-the-box support for all features including modifying headers.</li>
<li>If you work with Selenium and want to do cross-browser testing, prefer adding extensions to emulate the testing in Selenium-Webdriver. If your use-case requires you to inject scripts or redirect network resources in runtime (in addition to modifying headers), then Requestly is an ideal choice.</li>
</ul>
<p>Hope this article gives you insight on modifying headers in an automated web application testing setup.</p>
<h3>Further Resources</h3>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">MDN Http Headers</a></li>
<li><a href="https://pypi.org/project/selenium-wire/1.0.3">Selenium-Wire</a></li>
<li><a href="https://developers.google.com/web/tools/puppeteer">Puppeteer</a></li>
<li><a href="https://github.com/requestly/requestly-selenium">Requestly-Selenium</a></li>
<li><a href="https://docs.requestly.io/">Requestly</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"Free Christmas Icon Sets And Vector Elements";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:72:"https://smashingmagazine.com/2021/12/free-holiday-icons-vector-elements/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:72:"https://smashingmagazine.com/2021/12/free-holiday-icons-vector-elements/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 09 Dec 2021 13:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:214:"Everybody loves a nice freebie, right? To get you in the mood for the upcoming holidays, we collected some winter- and holiday-themed icon sets and vector elements that you can use in your projects for free. Enjoy!";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Cosima Mielke)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:137:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55b58da3-94e0-4060-b3cd-11540fb52672/hohoho-icons-opt.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:26345:"<p>With the holidays just around the corner, what better way to celebrate than with some free goodies? We sifted through the web (and our archives) to find winter- and Christmas-themed icon sets and vector elements that’ll <strong>give your creative projects some holiday flair</strong>. And, psst, they are perfect if you’re in need for some last-minute Christmas cards, gift tags, or wrapping paper, too.</p>
<p>All icons and design elements in this collection can be downloaded for free, but please remember to <strong>consult their licenses</strong> or contact the creators before using them. A huge thank-you goes out to all designers who share their work with the community, not only at this time of the year! You rock! Have a happy holiday season, everyone!</p>
Jolly 3D Icons
<p>Christmas mail, a decorated house, a red-nosed reindeer, toys — the folks at Iconfinder released a lovely little <a href="https://www.iconfinder.com/iconsets/wonderful-christmas-3d-1">icon set with 12 detailed 3D icons</a> that shine in a beautiful color palette. The icons are available as transparent PNGs in 10 different sizes (from 13×13px to 1024×1024px). Released under a Creative Commons Attribution 3.0 Unported (CC BY 3.0) license, you can use and adapt them as you please, but please remember to give attribution.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fccdf329-285c-4a77-b9ff-f8c8bd3956f9/jolly-3d-icons-2-opt.png" /></p>
A Modern Christmas
<p>A hipster Santa on an electric scooter, a Christmas llama, and a car that masters a risky balancing act to transport a pile of Christmas gifts on its roof — the <a href="https://iconscout.com/illustration-pack/christmas-2333">Christmas Illustration Pack</a> by Iconscout has some surprises built in that’ll make you smile. 14 illustrations are included in the pack, in SVG, PNG, and EPS formats. You can use them for free with attribution.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/724a4e6f-487d-45e7-833e-39a306b88899/iconscout-christmas-opt.png" /></p>
Hand-Drawn Christmas
<p>If you like it cute, this <a href="https://www.freepik.com/blog/hand-drawn-christmas-icons/">hand-drawn freebie</a> by Freepik and Flaticon might be for you. In it, you’ll find 70 adorable Christmas elements like snowmen, tree ornaments, bells, garlands, stars, pinecones, gift boxes, animals, and much more. They come with a nice color palette (which is editable, by the way) as well as in a lined version. Available in PNG and SVG formats, the elements are completely resizable, too. Perfect for some print-at-home coloring pages to keep the kids busy.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9ca81fc-0b0a-476b-b238-b579ad4c60c7/cute-hand-drawn-christmas-opt.png" /></p>
Merry And Bright
<p>A <a href="https://zippypixels.com/product/freebies/20-free-christmas-icons-pack-ai-eps-svg-png-formats-included/">set of 20 vector icons</a> that are bound to bring some holiday joy and happiness to any project comes from the folks at Zippypixels. The icons shine with a fun color palette in combination with a flat style and circle shape and come in AI, EPS, SVG, and PNG formats. You can use them for free in personal projects with attribution.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f729530-e769-4d26-98c7-58d39bd00735/flat-and-round-opt.png" /></p>
Pixel-Perfect Line Icons
<p>If you want to give your e-commerce or product site a little Christmas makeover, the <a href="https://dribbble.com/shots/9070871-FREE-Christmas-New-Year-Pixel-Perfect-Line-icons">Pixel-Perfect Line Icons</a> that Andrey Rubin designed for Kit8 could be for you. They give UI icons a fun Christmas twist — imagine the shopping cart turning into Santa’s sleigh, the notification bell being adorned with a ribbon, and the message bubbles that usually indicate customer support turning into Christmas tree decorations. The icons come in EPS, AI, and JPG formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/26d3b69b-cb53-4f9b-9578-e0aad5882bb6/pixel-perfect-line-icons-opt.png" /></p>
Christmas Stamps
<p>For his <a href="https://dribbble.com/shots/14817231-Free-Christmas-New-Year-Icons">Corona edition Christmas icons</a>, Žarko Cvijović chose a motif that brings people closer together even if they are far away from each other: postage stamps. The 12 stamps show traditional Christmas motifs with a modern twist and come in three different styles (lined, bold lined, colored lined). Available as an AI file.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193e1478-dfc9-45f8-b99b-2be68cd7b4ec/christmas-corona-edition-opt.png" /></p>
Pictogram
<p>Angels, elves, Santa, the Three Wise Men, and, well, normal people caroling or preparing Christmas dinner — the <a href="https://speckyboy.com/free-christmas-pictogram-collection/">Pictogram Christmas Collection</a> by Freepik includes 50 holiday-themed characters. They come in three different styles (colored, lined, and colored lined) and are fully editable in both AI and EPS formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfc3337d-c93d-485a-9451-253908ffc1ba/pictogram-opt.png" /></p>
Animated Christmas Icons
<p>If you want to sprinkle some animation magic to your website, app, or presentation, Iconfinder has got you covered. Created with love by Iconfinder’s partners and partnering animators, there are currently <a href="https://www.iconfinder.com/p/animated-christmas-icons">five animated Christmas- and winter-themed icon sets</a> available for free download. All of them come in GIF, MP4, and JSON (for Lottie) formats, as well as static PNG and SVG. You can use them in personal and commercial projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c724075e-7493-448f-99e0-7284a9bd9549/animated-winter-icons.png" /></p>
Christmas Joy
<p>Roast turkey, gingerbread men, reindeer, and that comfy Christmas sweater that waits in the back of the closet to be dug out. With 110 icons in total, Anastasia Kolisnichenko’s <a href="https://www.smashingmagazine.com/2015/12/freebie-christmas-icons-illustrations/">Christmas icon set</a> has everything a Christmas lover’s heart could ask for. The icons are available in AI, PSD, PNG, and EPS formats and you can customize stroke width, size, color, and shape to your liking. The license allows you to use the illustrations for anything you want, also commercially.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/63c5adbf-2e9d-4c2c-aa2e-7f60ef034405/christmas-joy-opt.png" /></p>
Geeky Christmas
<p>To give the season of reindeer and elves a bit of a geeky glam, Tatiana Lapina designed 54 <a href="https://tympanus.net/codrops/2016/12/08/freebie-geeky-christmas-vector-set-patterns/">geeky Christmas vector graphics</a>. Among them, you’ll discover characters from Star Wars and famous computer games, geeky tech stuff, even a delivery drone to deliver the presents. The illustrations come in SVG, AI, EPS, PDF, and PNG formats and are free to use in personal and commercial projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c08d0f8f-39a8-4e01-91a2-d05b7b82cbab/geeky-christmas-opt.png" /></p>
Christmas Tales
<p>With their storybook-like look, <a href="https://www.smashingmagazine.com/2014/11/freebie-christmas-icon-set-ai-psd-eps-pdf-svg-png/">Manuela Langella’s icon set</a> stirs those familiar warm feelings. In this set, you’ll find 24 icons in total, among them some unique motifs such as Santa stuck in a chimney as well as the obligatory cookies and milk and stockings hung by the fireplace. The icons come in six formats (AI, PSD, EPS, PDF, SVG, and PNG) and can be customized not only in size, color, and shape but, thanks to full layered Illustrator and Photoshop assets, also assembled in any way you like. Free to use for private and commercial projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2748041c-e3f3-4eb6-8d8f-8dc3cc918385/christmas-tales.png" /></p>
Advent
<p>Another one from the creative mind of Manuela Langella, is the <a href="https://www.smashingmagazine.com/2016/12/freebie-christmas-advent-icon-set-25-icons-ai-eps-svg-png-pdf/">Advent icon set</a>. It features 25 icons to celebrate the Advent season: decoration, food, and even Santa’s little helper is there to join the party. The download includes AI, EPS, SVG, PNG, and PDF formats that you can modify to your liking. A Creative Commons Attribution 3.0 Unported license allows you to use the set in private as well as commercial projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9661fd2d-3e83-4f15-93ac-fcabe2defba2/advent-icons-opt.png" /></p>
Sketchbook Christmas
<p>You’re looking for something that is a bit more, well, subtle? Then these <a href="https://www.freepik.com/free-vector/hand-drawn-christmas-icons-set_9952073.htm#page=1&amp;query=christmas%20icons&amp;position=21&amp;from_view=search">hand-drawn icons</a> by createvil could be right down your alley. Their detailed pencil-sketch style is bound to spread some nostalgic winter vibes. Available in EPS format.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc027c20-b784-4207-9469-089b4dad49ee/hand-drawn-christmas-opt.png" /></p>
Ho Ho Ho!
<p>James Oconnell’s <a href="https://dribbble.com/shots/3107164-Ho-Ho-Ho-Icons">Ho Ho Ho icon set</a> features ten Christmasy line art icons with a nifty twist: some lines are dotted while others are highlighted with an accent color. The centerpiece of the set is a squiggly “Ho Ho Ho” framed by snowflakes. The icons are available in AI format and you’re free to use them as you please.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55b58da3-94e0-4060-b3cd-11540fb52672/hohoho-icons-opt.png" /></p>
3D Christmas Decorations
<p>Christmas is the season of giving, and what better way to illustrate that than with, well, hands? Icons8 offers a stunningly realistic set of <a href="https://icons8.com/l/christmas-3d/">3D Christmas graphics</a> of hands giving and receiving gifts and holding Christmas decorations. All graphics come in five different skin tones and two styles and are available in PNG and 3D formats. You can download the icons for free but please remember to link to Icons8 when using them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d03fda83-32e4-4b90-852f-3d6de422358f/3d-hands-opt.png" /></p>
Festive Christmas
<p>Do you prefer a more minimalistic approach? Then George Neocleous’ <a href="https://www.smashingmagazine.com/2011/12/freebie-festive-christmas-icon-pack-20-eps-icons/">festive Christmas icon set</a> is for you. It includes 20 vector icons in EPS format, with both color and grayscale versions available. These are free to use without any restrictions in personal and commercial projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f218a6b2-f205-4e7d-b38b-adc28ef636e5/festive-icons-opt.png" /></p>
Lovely Christmas
<p>Ever dream of spending the holidays in a cabin in the woods? You go out to cut the Christmas tree, spend time sitting by the fireplace, and drink tea as you watch the snow fall. That’s the feeling that Freepik captures with their <a href="https://www.freepik.com/free-vector/lovely-christmas-icons_821344.htm">Lovely Christmas Icon Set</a>. Classic, calm Christmas colors and the choice of motifs bring some wintery flair to your designs. The 20 icons are available in EPS and AI and can be used for free in personal and commercial projects as long as you credit the designer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee0cbeb-c18c-4b4f-b7c6-8fb767680ded/lovely-christmas-opt.png" /></p>
Glyph Color Christmas Icons
<p>It’s rather unusual to see Santa by the chimney side by side with Nativity Scenes in the same icon set. But the <a href="https://www.bypeople.com/glyph-color-christmas-icons-svg-figma-sketch/">Glyph Color Christmas set</a> designed by Maverick Studio at Christmas HQ has it all. It contains 36 holiday icons in SVG, Figma, Sketch, and PNG formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/134f6859-4c5f-4e35-aaa4-2d673a8974db/glyph-color-christmas-opt.png" /></p>
Tidee Christmas Icons
<p>A minimalist but clever take on traditional Christmas motifs comes from the Icojam design duo Stan and Andy. Their set of <a href="https://www.icojam.com/25-free-tidee-xmas-icons/">25 Tidee XMAS icons</a> complements the more than 1,300 icons strong <a href="https://www.icojam.com/tidee-icons/">Tidee icon set</a> and is available in AI, EPS, SVG, and PNG formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6816838c-a95e-4f65-9524-e7be4de846c9/tidee-opt.png" /></p>
Holiday Spirit
<p>RocketTheme’s <a href="https://www.smashingmagazine.com/2012/12/christmas-icon-set/">Christmas icon set</a> shines with its love for detail: the little cracks in the gingerbread man, the bubbles on the milk, the chiffon bow wrapped around the present. There are ten icons in the set in total, all of which come as 256×256 PNGs. A Creative Commons Attribution-NoDerivs 3.0 Unported License allows you to use them in both commercial and private projects, but please be sure to credit the designer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/833852a3-20b6-42a8-bd17-9f33556c90df/holiday-spirit-icon-set.png" /></p>
Vintage Christmas Elements
<p>If you have a sweet spot for the mid-century style, this <a href="https://www.freepik.com/free-vector/vintage-christmas-element-collection_5881759.htm?query=christmas%20icons">Vintage Christmas Element Collection</a> might be for you. The vector is available in AI and EPS formats and features beautifully wrapped gifts, Christmas decorations, and, of course, a tree. You can use it for free in personal and commercial projects, but please attribute the designer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3e85f1b-16b4-4bdb-93f7-adf73cd27861/vintage-christmas-elements-opt.png" /></p>
Bold And Colorful
<p>This <a href="https://dribbble.com/shots/2394012-New-Year-Icons-Set">fun and cartoonish icon set</a> comes from Andrey Stelya. The fresh colors and the unusual way of applying them by shifting the underlying color layer outside the line art, gives the icons a modern feel. The set includes twelve icons and comes in SVG and PNG (90×90) formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/98373110-a631-41a1-8d90-74dc8d140fbf/new-year-icons-opt.png" /></p>
Sweater Weather
<p>A set of <a href="https://www.freepik.com/free-vector/hand-drawn-flat-christmas-elements-collection_19539162.htm#page=1&amp;query=christmas%20icons&amp;position=24&amp;from_view=search">elements that celebrate the perks of cold winter days</a> comes from the folks at Freepik. Think a woolen sweater and hat, a nice cup of tea, a gingerbread man, and some holiday decorations. The set is available as .EPS and free for personal and commercial projects as long as you give attribution. And if you’re looking for more motifs in the same style, also be sure to check out <a href="https://www.freepik.com/free-vector/hand-drawn-flat-christmas-elements-collection_19539175.htm#page=1&amp;query=christmas%20icons&amp;position=24&amp;from_view=search">this collection</a> with a teapot, iceskates, and more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e407050-ae07-4b4f-bf99-afbb7eec9ea9/sweater-weather-opt.png" /></p>
Sophisticated Line Art
<p>Now this is a versatile set! Olha Filipenko created <a href="https://www.behance.net/gallery/31536231/Free-Christmas-icon-set">78 icons in AI format</a> with everything winter and holiday-themed: sweets, snowflakes, candles, ornaments, even a cute little postage stamp. There are so many ways to use the minimalistic line art with a unique and sophisticated twist.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fffd334e-0de5-44b7-a64d-1b2593003ac4/line-art-opt.png" /></p>
Holly Jolly Badges
<p>“Merry Little Christmas”, “Let It Snow”, “Ho Ho Ho”, and “Holly Jolly” — these <a href="https://www.freepik.com/free-vector/watercolor-christmas-badges-collection_19963263.htm?query=christmas%20icons">badges</a> combine bold typography with a lovely hand-painted look. The badges come in EPS format and can even be used commercially as long as you give attribution. How about printing them out to decorate your Christmas mail?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba822926-618f-48d9-87b1-df73409096a9/holly-jolly-opt.png" /></p>
Pixel Art
<p>Pixel time! Anna Sereda’s <a href="https://dribbble.com/shots/2404453-FREE-Pixel-Christmas-Vector-Icons">icon set</a> looks as if it came straight out of a Christmas arcade game. There are 16 little pixel artworks in the bundle for you to use in personal and commercial projects. Available in AI, EPS, PSD, SVG, PNG, and JPEG formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71096b41-c2d8-445b-9da1-c00694b3f5c7/pixel-christmas-opt.png" /></p>
Christmas Magic
<p>This fine <a href="https://dribbble.com/shots/1848615-Christmas-Icon-set">small set</a> comes from Dasha Ermolova. It includes four motifs – a snow globe, a stocking, a Christmas wreath, and a ball ornament. The EPS is free to download. Minimalistic line art with nice little details.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6c013114-9a2d-4c46-939c-f023e27a2634/christmas-magic-opt.png" /></p>
Watercolor Leaves And Branches
<p>Even though nature is sparse in winter in many parts of the world, there are little treasures you can find on your walk through the forest: pine cones, fir needles, acorns, for example. To celebrate their beauty, Freepik released an icon set with <a href="https://www.freepik.com/free-vector/watercolor-christmas-leafs-and-branches_819481.htm">watercolor leaves and branches</a>. They are available in AI and EPS formats and can be used for personal and commercial projects. Attribution is required.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3cfe70f-da20-4b7c-96f1-58824c652ce0/watercolor-leaves-opt.png" /></p>
Gingerbread Times
<p>What would Christmas be without cookies? Anna Zhemchuzhina created a lovely little set of <a href="https://www.behance.net/gallery/31988847/Gingerbread-cookies-illustrations-%28-freebies%29">six gingerbread-inspired icons</a> that look as if they came freshly baked out of the oven. Available as PSD.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f5a6317e-fdb2-4403-a167-ff0cd2b6a5ec/gingerbread-times-opt.png" /></p>
Nostalgic Holidays
<p>Designed by the folks at Freepik, this <a href="https://www.freepik.com/free-vector/round-christmas-icons_757555.htm">cheerful set</a> consists of 16 AI and EPS icons with a unique nostalgic ’50s charm. You can use them for free in both personal and commercial projects, but please remember to credit the designer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/31703d7d-af7e-44ee-8f4d-b42a2a2d4821/nostalgic-holidays-opt.png" /></p>
Snow Flurries
<p>Christmas and snow go together like bread and butter. To add a bit of those snow flurries to your projects, Teela Cunningham has hand-drawn a <a href="https://every-tuesday.com/8-free-hand-drawn-vector-snowflakes/">set of snowflakes</a> and turned them into vector graphics. The download includes AI and EPS files. For private use only.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fce6ed7c-2af2-44b1-a3ae-a4870a186d23/snow-flurries-opt.png" /></p>
Classics Revisited
<p>Another set that pairs minimalistic line art with some lovely details comes from Žarko Cvijović. These <a href="https://dribbble.com/shots/2357450-Christmas-Icons-2015">twelve icons</a> cover classical Christmas motifs (a present, a snowman, reindeer, a candle, a sleigh, and more) and are available in EPS format.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88eb934c-c94d-4e15-bf2b-dfc8ecbbb297/classics-revisited-opt.png" /></p>
Santa
<p>A hint of gold and a face hidden behind a fluffy white beard, the <a href="https://www.freepik.com/free-vector/set-christmas-illustrations-vector_3384380.htm">Santa illustrations</a> by rawpixel.com will add a magical touch to any project. The vector is available in EPS format and can be used for personal and commercial purposes with attribution.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7a6b06a-2a6e-4a61-935c-2f117b0adeb1/santa-opt.png" /></p>
Winter Beauties
<p>Holly, pine cones, and fir branches, the folks at rawpixel.com dedicated a <a href="https://www.freepik.com/free-vector/set-christmas-design-elements-vector_3384214.htm">set of design elements</a> to these natural winter beauties. They are available in EPS format.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e5ff7134-eb15-4328-9f2e-54749df3c3bf/twigs-opt.png" /></p>
Decorations
<p>Playful and bold are probably the words that best describe this <a href="https://www.freepik.com/free-vector/flat-christmas-elements-collection_19850854.htm#page=1&amp;query=christmas%20icons&amp;position=41&amp;from_view=search">bundle of Christmas illustrations</a>. Available in EPS format, you can use them for private and commercial purposes. Attribution is required.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e26e59c-7894-46bf-b02c-b95e6a83e5f1/decorations-opt.png" /></p>
Watercolor Winter
<p>If you’re looking for design elements with a handmade touch, this <a href="https://www.freepik.com/free-vector/watercolor-christmas-element-collection_11331392.htm?query=christmas%20icons">set of watercolor vector elements</a> has got you covered. It comes as an .EPS file and makes a perfect fit for some last-minute gift tags.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb6ed772-9df4-4491-b57f-800fc8929533/watercolor-winter-opt.png" /></p>
A Storybook Christmas
<p>With its simple but friendly style, the chubby Santa in Pikisuperstar’s <a href="https://www.freepik.com/free-vector/flat-christmas-element-collection_5765182.htm">set of vector elements</a> wakes memories of storybook illustrations. You can download and use them for free in both personal and commercial projects. Attribution is required.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cdb111fa-9b95-4ac7-95d9-37130f97e44c/storybook-christmas-icons-opt.png" /></p>
Flower Wreaths
<p>Another perfect fit for some last-minute print-at-home gift tags are these <a href="https://www.freepik.com/free-vector/watercolor-christmas-flower-wreath-collection_10624836.htm">flower wreaths</a> with their light color palette and hand-drawn style. You can also use them commercially if you want, but please remember to give credit.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9252ecd7-adcf-4d47-bcce-e43e9eeb4046/flower-wreaths-opt.png" /></p>
Silent Night
<p>A muted color palette of red, green, and gold makes this <a href="https://www.freepik.com/free-vector/hand-drawn-christmas-element-collection_11376059.htm#page=1&amp;query=christmas%20icons&amp;position=12&amp;from_view=search">lovely set of vector elements</a> shine with a calm and friendly look. The elements can be downloaded in EPS format and used in both personal and commercial projects as long as you give attribution.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0f1b9264-43a5-4551-af31-045f0381b109/silent-night-opt.png" /></p>
Black And Gold
<p>This <a href="https://www.freepik.com/free-vector/christmas-background_3301737.htm#page=1&amp;position=1&amp;from_view=detail#query=christmas%20icons&amp;position=1&amp;from_view=detail#position=1">black and gold vector background</a> by the folks at Freepik shines with shimmering accents that give the hand-drawn designs a magical touch. The vector is available in AI and EPS formats and can be used in private and commercial projects with attribution.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d2b6f8f-6623-46b7-8460-591380e15fd9/black-and-gold-opt.png" /></p>
Neon Christmas
<p>Who said neon colors and Christmas don’t go together? Actually, they do quite well. Shining bright, these <a href="https://www.freepik.com/free-vector/neon-christmas-element-collection_11238146.htm">neon design elements</a> are available in AI and EPS formats. You can use them for free in personal and commercial projects as long as you give credit to the designer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0b21b69b-feec-41b6-92de-e825fdff602b/neon-christmas-opt.png" /></p>
Did We Miss Anything?
<p>Have you designed a free winter- or holiday-inspired icon set yourself? Or maybe you came across one that is just <strong>too good not to be shared</strong>? We’d love to hear about it in the comments below!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:59:"Designing Better Links For Websites And Emails: A Guideline";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:86:"https://smashingmagazine.com/2021/12/designing-better-links-websites-emails-guideline/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:86:"https://smashingmagazine.com/2021/12/designing-better-links-websites-emails-guideline/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 06 Dec 2021 17:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:292:"There are so many websites out there that have not considered the overall usability of their visually impaired users. When it comes to designing better links and sending better emails, Slava Shestopalov has a few tips on how to improve your website’s experience while accessibility in mind.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:46:"hello@smashingmagazine.com (Slava Shestopalov)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:169:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b157db62-e93c-4607-9c84-698fad4da3b3/designing-better-links-websites-emails-guideline.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:17453:"<p>Why are “click here” and “by this link” poor choices? And is it acceptable to use “read more”? All these phrases have become so common that many people don’t see any problems with them.</p>
<p>How many times have you encountered or composed the following on websites, in emails, or intranets?</p>
<blockquote><ul><li><em>Fill in this form by the end of the day.</em></li>
<li><em>Check the equipment policy by the link.</em></li>
<li><em>You can find more information here, here, and here.</em></li></ul></blockquote>

<p>In this article, I’ll explain popular wording and formatting mistakes and will show more accessible and informative alternatives. Let’s go!</p>
<ul>
<li><a href="#meaningful-links">Meaningful Links</a></li>
<li><a href="#exposing-urls">Exposing URLs</a></li>
<li><a href="#download-links">Download Links</a></li>
<li><a href="#links-vs-buttons">Links vs. Buttons</a></li>
<li><a href="#link-rich-texts">Link-Rich Texts</a></li>
<li><a href="#link-accessibility">Link Accessibility</a> <ul>
<li><a href="#distinction">Distinction</a></li>
<li><a href="#color-contrast">Color Contrast</a></li>
<li><a href="#focus-state">Focus State</a></li>
<li><a href="#optimization-for-screen-readers">Optimization For Screen Readers</a></li>
<li><a href="#duplicated-links">Duplicated Links</a></li>
</ul>
</li>
</ul>
Meaningful Links
<p>So what exactly is a hyperlink? It’s a combination of a web address (URL) and a clickable element (oftentimes a word or phrase, sometimes an image). While this is a vast topic, we’ll focus on text links, namely their usability and accessibility.</p>
<p>Thoughtfully composed links express respect to readers, whereas <strong>jumbled-up ones cause confusion and suspicion</strong>. When a link is presented as “here” or “this,” it’s harder to aim it with a cursor or finger. Also, it lacks transparency. What is hidden behind it: a page or file, an article or web form? One should re-read the whole sentence or paragraph to guess.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fd05c109-c7cc-4ca7-97b3-869ac54767c6/9-designing-better-links-websites-emails.png" /></p>
<p>On the contrary, URLs attached to concise self-explanatory phrases inform people about the destination and are more convenient targets for clicking or tapping. Moreover, <strong>a well-composed link makes sense out of context</strong> and typically combines a topic (e.g. security, brand, marketing) and format (questionnaire, request form, guideline, policy, and so on).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8bb4cc2f-e0ca-43ce-b151-08ed1b240af3/4-designing-better-links-websites-emails.png" /></p>
Exposing URLs
<p>If a web address is short and doesn’t look like <code>M$c0P88%X4LHr&amp;dxQ1A</code>, then exposing it right away will work quite well, too, especially if the audience is supposed to copy it and paste it somewhere else.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53cc4336-df49-4515-a615-47678a87133e/16-designing-better-links-websites-emails.png" /></p>
<p>And if you’ve got a long indecipherable chain of symbols, exposing it isn’t a great idea in most situations. In this case, consider embedding a URL into a succinct phrase or shortening the address in tools like <a href="https://bitly.com/">Bitly</a> or <a href="https://cutt.ly/">Cuttly</a>.</p>
<p>However, <strong>these tools aren’t silver bullets</strong>: you do get a shorter link, but its meaningful parts will be replaced with random symbols, which are suspicious and not informative. Customizing shortened URLs is possible, but it’s typically a paid feature.</p>
<p>Compare the following examples:</p>
<ul>
<li><code>bit.ly/30SjUa4y</code> (suspicious and unreadable);</li>
<li><code>bit.ly/smashing-books</code> (readable topic);</li>
<li><code>smash.ing/30SjUa4y</code> (recognizable domain);</li>
<li><code>smash.ing/books</code> (fully transparent).</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/545de747-e6d5-42a8-a497-ca13bf7ce02c/17-designing-better-links-websites-emails.png" /></p>
Download Links
<p>A link that guides to some downloadable resource needs a slightly different treatment. Besides embedding it into a meaningful phrase, you should also <strong>inform users</strong> about the file format and size:</p>
<ul>
<li>The format gives clues to what you can do with this data (e.g. if the information is read-only or editable);</li>
<li>The file size is crucial for people with costly internet, slow connection, or limited local storage.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d172511-2554-46d3-9342-9669b42bb155/5-designing-better-links-websites-emails.png" /></p>
<p>When you share a bunch of files (let’s say in different formats or versions), it’s not enough to design each link correctly. The whole series should be well-scannable and easy to use.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b92e8c41-e887-4790-ab73-cf5b50e55f61/3-designing-better-links-websites-emails.png" /></p>
Links vs. Buttons
<p>Not all links on a page or in an email are equally important. Authors often want their audience to click on the primary link, whereas other links can be skipped. If you’re going to draw people’s attention to the main action, think of presenting it as a button:</p>
<ul>
<li>“Subscribe to the newsletter”</li>
<li>“Buy tickets”</li>
<li>“Get the white paper”</li>
<li>“Download the recording”</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f3a241ea-5007-4f28-a444-d08a94fa1fc1/15-designing-better-links-websites-emails.png" /></p>
<p>If you cannot create a button because of technical or time constraints, go for a quick-and-dirty solution: put that link in a separate line, make it bold, add spacing above and below, and so on.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/92f577ec-ccb9-4767-911b-02b4fe70e89b/6-designing-better-links-websites-emails.png" /></p>
<p>Of course, button text should follow corresponding patterns so that you don’t cross the line between motivating readers and manipulating them:</p>
<ul>
<li><strong>Be concise</strong> (up to 4–5 words);</li>
<li>Ideally, <strong>start with a verb</strong> (e.g. “get”, “buy”, “download”, “apply for”, and so on);</li>
<li><strong>Call the action honestly</strong> (i.e. avoid hushing up unpleasant steps like watching ads, registration or submitting personal data).</li>
</ul>
<p>Compare <em>“Download the report,”</em> which assumes that downloading starts immediately after clicking, and <em>“Get the report,”</em> when a user downloads the file in exchange for their name and contact details.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6655e70f-5e34-4ebc-99f7-603c1014d381/14-designing-better-links-websites-emails.png" /></p>
Link-Rich Texts
<p>Links enable the functioning of the Internet, however, vigorously pumping URLs into each sentence isn’t a good practice (of course, unless you contribute to a Wikipedia-like knowledge base that is cross-connected by nature).</p>
<p>Step zero is to make sure you really—<em>really</em>—need all the links. If you can edit something out, there won’t be a problem to solve. Otherwise, try to <strong>group the links</strong>: as a bulleted list, on the side of related paragraphs, or under a suitable title (e.g. “Recommended materials” or “Resources”).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa6f8d74-74d0-4880-b32d-a68797f9725b/18-designing-better-links-websites-emails.png" /></p>
<p>Grouping the links helps a lot, but if the goal is to trigger action, the primary link should stand out. So, why not make it a button, then?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/437aca96-5861-4bf4-b4db-42d64da6f4d0/11-designing-better-links-websites-emails.png" /></p>
<p>In the previous sections, we figured out how <strong>descriptive links increase usability and accessibility</strong>. At the same time, such links are longer, and consequently, can appear divided in a paragraph, when the first part of a link remains at the end of the previous line, and the second part jumps to the next line. It seems trivial compared to bigger flaws, but distorted links are a bit annoying in link-crowded texts.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d83fc39f-6eb7-48c3-b6ce-4dc0f5e2b289/13-designing-better-links-websites-emails.png" /></p>
<p>If a paragraph width is fixed, compose text the way all links fit into lines, for example, try to start a paragraph with a link. However, <strong>browsers and devices render content differently</strong>, and links will still shift for some users. That’s why lists are a safer option for a set of links.</p>
Link Accessibility
<p>Accessible links are not only the ones that look tidy and clear; they should also be properly working. <a href="https://www.w3.org/TR/WCAG21/">Web Content Accessibility Guidelines</a> (WCAG), the world’s most famous digital accessibility standard, includes recommendations about hyperlinks, including some non-visual features.</p>
<h3>Distinction</h3>
<p>One of the WCAG requirements is <a href="https://www.w3.org/TR/WCAG20-TECHS/F73.html">not to rely on color only</a> when you want to distinguish a button or link from the rest of the text. Painting links in blue or another color doesn’t suffice since it still might not be visible for people with <a href="https://www.smashingmagazine.com/2017/10/nailing-accessibility-design/">color blindness</a>. The most typical method is underlining links; they can also appear in bold font.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95d09d8b-3630-45c0-a57c-23dcfb0280f2/12-designing-better-links-websites-emails.png" /></p>
<h3>Color Contrast</h3>
<p>Links are essential interactive elements and have to comply with contrast recommendations. WCAG has two levels of contrast compliance:</p>
<ol>
<li><strong>AA</strong>: medium, used by many websites for a mass audience;</li>
<li><strong>AAA</strong>: high, primarily applied on governmental sites and by communities of people with disabilities.</li>
</ol>
<p>For example, the AA level requires maintaining a contrast between a link and background of at least <code>4.5:1</code> for normal font size and <code>3:1</code> for large text.</p>
<p><strong>Note</strong>: <em>You can always check your colors with the help of the online <a href="https://webaim.org/resources/contrastchecker/">Contrast Checker</a> or Figma’s <a href="https://www.figma.com/community/plugin/733159460536249875">Contrast plugin</a>.</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d06a68e0-8150-45dd-bf6b-7a3221f1c45a/1-designing-better-links-websites-emails.png" /></p>
<h3>Focus State</h3>
<p>Like all interactive components, links should have a <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html">visible keyboard focus</a>. All popular browsers have an embedded accessible focus by default (you might have seen this bold blue frame around input fields, dropdowns, buttons, and links in Google Chrome). Unfortunately, on some sites, focus gets manually removed or visually customized so that <strong>a focused link can look even less noticeable</strong> (e.g. faded out).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7399a3ea-5a0d-4219-9c3b-f9f831418f75/10-designing-better-links-websites-emails.png" /></p>
<h3>Optimization For Screen Readers</h3>
<p>Blind users don’t see the web — they listen to it by means of “screen readers,” assistive programs that transform a written text into fast robotic speech. They navigate with a keyboard and remember dozens of handy shortcuts to jump between headings, buttons, or links instead of obediently listening to the entire content on a page.</p>
<p>So, when you remove wordiness for sighted people (for example, in the lists of different language versions or formats), it’s important to <strong>keep links clear for screen reader users</strong>, too. Otherwise, blind visitors will hear the following:</p>
<blockquote>“Ukrainian — link, English — link, German — link”</blockquote>

<p>The self-explanatory should be heard instead:</p>
<blockquote>“Download project plan template in Ukrainian — link, download project plan template in English — link…”</blockquote>

<p>And probably the most annoying thing on a news website is to hear this:</p>
<blockquote>“Read more — link, read more — link, read more — link”</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2496e8f3-4199-4796-b932-a028cb3b8d59/2-designing-better-links-websites-emails.png" /></p>
<p>Sighted people can guess that “Read more…” relates to the nearest title, and blind people need individualized <em>read-mores</em>. Fortunately, the HTML attribute <code>aria-label</code> comes in handy here; it enables attaching explanatory text for screen reader users.</p>
<p>It’s often a designer’s responsibility to compose accessibility-related text and collaborate with a developer around optimal implementation, so here is a simplified code example:</p>
<div>
<pre><code>&lt;h4&gt;News&lt;/h4&gt;
&lt;p&gt;Eleks Design Team will participate in the Space Hackathon.
&lt;a href="aerospace-hackathon.html" aria-label="Read more about Eleks participation in the Space Hackathon"&gt;Read more...&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Projector Tech and Creative Institute launches five courses on web accessibility this year.
&lt;a href="new-courses.html" aria-label="Read more about new courses on accessibility by Projector Institute"&gt;Read more...&lt;/a&gt;
&lt;/p&gt;</code></pre>
</div>

<p>As you can see, each “Read more” has an extended explanation for screen readers. However, you won’t need to take care of article links with <code>aria-label</code> if each title is a link itself.</p>
<div>
<pre><code>&lt;h4&gt;News&lt;/h4&gt;
&lt;h5&gt;&lt;a href="aerospace-hackathon.html"&gt;Eleks Design Team will participate in the Space Hackathon&lt;/a&gt;
&lt;/h5&gt;
&lt;h5&gt;&lt;a href="new-courses.html"&gt;Projector Tech and Creative Institute launches five courses on web accessibility this year&lt;/a&gt;
&lt;/h5&gt;</code></pre>
</div>



<h3>Duplicated links</h3>
<p>Multiple identical links are yet another widespread controversial practice. For example, on a web page, it means that the same web address is attached to an article title, hero image, and intro sentence. At first glance, nothing’s wrong: wherever you click — you get to the article. But for blind users, it means <strong>repeating the same information thrice</strong>, which extends the time they need to sift through content to what they are interested in.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f37044e-dddb-472f-aae3-40489ab512b9/7-designing-better-links-websites-emails.png" /></p>
<p><strong>An important note:</strong> We are now talking about identical destinations, but a card can include different ones, for instance, a link to the article, author’s profile, and tags. In this case, minor links can appear “wrapped” in the main one.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/512f0cbd-b917-42df-a740-2ef395d45ce4/19-designing-better-links-websites-emails.png" /></p>
<p>Now, emails. Let’s say we have an invitation to some online event, where a Zoom link repeats several times. In the event description, “what/when/where” section, and closing part. Not only will it create an impression of mess for sighted users, but also <strong>visually impaired users</strong> will be troubled with jumping between duplicated links.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97558efb-6c91-49bd-ba10-881b0f2a99e7/8-designing-better-links-websites-emails.png" /></p>
<h3>Recommended Reading</h3>
<p>In this article, I wanted to suggest options instead of showing the topic in black and white. There are multiple shades of good design, and you can find yours on the overlap of best practices and your particular case. Meanwhile, some additional reading on this topic:</p>
<ul>
<li>“<a href="https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA8.html">Using <code>aria-label</code> For Link Purpose</a>,” Web Content Accessibility Guidelines (WCAG)</li>
<li>“<a href="https://www.visionaustralia.org/services/digital-access/blog/how-to-make-read-more-links-accessible">How To Make ‘Read More’ Links Accessible</a>,” Vision Australia</li>
<li>“<a href="https://www.nngroup.com/articles/writing-links/">Writing Hyperlinks: Salient, Descriptive, Start With Keyword</a>,” Marieke McCloskey, Nielsen Norman Group</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:73:"Advent Calendars For Web Designers And Developers (December 2021 Edition)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:93:"https://smashingmagazine.com/2021/12/tech-advent-calendars-web-developers-web-designers-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:93:"https://smashingmagazine.com/2021/12/tech-advent-calendars-web-developers-web-designers-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 02 Dec 2021 14:00:43 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:663:"Are you ready for the countdown to Christmas? From [festive](https://www.smashingmagazine.com/2016/12/freebie-christmas-advent-icon-set-25-icons-ai-eps-svg-png-pdf/) [icon](https://www.smashingmagazine.com/2015/12/freebie-christmas-icons-illustrations/) [sets](https://www.smashingmagazine.com/2014/11/freebie-christmas-icon-set-ai-psd-eps-pdf-svg-png/) to advent calendars that are bound to sweeten your days with a delightful little surprise each morning, we’ve decided to join in on this lovely annual tradition and bring it all to one place. So prepare yourself a nice cup of coffee and get cozy &mdash; there’s always something new to learn and discover!";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:45:"hello@smashingmagazine.com (Iris Lješnjanin)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:140:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6e09cbdf-49c2-4250-a290-4c0fce6fe0a8/advent-roundup-2021.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:30519:"<p>Once again, the web community has been busy with creating some fantastic advent calendars this year. As you’ll see, each and every one of these calendars are sure to cater for a <strong>daily dose of web design and development goodness</strong> with stellar articles, inspiring experiments, and even puzzles to solve.</p>
<p>It doesn’t really matter if you’re a front-end dev, UX designer or content strategist, we’re certain you’ll find at least something to <strong>inspire you for the upcoming year</strong>. Use this month of December as a time to slow down, and your time to reflect and plan ahead — you won’t regret it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6e09cbdf-49c2-4250-a290-4c0fce6fe0a8/advent-roundup-2021.png" /></p>
Advent of JavaScript

<p><a href="https://www.adventofjs.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/712e45ae-0255-4580-b7c8-787cb5be07e0/advent-of-js.png" /></a>If you sign up to the <a href="https://www.adventofjs.com/">Advent of JavaScript</a>, you’ll be getting an email every day that outlined a JavaScript challenge. Each of the given challenges include all of the HTML and CSS you need to get started, allowing you to focus on the JavaScript. You’ll also receive a brief on how to get started, ways to push yourself, and steps to help you get started. You can get the challenges for free (or pay for the solutions).<br />
  </p><ul>
    <li><a href="https://twitter.com/jamesqquick">James Q. Quick on Twitter</a></li>
  </ul>
<p></p>

Advent of CSS

<p><a href="https://www.adventofcss.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72764d05-689b-4566-a230-5e86b7936298/advent-of-css.png" /></a>For folks who’re more into CSS, there’s the <a href="https://www.adventofcss.com/">Advent of CSS</a> where you can sign up for a daily email outlining a CSS challenge that includes all the assets you need to get started — including a Figma design file. (If you don’t have a Figma account, don’t worry, it’s free.) Before accepting this challenge, you really should know basic HTML and CSS.<br />
  </p><ul>
    <li><a href="https://twitter.com/selfteachme">Amy Dutton on Twitter</a></li>
  </ul>
<p></p>

JVM Programming Advent Calendar
<p><a href="https://www.javaadvent.com/calendar"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfca6838-6686-4272-854f-4968b0b86633/javaadvent-icon.png" /></a>The <a href="https://www.javaadvent.com/calendar">Java Advent 2021</a> is here! To make the advent season even sweeter for JVM enthusiasts, there will be a new article about JVM-related topic everyday. The project started in 2012 with the idea of providing technical content during the Christmas Advent period, so keep looking for nice things under the Java Christmas tree! 🎄<br />
  </p><ul>
    <li><a href="https://feeds.feedburner.com/JavaAdventCalendar">RSS Feed</a></li>
    <li><a href="https://twitter.com/JavaAdvent">@JavaAdvent on Twitter</a></li>
  </ul>
<p></p>

Advent of Code

<p><a href="https://adventofcode.com"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab140db-32a7-4dc6-8a2c-0d98c7280b1f/adventofcode-2021.png" /></a>If you prefer a puzzle over an article, take a look at <a href="https://adventofcode.com">Advent of Code</a>. Created by Eric Wastl, this is an advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. You don’t need a computer science background to participate — just a little programming knowledge and some problem solving skills will get you pretty far. Go ahead and give it a go!<br />
  </p><ul>
    <li><a href="https://twitter.com/hashtag/AdventOfCode?src=hashtag_click&amp;f=live">#AdventOfCode on Twitter</a></li>
    <li><a href="https://twitter.com/ericwastl">@ericwastl on Twitter</a></li>
  </ul>
<p></p>

Perl 6/Raku Advent Calendar
<p><a href="https://raku-advent.blog/category/2021/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5fbb81ea-9998-4f3a-940f-2535158e11fb/a-language-a-day-advent-calendar-examples.png" /></a>Back in October of 2019, “Perl 6” was renamed to “Raku”. It’s the 6th year since (what was then called) Perl 6 was released, and the 13th year in a row for this <a href="https://raku-advent.blog/category/2021/">Raku Advent calendar</a>. Stay tuned for lots of articles on metaprogramming, applications, useful Raku modules, programming techniques, guides on how to work with Raku inside containers, and even how to migrate from good ol’ Perl.<br />
</p><ul>
  <li><a href="https://raku-advent.blog/category/2020/rss">RSS Feed</a></li>
</ul>
<p></p>

24 Pull Requests
<p><a href="https://24pullrequests.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6efe9200-4cc4-483b-b03c-3d477da2137a/24pullrequests.png
" /></a><a href="https://24pullrequests.com/">24 Pull Requests</a> is a yearly initiative to encourage contributors around the world to send 24 pull requests between December 1st and December 24th. The project is available in twenty languages, and encourages all kinds of contributions to open-source projects — including non-pull-request contributions. There’s <a href="https://24pullrequests.com/contributions/new">a new contribution form</a> on the site that allows you to record the contributions you’ve made each day that wouldn’t usually make sense as a pull request. Join in!<br />
  </p><ul>
    <li><a href="https://github.com/24pullrequests/24pullrequests">“24 Pull Requests” on GitHub</a></li>
    <li><a href="https://24pullrequests.com/">@24PullRequests on Twitter</a></li>
  </ul>
<p></p>

HTMHell Advent Calendar
<p><a href="https://www.htmhell.dev/adventcalendar/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/942da5ec-135f-4a40-8628-75e735f1a8b8/htmhell-advent-cal.png" /></a>If you’re already familiar with the HTMHell website, then you can guess how interesting its advent calendar is going to get! Take a peek behind each door of the <a href="https://www.htmhell.dev/adventcalendar/">HTMHell calendar</a> where you’ll find an article, talk or tool that focuses on HTML. To be fair, HTMHell isn’t just about bad practices — Manuel also shares good practices and <a href="https://www.htmhell.dev/tips/">useful HTML tips and tricks</a>. 🔥<br />
  </p><ul>
    <li><a href="https://twitter.com/htm_hell">@htm_hell on Twitter</a></li>
    <li><a href="https://twitter.com/mmatuzo">Manuel Matuzović on Twitter</a></li>
    <li><a href="https://www.htmhell.dev/feed_tips.xml">“HTML Tips &amp; Tricks” RSS Feed</a></li>
  </ul>
<p></p>



PerfPlanet Calendar
<p><a href="https://calendar.perfplanet.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8bbcb96-0df2-49c9-9d47-4bdda65e72fb/perfplanet-2021.png" /></a>An advent calendar that has been publishing since 2009 is back again. Good ol’ <a href="https://calendar.perfplanet.com/">PerfPlanet</a> is back for another season with all things speed and web performance. Anyone is welcome to <a href="https://calendar.perfplanet.com/contribute/">contribute to the calendar</a>, so do feel free to reach out with a topic or tool you’re passionate about, or a technique you’d like to teach and tell the web performance community about.<br />
  </p><ul>
    <li><a href="https://twitter.com/stoyanstefanov">Stoyan Stefanov on Twitter</a></li>
    <li><a href="https://www.phpied.com/perfplanet-calendars-oldies-but-goodies/">Perfplanet calendar’s oldies but goodies</a></li>
  </ul>
<p></p>

C# Advent Calendar
<p><a href="https://csadvent.christmas/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9341d10c-fd9f-4e47-a620-df8b81366126/csharpred.png" /></a>It’s time for the fifth annual <a href="https://csadvent.christmas/">C# advent calendar</a> that will feature two pieces of content every day. Anyone can contribute by sharing their blog posts, videos, articles or podcast episodes dedicated to C# development. In case all of the spots are already claimed, you can always <a href="https://csadvent.christmas/substitute">sign up to be a substitute author</a>. Rock on! 🎸<br />
  </p><ul>
    <li><a href="https://twitter.com/search?q=%23csadvent&amp;src=typed_query&amp;f=live">#csadvent on Twitter</a></li>
    <li><a href="https://twitter.com/mgroves">@mgroves on Twitter</a></li>
  </ul>
<p></p>

Inclusive Design 24
<p><a href="https://twitter.com/id24conf"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8bce5bc4-1b00-4f4f-89c7-1540eab666f8/inclusive-design24-advent.png" /></a>The good folks at <a href="https://twitter.com/id24conf">Inclusive Design 24</a> are sharing their <a href="https://twitter.com/hashtag/id24?src=hashtag_click&amp;f=live">favorite talks</a> from previous years of the good ol’ <a href="https://twitter.com/hashtag/id24?src=hashtag_click&amp;f=live">#id24</a> online-only conferences while counting down the days until the New Year. All videos have even been manually re-captioned, just so they’re all at their best.<br />
  </p><ul>
    <li><a href="https://twitter.com/hashtag/id24?src=hashtag_click&amp;f=live">@id24conf on Twitter</a></li>
  </ul>
<p></p>

Lean UXMas
<p><a href="https://2021.leanuxmas.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1b0708b-334c-401c-ad83-39d87eca084a/leanuxmas-advent.png" /></a><a href="https://2021.leanuxmas.com/">Lean UXMas</a> has been publishing each advent since 2014 and is a collection of the most popular articles from this year’s Agile and Lean UX latest news. If you find yourself impatiently waiting for the next article to be posted, you can always check out the previous advent calendars smashing the year in the base URL, or simply search for them below the website’s header.<br />
  </p><ul>
    <li><a href="https://2021.leanuxmas.com/rss">RSS Feed</a></li>
    <li><a href="https://twitter.com/leanuxmas">@LeanUXmas on Twitter</a></li>
  </ul>
<p></p>

Code Security Advent Calendar
<p><a href="https://blog.sonarsource.com/code-security-advent-calendar-2021"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e576951a-9a35-42b2-ba2d-2970684d3dc0/sonarsource-advent.jpeg" /></a>If you’re up for a challenge that involves spotting security vulnerabilities, then the <a href="https://blog.sonarsource.com/code-security-advent-calendar-2021">Code Security Advent Calendar</a> is just the right one for you. Every day, there will be a code security puzzle and/or riddle <a href="https://twitter.com/sonarsource">announced on Twitter</a> to which you’re welcome to join and share with your friends to discuss solutions together. The most active players with the best solutions will be contacted to receive a cool swag pack. 🎁<br />
  </p><ul>
    <li><a href="https://twitter.com/sonarsource">@SonarSource on Twitter</a></li>
  </ul>
<p></p>

Advent of Cyber

<p><a href="https://tryhackme.com/christmas"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68e356b4-df87-4246-9dac-d9a7bd23ff7a/tryhackme-logo.png" /></a>Security can be a daunting field. With <a href="https://tryhackme.com/christmas">Advent of Cyber</a>, you can get started with Cyber Security by learning the basics and completing a new, beginner friendly security exercise every day. For each task you get correct, you get a raffle ticket and on the 26th December, meaning the more questions you answer, the more chance you have of winning. Every day you complete a challenge, you get entered into another prize draw for the chance to win a mini-prize. So, what are you waiting for?<br />
  </p><ul>
    <li><a href="https://twitter.com/RealTryHackMe">TryHackMe on Twitter</a></li>
    <li><a href="https://twitter.com/_johnhammond">John Hammond on Twitter</a></li>
  </ul>
<p></p>

24 Days In December
<p><a href="https://24daysindecember.net/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48c6e546-394b-4a36-9ab3-ac2fa885f39b/24-days-in-dec-2018.png" /></a>“PHP is not just a language. PHP is a group of people, a community of developers who build things for the web. The PHPamily spans the globe, and while we might not always agree or get along, we have one thing in common, we’re passionate about what we do.” <a href="https://twitter.com/jon_bossenger">Jonathan Bossenger</a> hits the nail right on the head as he welcomes everyone to participate in the 6th edition of <a href="https://24daysindecember.net/">24 Days in December</a>. We’re all look forward to hearing your personal journey and stories with PHP! 🌈<br />
  </p><ul>
    <li><a href="https://24daysindecember.net/feed/">RSS Feed</a></li>
    <li><a href="https://twitter.com/24DaysInDec">@24DaysInDec on Twitter</a></li>
  </ul>
<p></p>

Designcember
<p><a href="https://designcember.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a86312a-1b28-4ee4-871b-4d7b071a5fa7/designcember.png" /></a>As a celebration of web design, the good folks at <a href="https://web.dev/">web.dev</a> are dropping a UI development treat for you every day with their brilliant <a href="https://designcember.com/">Designcember</a> advent calendar. Built with CSS container queries and the new CQ Polyfill, it’s full of little details to explore! Try interacting with the windows, resizing your browser, or clicking on the button at the top right to toggle between dark and light mode. Why not play along and create your own CQ demo?<br />
  </p><ul>
    <li><a href="https://twitter.com/search?q=%23Designcember&amp;src=typed_query&amp;f=live">#Designcember on Twitter</a></li>
    <li><a href="https://twitter.com/ChromiumDev">@ChromiumDev on Twitter</a></li>
  </ul>
<p></p>

Umbraco Christmas Calendar

<p><a href="https://24days.in/umbraco-cms/2021/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/92cb7edc-8893-4440-b8a3-d538d7396fdd/umbraco-cms-2021.png" /></a>It’s the 10th year of <a href="https://24days.in/umbraco-cms/2021/">24 Days In Umbraco</a> and it’s time to learn more about Umbraco (otherwise known as the ‘Friendly CMS’). If you’re interested in it but not sure where to start, you can always check out the <a href="https://24days.in/umbraco-cms/tags/v7/">articles by tag(s)</a> and find the answers to your questions. The calendar was first started back in 2012 so there’s plenty of content to sift through.<br />
  </p><ul>
    <li><a href="https://twitter.com/24daysinumbraco">@24daysinumbraco on Twitter</a></li>
  </ul>
<p></p>

Festive Tech Calendar 2021
<p><a href="https://festivetechcalendar.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f0b7cff5-b026-4063-906c-9692748a6c63/festivetechcalendar.jpg" /></a>With over 2K subscribers on YouTube, the <a href="https://festivetechcalendar.com/">Festive Tech Calendar</a> is back at it again this year with videos from different communities and people around the globe. As you’ll see, you’ll quickly be able to find an entire <a href="https://www.youtube.com/c/AzureAdventCalendar/videos">collection of videos</a> from all of the previous years, and topics as well as the diversity of speakers both don’t fall short indeed. By the communities, for the communities indeed.<br />
  </p><ul>
    <li><a href="https://www.youtube.com/channel/UCJL9wCcmeMBbah4J0uOWIPg">“Festive Tech Calendar” on YoutTube</a></li>
    <li><a href="https://twitter.com/hashtag/FestiveTechCalendar2021?src=hashtag_click">#FestiveTechCalendar2021 on Twitter</a></li>
    <li><a href="https://twitter.com/_cloudfamily">@CloudFamily on Twitter</a></li>
  </ul>
<p></p>

SysAdvent
<p><a href="https://sysadvent.blogspot.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/263db521-0f2d-4bc9-9dff-37ab5b6f3b97/sysadvent-logo-200px.jpeg" /></a><a href="https://sysadvent.blogspot.com/">SysAdvent</a> is back this year! With the goals of sharing, openness and mentoring, you’re in for some great articles about systems administration topics written by fellow sysadmins. Tune in each day for an article that explores the wide range of topics in system administration.<br />
  </p><ul>
    <li><a href="https://sysadvent.blogspot.com/feeds/posts/default?alt=rss">RSS Feed</a></li>
    <li><a href="https://twitter.com/SysAdvent">@SysAdvent on Twitter</a></li>
  </ul>
<p></p>

IT Security Advent Calendar
<p><a href="https://www.infowebica.com/resources/security-advent-calendar/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a60baf39-0023-4abc-ad36-0af7af0ab0f5/myadvent-mascot.png" /></a>“Don't store sensitive data in the cloud; keep it entirely disconnected from the web.” Yup, that’s the credo delivered in the first advent door of the good ol’ <a href="https://www.infowebica.com/resources/security-advent-calendar/">IT Security Advent Calendar</a> this year. Counting down to Christmas, this calendar is dedicated to sharing a new tip for protecting your devices, networks, and data each day.<br />
  </p><ul>
    <li><a href="https://twitter.com/infowebica">@Infowebica on Twitter</a></li>
  </ul>
<p></p>

Bekk Christmas
<p><a href="https://javascript.christmas/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/033f1252-2239-4479-a4ef-7ff447202251/bekk-christmas.jpg" /></a>This year’s <a href="https://bekk.christmas/">Bekk Christmas</a> features opinion pieces, tutorials, podcasts, deep dives and lots of other formats. Pick the ones that seem interesting to you, and consume them whenever you like. It’s worth digging through the archives (see e.g. <a href="https://www.bekk.christmas/post/2020">2020</a>) — there’s a golden gem hidden in each one of them!

  <br />
  </p><ul>
    <li><a href="https://twitter.com/livetibekk">Bekk on Twitter</a></li>
    <li><a href="https://twitter.com/selbekk">Kristofer Giltvedt Selbekk on Twitter</a></li>
  </ul>
<p></p>

<p><br /></p>
<p><br /> </p>
<p>It’s nice to find some <strong>calendars in languages other than English</strong>, too! Here are a few we stumbled upon:</p>
24 Jours De Web (French)
<p><a href="https://www.24joursdeweb.fr/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efe93c87-dd0a-4212-9d7b-cfe015fd4d47/24joursdeweb-advent.png" /></a><a href="https://www.24joursdeweb.fr/">24 Jours De Web</a> is a lovely French calendar which first appeared back in 2012, and has been continuing the lovely tradition of online advent calendars ever since. 24 authors come together each year and publish an article on UX, accessibility, privacy, and other topics related to the good ol’ web.<br />
  </p><ul>
    <li><a href="https://www.24joursdeweb.fr/feed/">RSS Feed</a></li>
    <li><a href="https://twitter.com/24joursdeweb">@24joursdeweb on Twitter</a></li>
  </ul>
<p></p>

SELFHTML Adventskalender (German)
<p><a href="https://forum.selfhtml.org/advent/2021"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2b0e0c9-42a7-4f24-add2-48a391e99907/selfhtml-logo-200px.png" /></a>This year’s <a href="https://forum.selfhtml.org/advent/2021">SELFHTML Adventskalender</a> is dedicated to accessibility — a topic that concerns everyone. Why? Because accessibility is good for all of us. Accessible websites are simply better websites. At the end of the day, everyone in the world hits a large key faster and more reliably than a small key. To all the German-speaking developers out there, you’ll understand <a href="https://blog.selfhtml.org/2021/nov/29/adventskalender-2021">why it’s important to include accessibility</a> as much as possible. Also, make sure to bookmark the <a href="https://wiki.selfhtml.org/wiki/SELFHTML:Wiki">SELFHTML wiki</a> so you can have the latest documentations and tutorials at hand.<br />
  </p><ul>
    <li><a href="https://forum.selfhtml.org/all/feeds/rss">RSS Feed</a></li>
    <li><a href="https://twitter.com/selfhtml">@SELFHTML on Twitter</a></li>
  </ul>
<p></p>

adventJS (Spanish)

<p><a href="https://adventjs.dev/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a98c76c-3675-47a1-a400-5b41d7520334/adventjs-spanish.png" /></a>Fancy more JavaScript challenges every day? Well, <a href="https://twitter.com/midudev">Miguel Ángel Durán</a> has your back with <a href="https://adventjs.dev/">adventJS</a> — an advent calendar that started back in 2015. The programming challenges are all in Spanish, and are meant to be solved with JavaScript only. Don’t forget to participate and share your solutions on Twitter!<br />
  </p><ul>
    <li><a href="https://twitter.com/hashtag/adventjs?src=hashtag_click&amp;f=live">#adventjs on Twitter</a></li>
  </ul>
<p></p>

Kodekalender (Norwegian)
<p><a href="https://julekalender.knowit.no/doors"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a0a9a87-8082-4b44-a5ee-64f131f5f8ee/kodekalender-knowit-advent.png" /></a>Knowit is one of the Nordic region's leading consulting companies. They have once again brought their <a href="https://julekalender.knowit.no/doors">Norwegian calendar</a> to life, and it is just the kind of holiday calendar for those of you who love programming. Behind each hatch hides a task you have to answer in the form of a simple text string or a number. The hatches vary in degree of difficulty and design, but common to all is that they are best suited for solving with code. Solve as many slots as possible to increase your chances of winning! Good luck!<br />
  </p><ul>
    <li><a href="https://twitter.com/knowitnorge">@knowitnorge on Twitter</a></li>
  </ul>
<p></p>

WEBアクセシビリティ Advent Calendar (Japanese)
<p><a href="https://adventar.org/calendars/6197"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9376dae6-86b3-4985-8175-903ef544d24c/adventar-illu.png" /></a>This <a href="https://adventar.org/calendars/6197">Japanese advent calendar</a> has been running since 2013 and is moderated by <a href="https://twitter.com/hokaccha">@hokaccha</a>. Its focus lies on web accessibility, with a new author exploring a topic each day — from web accessibility to all the different types of programming languages you may want to explore for your projects. Once logged in, you can save a spot on the calendar and have your article or work published on that particular day.</p>

<p><br /></p>
<blockquote>Do you happen to know any other advent calendars that have been created in languages other than in English? Please do feel free to <a href="https://twitter.com/smash_it_on">reach out to me on Twitter</a> and I’ll be sure to add them to this list. 🙌</blockquote>

Oldies But Goodies
<h3>Christmas Experiments (2018)</h3>
<p><a href="https://christmasexperiments.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8a061cb-67e1-4b1c-ac6f-ccdac1836764/christmasexperiments-advent.png" /></a><a href="https://christmasexperiments.com/">Christmas Experiments</a> started back in 2012, with the goal to deliver great experiments and highlight top web creative as well as newcomers. It was a pretty cool WebGL advent calendar that featured a daily new experiment that was quite obviously made with love by digital artists. Unfortunately, it did not continue after the 2018 edition.<br />
  </p><ul>
    <li><a href="https://twitter.com/christmasxp">@christmasxp on Twitter</a></li>
  </ul>
<p></p>

<h3>24 Accessibility (2019)</h3>
<p><a href="https://www.24a11y.com/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a947a3c2-c96e-45e7-9a27-5488f3a8e0f1/24-a11y-logo-18-opt.jpg" /></a>An advent calendar we surely miss is the <a href="https://www.24a11y.com/">24 Accessibility</a>. The site hasn’t had a new article since 2019, but still offers a good resource of articles on all subjects related to digital accessibility. Whether you are new to accessibility or a veteran, a developer, designer, user experience professional, quality assurance analyst or project manager, you’ll find an article of interest during the run of the series.<br />
  </p><ul>
    <li><a href="https://www.24a11y.com/feed/">RSS Feed</a></li>
    <li><a href="https://twitter.com/24accessibility">@24accessibility on Twitter</a></li>
  </ul>
<p></p>

<h3>It’s A Shape Christmas (2019)</h3>
<p><a href="https://itsashapechristmas.co.uk/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a42bacde-cedc-48d4-a06a-295ac90ad0ad/shape-christmas-logo-200px.png" /></a><a href="https://itsashapechristmas.co.uk/">It’s A Shape Christmas</a> is a digital calendar that counts down to Christmas and reveals a bespoke illustration each day themed around four different shapes (Square, Triangle, Circle and Hexagon) and Christmas. The project was started in 2011 by a UK design agency called <em>Made by Shape</em>. The website still showcases some of the best from the previous seasons. I’m sure you’ll agree: they’re all just too good not to be shared! ✨<br />
  </p><ul>
    <li><a href="https://twitter.com/shapechristmas">@shapechristmas on Twitter</a></li>
  </ul>
<p></p>

<h3>24 Ways (2019)</h3>
<p><a href="https://24ways.org/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4641212-86e0-49e0-a270-512acc6e4329/24-ways-advent-2018.png" /></a>First initiated by Drew McLellan, <a href="https://24ways.org/">24 ways</a> started out as a simple website that published a new tip or trick each day leading readers through December up until Christmas. It launched in <a href="https://24ways.org/2005">2005</a> and still has all of the calendars available online. Unfortunately, the last one was published in 2019 and will be taking a well-earned break after that year’s “final countdown”.<br />
  </p><ul>
    <li><a href="https://feeds.feedburner.com/24ways">RSS Feed</a></li>
    <li><a href="https://twitter.com/24ways">@24ways on Twitter</a></li>
  </ul>
<p></p>

<h3>Perl Advent (2020)</h3>
<p><a href="https://perladvent.org/archives.html"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69912810-b90a-4e98-939f-6e122273a17a/perladvent.png" /></a>The <a href="https://perladvent.org/">Perl Advent</a> started back in <a href="https://perladvent.org/2000/">2000</a> and is perhaps the longest running web advent calendar that many know of. You’ll find insightful articles written by diverse author submissions from all types of Perl programming levels. A different Perl module will be featured each day for the twenty four days of advent, and an extra module on Christmas day. Make sure to go through the <a href="https://perladvent.org/archives.html">previous Perl advent calendars</a> — it’s worth it.<br />
  </p><ul>
    <li><a href="https://perladvent.org/2019/atom.xml">RSS Feed</a></li>
    <li><a href="https://www.twoshortplanks.com/">Mark Fowler’s website</a></li>
  </ul>
<p></p>

<h3>PWAdvent (2020)</h3>
<p><a href="https://pwadvent.dev/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06434a01-12fb-4883-942a-97e7f2b2282c/pwadvent-dev.png" /></a><a href="https://pwadvent.dev/">PWAdvent</a> is a nice advent calendar for everyone who’s excited about the web platform and Progressive Web Apps, of course. Take a look at all the great stuff the web has to offer in last year’s calendar, in which a new progressive browser feature was introduced every day by <a href="https://twitter.com/nic_o_martin">Nico Martin</a> himself and others.</p>

<h3>A11y Advent Calendar (2020)</h3>
<p><a href="https://kittygiraudel.com/2020/12/01/a11y-advent-calendar/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74d6e23b-ae2b-4b5b-9813-91ae3bf0e780/a11y-advent-calendar.png" /></a>Heydon Pickering once said, “Accessibility is not about doing <em>more</em> work but about doing the <em>right</em> work.” Last year, Kitty Giraudel decided to publish an accessibility tip a day in their very own <a href="https://kittygiraudel.com/2020/12/01/a11y-advent-calendar/">#A11yAdvent</a>. Some of the tips are probably common knowledge for many, yet each of the posts cover so many of the important aspects of accessibility that will still hold true for years to come.<br />
  </p><ul>
    <li><a href="https://kittygiraudel.com/rss/index.xml">RSS Feed</a></li>
    <li><a href="https://twitter.com/KittyGiraudel">Kitty Giraudel on Twitter</a></li>
  </ul>
<p></p>



Last But Not Least...
<p><a href="https://twitter.com/hashtag/SmashingAdvent?src=hashtag_click"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7483fb45-4dc0-492a-aee5-f7b133abcc18/smashingconf-advent.png" /></a>Of course, we wanted to join in the fun ourselves and brought our very own <a href="https://twitter.com/hashtag/SmashingAdvent?src=hashtag_click">#SmashingAdvent</a> to life! As you already probably know, the Smashing team has been organizing conferences and events since 2012, so there are plenty of gems to shine the spotlight on. Do give <a href="https://twitter.com/smashingconf">@SmashingConf</a> a follow on Twitter where we’ll be sharing our favorite talks and interviews with speakers from all over the globe.</p>

<p>On behalf of the entire Smashing team, we’d like to say <strong>thank you to each and every one involved</strong> in these projects — we see you! The communities in our web industry wouldn’t be able to learn so much and thrive if it wasn’t for your time, hard work and dedication. We all sincerely and truly appreciate each and every one of you. 🙏</p>
<p>And of course, if there’s a calendar that isn’t mentioned here, please do post it in comments section below.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:64:"How To Protect Your API Key In Production With Next.js API Route";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:81:"https://smashingmagazine.com/2021/12/protect-api-key-production-nextjs-api-route/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:81:"https://smashingmagazine.com/2021/12/protect-api-key-production-nextjs-api-route/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 02 Dec 2021 09:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:178:"There’s a great challenge that comes with building Jamstack applications on the web. In this article, Caleb Olojo explains how you can use Next.js to bootstrap your app safely.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:40:"hello@smashingmagazine.com (Caleb Olojo)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:164:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d0b2208c-15b4-4cdc-b050-033c4a4aa1b0/protect-api-key-production-nextjs-api-route.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:13089:"<p>Front-end developers have to interact with private or public APIs whose method of authorization requires a secret key/API key that enables developers to use these APIs. The key(s) are important, hence the need to store/protect the key(s) arises. Creating an environment variable that stores the key is the “go-to” solution that most developers tend to embrace, but there’s a catch. The environment variable <strong>does not protect the key(s)</strong> from anyone that knows their way around the dev-tools of their browser. That’s why we need to use our keys at server-side when we’re writing our API calls.</p>
<p>In this article, we’ll be using Next.js to bootstrap our app. This does not mean that the <a href="https://create-react-app.dev/"><code>create-react-app</code></a> library will not work. You can make use of any one that you find convenient. We’re using Next.js because of the many perks that come with it. (You can read more about Next.js <a href="https://nextjs.org/docs/getting-started.">here</a>.)</p>
<p>Let us start by installing the dependencies that we need in this project. We’ll start by creating a Next.js app. The command below does that for us:</p>
<pre><code>npx create-next-app [name-of-your-app]</code></pre>

<p>We’ll make use of the native JavaScript <code>"Fetch API"</code> library to get data from the API. We won’t be covering much of the styling aspect in this article. (If you want to take a look at an example project I built using the Next.js API route pattern, you can find the repository <a href="https://github.com/Caleb335/article-example-projects/blob/master/src/container/users/index.js">here</a>.)</p>
<p>Now let’s have a look at the file structure of the app. We’ll be focusing on the important files needed in this app, so it’ll be concise.</p>
<pre><code>|--pages
|   |-- api
|   |   |-- serverSideCall.js  
|   |-- _app.js
|   |-- index.js
|__ .env.local</code></pre>

Breakdown Of The Files In The App Structure
<p>In this section, we are going to see the different files that make up the architecture of this project, and their respective functions below.</p>
<p>The <code>pages</code> directory is where all the routing of the app takes place. This is an out-of-the-box feature of Next.js. It saves you the stress of hard hard-coding your independent routes.</p>
<ul>
<li><p><code>pages/api</code><br />The api directory enables you to have a backend for your Next.js app, inside the same codebase, instead of the common way of creating separate repositories for your REST or GraphQL APIs and deploying them on backend hosting platforms like Heroku, and so on.</p>
<p>  With the <code>api</code> directory, every file is treated as an API endpoint. If you look at the <code>api</code> folder, you’ll notice that we have a file called <code>user.js</code> in it.</p>
<p>  That file becomes an endpoint, which means an API call can be performed using the path to the file as the base URL.</p>
</li>
</ul>
<pre><code>const getData = async() =&gt; {
  fetch("/api/users")
   .then(response =&gt; response())
   .then(response =&gt; console.log(response.data))
   .catch(err =&gt; console.log(err)
}</code></pre>

<ul>
<li><code>pages/_app.js</code><br />It is where all our components get attached to the DOM. If you take a look at the component structure, you’ll see that all the components are passed as <code>pageProps</code> to the <code>Component</code> props too.</li>
</ul>
<pre><code>function MyApp({ Component, pageProps }) {
  return (
    &lt;React.Fragment&gt;
      &lt;Head&gt;
        &lt;meta name="theme-color" content="#73e2a7" /&gt;
        &lt;link rel="icon" type="image/ico" href="" /&gt;
      &lt;/Head&gt;
      &lt;Component {...pageProps} /&gt;
    &lt;/React.Fragment&gt;
  );
}

export default MyApp;</code></pre>

<p>If you are new to Next.js, kindly go through this <a href="https://www.smashingmagazine.com/2020/10/getting-started-with-next-js/">article</a> that will guide you through the process.</p>
<ul>
<li><code>index.js</code><br />It is the default route in the pages folder. When you run the command below, it starts up a development server and the contents of <code>index.js</code> are rendered on the web page.</li>
</ul>
<pre><code>npm run dev</code></pre>

<ul>
<li><code>.env.local</code><br />It is where we’re storing the API key that’ll enable us to consume this API.</li>
</ul>
The Server-Side API Call
<p>The previous section exposed you to the files that we’ll be interacting with and their specific functions. In this section, we will move on to how we can consume the API.</p>
<p>The reason why we’re writing the API call at the server-side is for securing our API key, and Next.js already makes it an easy task for us. With the API routes in Next.js, we can perform our API calls without the fear of our API keys being revealed on the client-side.</p>
<p>You may have been wondering what the essence of the environment variable in the <code>.env</code> file is, in this scenario.</p>
<p>The environment variable (which is our API key) can only be available in <code>development</code> mode. </p>
<p>That is why we can do something like <code>process.env.api_key</code>, and get access to the environment variable.</p>
<p>But, the moment you deploy your app to platforms like Netlify or Vercel, the mode changes to <code>production</code>, which makes the Node.js <code>process</code> object unavailable on the client-side.</p>
<p>Now that you have seen the reason why need to write a server-side API call. Let’s get to it right away.</p>
<pre><code>export default async function serverSideCall(req, res) {
    const {
      query: { firstName, lastName },
    } = req;

    const baseUrl = `https://api.example-product.com/v1/search?
        lastName=${lastName}&amp;firstName=${firstName}
        &amp;apiKey=${process.env.KEY}
    `;
    const response = await fetch (baseUrl);
    res.status(200).json({
    data: response.data,
  });
}</code></pre>

<p>In the snippet above, we created an asynchronous function called, <code>serverSideCall</code>. It takes in two arguments, <code>req</code> which stands for “request” in full, and <code>res</code> which is “response” in full.</p>
<p>The <code>req</code> argument has some properties, (or “middlewares” as the Next.js docs call it) that can be accessed when we’re consuming our API, one of them is <code>req.query</code>.</p>
<p>You’ll notice that we destructured the <code>query</code> property in the snippet above, so we should now be able to pass those variables as values to the query properties of the API endpoint. Take a look at it below.</p>
<p><strong>Note</strong>: <em>You can read more about the in-built middlewares that come with the <code>req</code> argument <a href="https://nextjs.org/docs/api-routes/api-middlewares">here</a>.</em></p>
<pre><code>const {
  query: { firstName, lastName },
} = req;</code></pre>

<p>The base URL takes the destructured query properties as values and the <code>apiKey</code> is gotten from the <code>.env</code> file via the Node.js <code>process</code> object.</p>
<p>The destructured query properties are taken as requests that will be sent from the input values of the form component (which we’ll be creating in the next section) to the API, once it is received, we get a response that corresponds with the request we made.</p>
<div>
<pre><code>const baseUrl = <code>https://api.kelvindata.com/rest/v1/searchv2?  lastName=${lastName}&amp;firstName=${firstName}&amp;apiKey=${process.env.KEY}</code>;</code></pre>
</div>

<p>The next process the function has to complete is the response from the asynchronous API call. The snippet below assigns the API call which we are performing with the <code>axios</code> library to a variable, <code>response</code>.</p>
<p>On the next line, the <code>res</code> argument uses the <code>status</code> method which is used to send a JSON response to us, then we can assign the response variable as a property of <code>data</code>.</p>
<pre><code>const response = await axios.get(baseUrl);
res.status(200).json({
  data: response.data,
});</code></pre>

<p>You can read more about the various HTTP status codes <a href="https://dillionmegida.com/p/http-status-codes/">here</a>.</p>
Practical Usage Of The Server-Side API Function
<p>In this section, we’ll have a look at how we can utilize the server-side API call by creating a form with two input fields. The input values will be sent as query parameters to the API endpoint.</p>
<pre><code>import React from "react";

const Index = () =&gt; {
  const [data, setData] = React.useState([]);
  const [firstName, setFirstName] = React.useState("");
  const [lastName, setLastName] = React.useState("");

  const getuserData = async () =&gt; {
    // api call goes here
  };

  const handleSubmit = (e) =&gt; {
     e.preventDefault();
     getuserData();
  };

  return (
     &lt;React.Fragment&gt;
       &lt;form onSubmit={handleSubmit}&gt;
          &lt;label htmlFor="firstname"&gt;First name&lt;/label&gt;
          &lt;input
            type="text"
            name="firstname"
            value={firstName}
            placeholder="First Name"
            onChange={(e) =&gt; setFirstName(e.target.value)}
          /&gt;
          &lt;label htmlFor="lastname"&gt;Lastname&lt;/label&gt;
          &lt;input
            type="text"
            name="lastname"
            value={lastName}
            placeholder="Lastname"
            onChange={(e) =&gt; setLastName(e.target.value)}
          /&gt;
           &lt;button&gt;Search&lt;/button&gt;
        &lt;/form&gt;
        &lt;div className="results-from-api"&gt;&lt;/div&gt;
    &lt;/React.Fragment&gt;
 );
};

export default Index;</code></pre>

<p>Since this is a React component that is receiving data from an API endpoint, it should have an internal state of its own. The snippet below shows how we defined the different state variables with React Hooks.</p>
<pre><code>const [userData, setUserData] = React.useState([]);
const [firstName, setFirstName] = React.useState("");
const [lastName, setLastName] = React.useState("");</code></pre>

<p>The <code>firstName</code> and <code>lastName</code> variables will store the text values that are typed into the input field by anyone into the local state variables.</p>
<p>The <code>data</code> state variable helps us store the response that we get from the API call in an array, so we can use the JavaScript <code>map()</code> method to render the response on the webpage.</p>
<p>Below, we’re using <code>axios</code> to get data from the API endpoint. But here, the base URL is not a typical <code>https://</code> URL, instead, it is the path to the file where we made the server-side API call before.</p>
<pre><code>const getuserData = async () =&gt; {
fetch(`/api/usersfirstName=${firstName}&amp;lastName=${lastName}`, {
       headers: {
         Accept: "application/json",
       },
})
  .then((response) =&gt; response)
  .then((response) =&gt; {
    setData(response.data.data); 
    console.log(response.data.data);
  })
  .catch((err) =&gt; console.log(err));
};</code></pre>

<p>The same process in the <code>serverSideCall.js</code> file is repeated, but this time around with the necessary fetch API headers and assignment of the input state variables to the API query parameters. </p>
Conclusion
<p>There are other approaches that can help achieve this feat. Here are some of them:</p>
<ul>
<li><strong>Creating Netlify Lambda functions that’ll help protect your API keys on the client-side.</strong><br />This approach does it pretty much for you, but if you’re not a fan of writing so much code, it will help you get the little things done. The Next.js API route is your best bet in solving this issue.</li>
<li><strong>Server rendering with Next.js to hide API keys.</strong><br />In this video, <a href="https://ijemmao.me/">Ijemma Onwuzulike</a> gives an explanation of how to get this done with server-side rendering. <a href="https://www.youtube.com/watch?v=NbXwP1oBym8">I recommend checking it out</a>.</li>
</ul>
<p>Thank you for reading this article. Kindly share it and also feel free to take a look at a practical example project that I built using the Next.js API route <a href="https://exdemo.netlify.app/demo/kelvin-data">here</a>.</p>
<h3>Further Reading On Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/">How To Implement Authentication In Next.js With Auth0</a>,” Facundo Giuliani</li>
<li>“<a href="https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/">How To Maintain A Large Next.js Application</a>,” Nirmalya Ghosh</li>
<li>“<a href="https://www.smashingmagazine.com/2021/07/migrate-jquery-nextjs/">How To Migrate From jQuery To Next.js</a>,” Facundo Giuliani</li>
<li>“<a href="https://www.smashingmagazine.com/2021/10/nextjs-ecommerce-cls-case-study/">Solving CLS Issues In A Next.js-Powered E-Commerce Website (Case Study)</a>,” Arijit Mondal</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:11;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:67:"Smashing Podcast Episode 44 With Chris Ferdinandi: Is The Web Dead?";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:65:"https://smashingmagazine.com/2021/11/smashing-podcast-episode-44/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:65:"https://smashingmagazine.com/2021/11/smashing-podcast-episode-44/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 30 Nov 2021 14:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:203:"In this episode, we’re asking if changes to best practises over the last year have negatively impacted the web. Is it all downhill from here? Drew McLellan talks to expert Chris Ferdinandi to find out.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Drew McLellan)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:148:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa0481fb-1555-40f1-94c2-014b5553f45f/smashing-podcast-episode-44.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:48012:"<p>In this episode, we’re asking if changes to best practises over the last year have negatively impacted the web. Is it all downhill from here? Drew McLellan talks to expert Chris Ferdinandi to find out.</p>


<h3>Show Notes</h3>
<ul>
<li><a href="https://leanweb.dev">The Lean Web book</a></li>
<li><a href="https://gomakethings.com">Chris Ferdinandi</a> on the web</li>
<li><a href="https://twitter.com/chrisferdinandi">Chris on Twitter</a></li>
<li><a href="https://vanillajspodcast.com">The Vanilla JavaScript Podcast</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/11/nextjs-wildcard-subdomains/">Next.js Wildcard Subdomains</a> written by Sam Poder</li>
<li><a href="https://www.smashingmagazine.com/2021/11/improving-performance-wix-websites-case-study/">Improving The Performance Of Wix Websites</a> written by Dan Shappir</li>
<li><a href="https://www.smashingmagazine.com/2021/11/dyslexia-friendly-mode-website/">Adding A Dyslexia-Friendly Mode To A Website</a> written by John C Barstow</li>
<li><a href="https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/">How To Maintain A Large Next.js Application</a> written by Nirmalya Ghosh</li>
<li><a href="https://www.smashingmagazine.com/2021/11/3d-css-flippy-snaps-react-greensock/">3D CSS Flippy Snaps With React And GreenSock</a> written by Jhey Tompkins</li>
</ul>
<h3>Transcript</h3>
<p><a href="https://twitter.com/chrisferdinandi"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/013d0d6a-f33c-41ea-bfe6-f99f95fdd75d/chris-ferdinandi-200x200-opt.jpg" /></a>Drew McLellan: He’s the author of the Vanilla JavaScript Pocket Guide series, creator of the Vanilla JavaScript Academy Training Program and host of the Vanilla JavaScript Podcast. <a href="https://www.smashingmagazine.com/2020/07/smashing-podcast-episode-21/">We last talked to him in July 2020</a>, where we asked if modern best practices about for the web. So we know he’s still an expert in Vanilla JS, but did you know he’s solely responsible for New Zealand being missing from 50% of world maps? My smashing friends, please welcome back, Chris Ferdinandi. Hi Chris, how are you?</p>

<p>Chris Ferdinandi: Oh, I’m smashing. Thanks for having me Drew. Interesting thing. I actually make sure New Zealand is not on maps because it’s probably my favorite country in the whole world and I don’t want too many people to know about it.</p>
<p>Drew: You want it to remain unspoiled.</p>
<p>Chris: Indeed.</p>
<p>Drew: So welcome back to the podcast. Last time we talked, we posed this question of if modern best practices, the use of reactive frameworks and these sorts of things were actually bad for the progress of the web. And I don’t know whether it was a controversial episode or it just struck a chord with a lot of listeners, but that conversation has been one of the most shared and listened to episodes that we’ve put out that smashing.</p>
<p>Chris: Oh, that’s awesome.</p>
<p>Drew: It’s actually been more than a year now, 15 months since we recorded that, which at the pace the web moves is like literally forever. So I wanted to ask, has anything changed? Is the web still in a terminal decline? Has the needle shifted at all?</p>
<p>Chris: Yeah, quite a bit has changed quite a bit has not. So I think, it’s so weird. The web technology changes so fast, but the web itself tends to move a little bit slower just in terms of developer trends and habits. And so you see these slightly longer arcs where you’ll have a bunch of technology pile up around one approach and then it’ll slowly start to swing the other way and then change all at once. And so last time we talked, I think one of the big kind of... Well, I had two big points related to the modern web. The first was, we’re using a lot of tools that give developers convenience, but we’re using those tools at the expense of the user. So we’re throwing a ton of client-side JS at people, and that introduces a ton of agility and performance issues.</p>
<p>Chris: The other big point that I was really hammering on was that these tools don’t necessarily improve the developer experience as much as I think people think they do. They do for some people. And I think for another segment of the front end professionals it actually can make things a little bit worse. But what I’m starting to see happen now, and one of the things I’d love to dig into a little bit more is I think we’re seeing a new, it’s almost like a second generation of tools that take a lot of the developer benefits that these client-side frameworks bring and strip away the punishing effects that we put on our users as a result. So it’s taking those same concepts and tools and packaging them a little bit differently in a way that’s actually better for the front end.</p>
<p>Chris: So one of the things I’ve been talking about with people lately is this idea that modern development has broken the web, but it’s also starting to fix it. And so we can definitely dig into that in a bunch of different angles, depending on where you want to take this conversation.</p>
<p>Drew: Sure. What sort of things have you seen in the last year that really stand out from that point of view?</p>
<p>Chris: Yeah, so the two biggest trends I’ve noticed are the rise of microframeworks. So where we saw a lot of really big all encompassing libraries for a while React, Vue before that angular, which is just a massive beast at this point, we’ve started to see smaller libraries that do the same thing come into their own. So for example, I think the king of this hill is probably Preact, which is a three kilobyte alternative to React that uses the same API, ships way less code and actually runs orders of magnitude faster on safe updates than React does too. So you’ve got things like that.</p>
<p>Chris: For a while you had... Well, it’s still out there, but Alpine JS, which was inspired by VJS and then actually inspired Evan You who built Vue to release Petite Vue, which is a 5.5 kilobyte subset of Vue that’s optimized around progressive enhancement. So these are still client-side libraries, but the intent behind them is that they ship less code, include fewer abstractions and ultimately work faster and put less of that cost on the front end user. So that’s been one angle.</p>
<p>Chris: And then the second trend I’ve seen that I think is personally more compelling is a shift from libraries to compilers. And so the one that kicked this whole trend off was felt by Rich Harris, which takes the idea of state based reactivity. But instead of having this be a thing that runs in real time in the client, you author your code with the same general pattern that you might with React or Vue, and then you run a build tool that compiles all that into plain old HTML and vanilla JavaScript, and that’s what gets shipped to the browser. And so you’ve stripped out almost all of the abstractions in the client and you deliver something that’s way closer to what you might hand write with old school DOM manipulation, but with the developer convenience of state based EI. So that was really interesting.</p>
<p>Chris: More recently there’s a new tool called ASTRO that builds on what Rich did with Svelt, and also allows you to pull in components from your favorite libraries so you can mix and match Vue, React, FELT, Vanilla, JavaScript, all in one package, compile it all out into Vanilla JavaScript and ship orders of magnitude, less code without the abstractions. And so it would run way faster in the browser as well. And those are, I think for me, really the two big things that are like standing on the shoulders of giants and producing a front end that will hopefully start to be a little bit faster. The compilers in particular are interesting because they take us away from rendering HTML in the browser as much as possible. You still render your HTML or you still author it with JavaScript if you want, but the outputted result is more static HTML and less JavaScript, which is always a good thing.</p>
<p>Drew: Do you think this is the ecosystem’s response to this quiet developer dissatisfaction about the weight of modern frameworks? Is it just a natural heave and ho?</p>
<p>Chris: Yeah, it is. Although to be honest, I’m not entirely sure how much of this was driven by... Well, there’s some definitely some performance minded developers out there who have been very vocal about how these tools are bad for the user. I don’t know that that’s necessarily representative of the general population though. I mean, certainly a subset of it given how the last time we talked that episode did, but I think one of the things that none of these tools for me get at is... Or the thing that I’m most bothered by by the modern web that I don’t think these tools address is that I personally feel like just the development process in general is over complicated.</p>
<p>Chris: This is where I get into the whole like, I don’t think the developer experience is actually better with these tools, but I think for a lot of developers in maybe a team environment, it can be. For me as a largely solo developer, I find these tools more trouble than they’re worth, but I know a lot of folks disagree with me there, so I don’t want to dismiss that as invalid. If you find these tools useful great, but yeah, I think this is maybe a natural pendulum swing back in the other direction.</p>
<p>Chris: The third thing that I didn’t talk about that your question actually makes me think about though is, there is almost a natural cycle in the web where you start to throw a lot of JavaScript at solving problems as the web and the capabilities of it grow. And eventually those JavaScript libraries get absorbed by the platform itself, but it’s a much slower process than creating a new JavaScript library is, because it’s standard processes and how important those are. So we saw the same thing happen with jQuery, right, where the amount of JavaScript being used on the web swelled with jQuery and jQuery plugins.</p>
<p>Chris: And then eventually the web platform realized that these ways of doing things are really smart and we started to get native ways to do it. And then there was this really long, slow petering off of the shift away from jQuery. So I think these libraries, as much as they’ve done a lot of... That’ll be a little controversial here and say, they’ve done a lot of damage to the web. They’ve also served an important function in paving cow path for what native APIs could look like it could do. So I don’t want to completely dismiss them as terrible.</p>
<p>Drew: It’s interesting that you mentioned ASTRO just a little bit earlier. I’ve actually recorded an interview with Matthew Phillips. I’m not sure if it goes out before or after this one. He’s one of the core developers on ASTRO. And it certainly is a very creative and an interesting approach to the problem. I do wonder as you saying how much this is. We’ve created a set of problems for ourselves and so now we’ve created a new solution, which patches over those problems and gives us something even better. But are we just stacking the bricks on top of each other and still ending up with a very wobbly tower because of it? Are we just going down the wrong path?</p>
<p>Chris: It depends. So I, as the hair on my head has started to disappear and my beard has gotten whiter, I’ve started to talk in fewer absolutes than I did. And so five years ago, I would’ve said, "Absolutely yes." I don’t want to diminish the value of these tools in a team environment. And the other thing, I honestly think a lot of libraries really have the potential to at least patch fix in the interim is accessibility problems with the web around complex UI components. So in short, if I were to give this just a one sentence, yes, I do think in many ways we’re creating a really delicate house of cards that collapses very easily. And I think one of the nicest things about using mostly or almost entirely platform native to build for the web, so just authoring an HTML, CSS and JavaScript is, you cannot touch that code for five years and come back to it and you don’t have any dependencies to update. You don’t have any build tools to run, to start working with it again. It just works. And that’s really great.</p>
<p>Chris: But I think the thing I see with libraries is a lot of them come into creation to fill gaps in what the platform can do. And what I’ve noticed happens is after the platform catches up, the libraries stick around for a really long time. And so the thing I always try to do is be a little bit deliberate about what I add to the things I build, because it’s really easy to add stuff and really hard to take it away once it’s there. And just, I think to ground these heady abstract concepts, I’m talking about for a sec, every year, web aim, Web Accessibility consultancy firm does a survey of the top million sites on the web. And they run an audit, just automated audits. They’re not doing a detailed inspection of all these sites. So just stuff that, simple like robot tasks and pickup. And historically, one of the things they’ve always found is that sites that use UI rendering libraries have more accessibility issues than sites that don’t.</p>
<p>Chris: This year they found the same trend with one exception. Sites that use React actually have fewer accessibility issues than sites that don’t. And that is a notable trend or noticeable departure, rather from the year before when React sites had more accessibility issues.</p>
<p>Chris: I noticed a lot of focus on accessibility in the React community over the last year, building more accessible components, accessible routing, things of that nature. And for complex components, things like tabs and disclosure widgets, and sliders and things like that, it is really hard to do those accessibly with just HTML and Vanilla JavaScript. Trying to keep track of which ARIA attributes you need to add on, which elements and how to change them based on different behaviors and how to shift focus and announce different things is really complex. And I think these libraries as much as they can be a very delicate house of cards, I see a huge potential there to fill these gaps. Where I’d ultimately love to end up though, is in a place where the platform, the web, browsers offer native components that do those things so that you don’t need the libraries. And I think the details and summary elements provide a really nice model for what that could look like.</p>
<p>Chris: So if you’re listening to this and you don’t know what those are, the details element is an HTML element that you wrap around some content, and then inside it you nest a summary element with like a little description of what’s in that content. And by default, this element will be a collapsed bit of content. And when you click on the stuff in the summary, it expands and then when you click it again, it collapses and it shows a little arrow when it’s open or closed to indicate what’s happening here. It’s accessible out of the box. If the browser doesn’t support it, it shows all the content by default. So it’s just automatically progressively enhanced. You don’t need to do anything special there.</p>
<p>Chris: It can be styled with CSS. You can even change what the icons that display when it’s expanded and collapsed are, just with CSS. You don’t need to write any JS for it, but if you wanted to extend the behavior in some way you can, because it also exposes a JavaScript event that fires whenever it’s toggled open or closed. And I would love to see more stuff like that for tabs, for image sliders or carousels or photo galleries, which just... We have so many different interactive components now on the web that may or may not always be appropriate, but they’re in the designs and people are building them and having a way to do those things where you didn’t have to fumble through how to make them accessible or lean on a 30 kilobyte library would be awesome.</p>
<p>Chris: And so for me, that’s, I think, the next evolution of the web. That’s where I really want to see things start to go. And I think that’s the big need that these libraries address today in addition to some other stuff like changing the UI based on state changes and interesting use cases like that.</p>
<p>Drew: Yeah. Modern browsers are just so capable now and they automatically update themselves and they include many of the features natively that we’ve previously relied on, on big frameworks and build tools for. Is the requirement of a build process to deploy a project a red flag in 2021? Should HTML and CSS and JS just be deployable as it is?</p>
<p>Chris: So technically they are. I don’t think for most build processes that’s real or for most apps or sites or companies that’s necessarily realistic today. I don’t know that I’d call it a red flag as much as a resigned I wish it wasn’t like this, but I understand why it is, for me. Even for myself, my site has several thousand pages on it now. I think I’m up to three or four thousand pages and there’s no way I am just hand coding all those. I use a static site generator and I think tools like that can be really great.</p>
<p>Chris: I think there’s some challenge there in that they become things that have to be kept updated and maintained. And so I like to keep mine as lean as possible, but I think build tools that put more of the run time on you, the developer, and thus allow you to ship less to the browser are a good thing, especially as the things we build become more complex. So I don’t know that I would necessarily say it’s just by default a red flag. I think a lot of it depends on how you’re using it. If you need to run a build to ship a one or two page marketing site or brochure site, yeah, that’s a red flag. But if you’re building some complex applications and these allow you to author in a way that’s more sensical for you and then ship less stuff to the browser, that’s not a bad thing. And that’s why I find tools like ASTRO really, really interesting because there is still a build step there, but it’s a build step in the service of providing a better end user experience.</p>
<p>Drew: Yes. It’s shifting all that computation onto the server to build time or pre deferred time and not on page request time.</p>
<p>Chris: Yeah. And so for me, I almost break build steps into... Like for me, the gold standard is if I can ship it without any build step at all, that’s awesome. But even for myself, the vanilla jazz guy, that’s not how I do things a hundred percent today. And so I think the next step up is compilers that reduce your code to as much HTML and plain old JavaScript as possible, versus those that create even more JavaScript, like the ones that take a bunch of little files and make an even bigger file. So more of the former, less of the latter if possible is always a good thing, but not always possible.</p>
<p>Drew: I think getting off the dependency treadmill, as it were, it’s got to be a big draw to a Vanilla JavaScript approach, not having a million dependencies to be updating all the time, but I guess one of the advantages to some of these bigger frameworks is that they sometimes dictate and sometimes facilitate a uniform way of working, which is really important with larger teams. Is there a danger of a project going a bit off the rails without those standards and procedures in place that a framework imposes?</p>
<p>Chris: Yes. Yeah. I think that’s fair. I used to downplay, I think, the significance of this for a while. And I think that is valid. That is a fair benefit of these tools. I think that maybe the small counter argument here is if you Google, "How to do X with React," you’re going to get half a dozen different approaches to doing that thing. So there are conventions, but there’s not necessarily hard and fast, like if you don’t do it this way, everything breaks kind of rules. One of the appeals of these tools is that they have a lot of flexibility. Certainly they do enforce more standard approaches though than just green fields, browser native things do. And so I think there’s maybe a bit of a balance, even if you don’t have a strong team lead who’s driving internal code standards.</p>
<p>Chris: I have seen even framework based projects go off the rails with hodgepodge approaches before. So it’s not like these tools automatically give you that, but they definitely give you some guidelines, maybe some rails that nudge you in the right direction. And I know some people need that. If that is something you need, this is where I really like that we’re seeing more of these smaller libraries that use the same conventions, like Petite Vue or Preact and compilers that also... Like FELT has some very rigid rails around it, certainly more so than you would see with ASTRO and so if you really need that, I think you have some options that don’t punish users for that need as much as what we had been doing a few years ago.</p>
<p>Drew: In the work that I do, we use Vue and the Vue single file components are a really compelling case for this in that we have engineers writing front-end code, who aren’t necessarily front-end specialists who say here’s a way to create a skeleton single file component. Your template goes here, your Java script goes here, your CSS goes here. And just naturally as a result of that, we end up with a very consistent code base, even though it’s been created by a very diverse set of people. And so the conventions like that can really have a big benefit to teams who aren’t necessarily all headed in the same direction because the engineering department’s so massive or whatever.</p>
<p>Chris: Yeah, for sure. Where I think you sometimes get into trouble with that... And I agree. I absolutely like the ability to make a code base look consistent with a bunch of different people working on it is really, really important because the people writing the code today are not necessarily going to be the ones maintaining it later. And that can get messy fast. The flip side is, if you are someone who is not comfortable or really well versed in JavaScript, a lot of the modern tool set is really geared towards JavaScript. And there are a lot of people on teams who specialize primarily in HTML or CSS or accessibility. And for them, JavaScript is not a core competency nor do I think it’s fair to expect it to be. And just like you don’t expect all your JavaScript developers to be experts in CSS.</p>
<p>Chris: And so it can make their job a lot harder. And this is for me, always that like that give and take with these tools is they can do some really awesome things, but they can also gate keep a lot of people out of the process. And I feel like that balance is different from team to team, but for me, one of the big arguments for leaning more on browser native stuff, or ditching as many of those dependencies as possible is that you open up your development process to a lot of people who are not as JavaScript heavy.</p>
<p>Drew: There’s always this undercurrent within the industry that suggests there’s the current way of doing things, the latest and there’s the outdated way. And if you’re not up to date with whatever the latest is, you’re somehow not as good an engineer or whatever.</p>
<p>Drew: In your estimation does taking a Vanilla JavaScript approach enable you to swim free of all that is Vanilla JS like an evergreen approach that stands apart from those techniques.</p>
<p>Chris: Yeah. Yeah. There’s a few threads in what you just mentioned, Drew. So one of them is, if you understand the fundamentals of the web, I have found that it’s a lot easier to like a bee, just bounce from different technology to different technology and understand it enough to like... Even if you don’t use it, look at it and be like, "Okay, I can see some benefits to this or not, and evaluate whether it’s the right choice." If you need to dive into a new technology based on client needs or shifting direction in the company, you can. I think it’s a lot harder to do that if you only know a library and you’ve only learned the web in the context of that library.</p>
<p>Chris: Now the caveat here is, I learned JavaScript in the context of jQuery and then backed my way into Vanilla JavaScript, and then moved on to a bunch of other things too. The more I think about how that process went for me though, I think I was able to do that as easily as I did in large part because by the time I made that jump, ES5 had come out and had taken a bunch of its conventions from jQuery. And so there was a lot of these real one for one map. Mental map things I could do. I don’t know if we’re quite there yet with some of the state based UI libraries, but we’re definitely headed in that direction and I think that’s great. But the other thing here, there is this real pressure, as you mentioned in the industry to always keep up to date with all these new technologies, in large part because people who develop these technologies and people who work at the big companies are the ones who get invited to speak at conferences and talk about all the cool things they’ve built.</p>
<p>Chris: But the reality is that a lot of our web, like I’d say a majority of our web, runs on boring old technology that hasn’t been updated in a while, or has been updated, but in just a patch fix process. A lot of really important applications run on Python or PHP, or as a backend with just some sprinkling of lightweight HTML, CSS, and JavaScript on top. jQuery is still used on a lot of important stuff to the exclusion of other libraries. And it doesn’t always feel like it because I feel like most job descriptions that you see talk about wanting experience in React or Vue or something these days. But my experience from working in bigger technology companies or older product companies, is that there are a lot of jobs to be found working on old stable technology. And a lot of times it’s not always the most exciting work, but a lot of times they’re jobs that pay well and have really great hours and a lot of work life balance in a way that you won’t get in a really exciting tech company working on the latest stuff.</p>
<p>Chris: And so there’s these trade offs there. It’s not always a bad thing. Yeah, I think it’s one of those, like the new, new, new thing is potentially a very vocal minority of the web that’s not representative of as the web as a whole.</p>
<p>Drew: And there seems to be along with this idea that you should be adopting everything new and immediately casting away everything that you’ve been using for the last 12 months. There’s also this idea that you should be engineering things that are enterprise grade of engineering, but you ought to be doing every small project the way that an enormous company with 400 engineers is building things. And those two ideas actually aren’t compatible at all. It’s the big companies with all these hundreds of engineers who are using the old crusty technology, because it’s reliable and they’ve got far too much momentum. They hate to be dropping it and picking up something new. So those two ideas are indirect conflict, I think.</p>
<p>Chris: Yeah. It’s funny. You always see the whole like, "Well, will it scale, will it scale," kind of thing all the time. And does it need to? Are you building things for a Facebook sized audience? I’m sure you’ll get there at... Well, you’ll get there, but it would be wonderful if you got there at some point, but like, if you’re not there today, maybe that’s not necessarily how you need to start out. Like those aren’t your needs today. You’re pre-engineering for a problem that you don’t have to the detriment of some problems that you do.</p>
<p>Chris: I think the other thing here is there’s this presumption that because Facebook or Google or Twitter do things, it’s a good idea, or it’s a good idea for everybody. And that’s not necessarily the case. Those companies do a lot of things right. But they also do a lot of things poorly and they do them that way because of engineering trade offs they’ve had to make because of how their teams are structured or very specific internal problems they had at the time that they made this decision or because some executive somewhere felt really strongly about something and made the internal team do it, even though it wasn’t necessarily best at the time. And then these things stick around. And so, yeah, I think one of the biggest things I see happen in our industry to our own detriment is looking at those few really big visible technology companies and thinking, "If they do it this way, I have to too," or "That’s the right call for everybody."</p>
<p>Chris: It’s that old, like no one got fired for hiring IBM kind of thing, but applied to if it’s good enough for Google or if it’s good enough for Twitter or whatever, so yeah. I agree. I think we do a lot of that and maybe that we shouldn’t.</p>
<p>Drew: I asked on Twitter earlier on that what frustrated people about modern web development best practices and from the responses I got, there’s certainly a lot of dissatisfaction with the current state of things. One trend, which over the last few years is getting momentum is like the Jamstack approach to building sites. And it seems on the surface that this going back to just client-side apps and nothing complex on the server, it sounds like it’s going back to basics, but is it doing that? Is it or is it just masking the complexity of the stack in a different way?</p>
<p>Chris: It depends. I’m a little biased here because I love the Jamstack personally, but I have also seen... Well, I shouldn’t say I have seen. I think what I’m trying to say here is the Jamstack is a term that can apply to a wide range of approaches up to and including a really large two megabyte of JavaScript single page app that has no server side rendering on one end. And then on the other end, flat HTML files that use absolutely no JavaScript at all, and instantly loading your browser and just happen to be shipped from a CDN or something like that. And technically speaking, both of those are Jamstack and are not the flat HTML thing. So Jamstack is not inherently better than server rendered, but in many cases it can be.</p>
<p>Chris: So for those of you who don’t know, Jamstack used to be an acronym that stood for JavaScript, APIs and markup, and they’ve since changed the spelling and changed the definition a little bit there. And it really encompasses an approach to building the web that doesn’t rely on server side rendering. So anything you’re serving, you’ve already compiled and put together and that’s what ships in the browser. And if there’s any other processing or scripting that happens, that happens in the client. Doesn’t have to, but often does. And so what I think is awesome about Jamstack if done a certain way, is it can dramatically improve the performance of the things that you’re building.</p>
<p>Chris: If you’re not just shipping like a metric ton of JavaScript to the client and having all the stuff that you used to do on the server happen in the browser instead, because the browser will always be less efficient at all that scripting than the server would be, but where this really comes to shine, and so I’ll use like WordPress as an example. I love WordPress. I built my career on WordPress. It’s the reason why I was able to become a developer, but every time someone visits a WordPress site out of the box, it has to make a call to a database, grabs some content, mash it into some templates, generate HTML and ship that back to the browser.</p>
<p>Chris: And there are some plugins you can use to do some of that ahead of time, but it is a very slow process, especially on a shared inexpensive web host. A Jamstack approach would be to have that HTML file already built, and you cut... You don’t cut the server out, but you cut all of that server processing completely out. So the HTML file already exists and gets shipped. And in an ideal world, you would even push that out to a bunch of CDNs so it sits as close to the person accessing it as possible. And what that can do is take a load time from a couple of seconds on an inexpensive host to less than half a second, because of how little computing time it takes to actually just request a file, get the file back and load it, if it’s mostly HTML.</p>
<p>Chris: And so, yeah, I really like rambling in long winded response to your question, Drew, but I think the answer is, if you’re using it with something like a static site generator, it can be amazingly more performant than some of the other things we’ve done in the past. And it allows you to get that same WordPress experience where I’m authoring content and I have some templates and I don’t have to hardcode HTML, but the performance is way better on one end.</p>
<p>Chris: And then on the other end, you could theoretically define a React app as Jamstack as well and it can be really slow and buggy and terrible. And so it depends. The other thing I’m seeing happen that’s really, really funny and interesting is we just keep reinventing PHP over and over and over again as an industry in various ways. So-</p>
<p>Drew: We still have PHP as well. It’s not gone.</p>
<p>Chris: Right? And yet PHP still exists and still works great. And so we’ve got... Like I remember when Next.js came out. There was all these kind of, "And here’s all the things you can do with it." And I was like, "Oh, that’s like PHP," but a decade later. And then my friend Zach Leatherman who built Eleventy which is an amazing static site generator has been experimenting with some compiling in real time on the server stuff with Eleventy.</p>
<p>Chris: So it’s like just in time Jamstack and he even jokes that he’s essentially recreated PHP in node and JavaScript, but it’s slightly different because there’s like a serverless build that happens that then instant deploys it to a CDN and it’s like a little weird. So it’s still a house of cards. You’re just shifting around where those cards live and who’s responsible for them, but yeah, yeah. Jamstack is cool. Jamstack is problematic. It’s also not. It’s awesome. It’s potentially overused both as a term and a technology. Yeah. It’s a whole lot of things and I love it in the same way that I love PHP. It’s great and it has problems and every technology and approach is a series of trade-offs.</p>
<p>Drew: Do you think we’re going through some industrial revolution in web development? What used to be skilled painstaking work from individual arts and is now high volume, high production factory output. All the machines have been brought in and the frameworks and the build tools and have we lost that hand rolled touch?</p>
<p>Chris: Well, I mean, yes, to an extent, but we don’t have to. I mean, that analogy is appropriate in many ways, because a lot of the ways we do things today produce... I like to call them front end pollution in the over-reliance on JavaScript, but also in the very literal sense. We have so many heavy build processes now that they generate more actual literal pollution as well. But I think the counter argument here is with a... I will use farming, right? You could go out and hand mill your wheat with a scyther. I forget what you call those. The crescent shaped tool that you use to chop your wheat, or you could use an oxen drawn machine that will pull that off, or you can use a big tractor.</p>
<p>Chris: And I think there’s a clear argument that at some point, factory farming is this big industrial complex that has lost a little bit of that close to the Earth touch, but I don’t think I necessarily need my farmers to be hand chopping their wheat. That is wildly inefficient for very little benefit. And there’s probably a balance there. And I feel the same thing with what we’re doing here. Some of these tools allow us to do more artisan work faster and more efficiently. And sometimes they just turn it into generating a bunch of garbage and turn it out as fast as possible. And there’s not necessarily a clear cut delineation for where that crossover happens. I think it’s a little fuzzy and gray and like a you know it when you see it kind of thing. Sometimes not always. But yeah, I think it’s a little bit of both. The commercialization of the web is both a really terrible thing and also a really great thing that has allowed folks like myself to have a living working on the platform that I love full time.</p>
<p>Chris: That’s awesome. But it’s also produced a lot of problems and I think that’s true for any technology. There’s good and bad that comes with all of it.</p>
<p>Drew: And maybe sometimes we’re just producing really fat pigs.</p>
<p>Chris: Yeah. I’ve gotten a lot more like, it depends as I’ve gotten older. This stuff used to really, really upset me from a purist standpoint. And I still really hate the fact that we’ve forced our users to endorse such a fragile and easily broken web. The web in general has gotten four to five times faster in the last decade. And the average website has only gotten a hundred milliseconds faster in terms of load time, because we just keep throwing more and more stuff at our users. And we could have a really fast resilient web right now if we wanted one, but we don’t. And part of that is a natural trade off for pushing the capabilities of the web further and further and that’s awesome, but I feel like sometimes we do things just because it’s shiny and new and not because it adds real benefit to folks. So I’d love to see a little bit more balance there.</p>
<p>Drew: Is part of the problem that we’re expecting the web to do too much? I mean, for many years we didn’t really have any great alternatives. So we enhanced and maybe over-stretched the high tech document system to behave like a software application. And now we’ve all got really powerful phones in our pockets, running a range of network connected apps. Is that the appropriate outlook for this functionality that we’re trying to build into websites? Should we just all be building apps for that case and leaving the document based stuff to be on the web?</p>
<p>Chris: I would argue the other direction. I think the bigger problem is... So maybe there are certain things for which I even personally I prefer like a native app over something in the web. But I think having the web do more frees you from app ecosystems and allows you as a team to build a thing and be able to reach more people with it, not have to download an app before you can access the thing you want. That’s a really cool thing. And I would argue that potentially the bigger problem is that browsers can’t keep up with the pace of the thing that we want the web to do. And that’s not a knock on the people behind the standards processes. I would not want to go back to every browser just does their own thing and the hell with it. That was awful to develop for.</p>
<p>Drew: It was, yeah.</p>
<p>Chris: We do have some of those similar problems though, just based on how the standards process works. So sometimes you’ll see Google get frustrated because they have so much in-house development power, get frustrated with other browsers that are part of that process not wanting to go along with something or not moving fast enough. And so they just... Leeroy Jenkins it and just run off and go do whatever they want to do. On the flip side you sometimes see Apple moving very, very slow because they don’t put as much investment into the web as they do other parts of their business, which is hopefully, maybe starting to change a little bit with some of the more recent hires they’ve made. But I think one of the things you run into is just the web tends to move a little slowly sometimes.</p>
<p>Chris: Technology moves fast, but the browsers themselves and the technologies they implement don’t always keep up. And so I don’t believe we demand too much of our browsers. I just think you get this natural ebb and flow where we demand a lot. We build a bunch of libraries to polyfill the things that we want and then when the browser eventually catches up, there’s this really slow, petering off as library usage for that particular stuff drops off.</p>
<p>Chris: Yeah. But I don’t know that I would say we demand too much of the web. Yeah, I don’t know. I actually, I love all the things the web can do. I think it’s really, for me, it’s what’s so exciting about the web. I think my frustration is more just with how slow some of these technologies are to come out, particularly on iOS devices. And I say this as someone who, I love my iPhone, but progressive web apps continue to be a second... They just don’t get as much priority as native apps do on that platform, which is disappointing.</p>
<p>Drew: So looking to the future on that note, what should we, as a development community be working on to fix some of these issues? Where should we be placing our efforts?</p>
<p>Chris: Yeah. So I think there are a few different things. And I think some of the tools we’ve talked about, I don’t think they’ll ever necessarily go away. They might change in form a little bit, but so I already see some cool things on the horizon. One of the things people love about single page apps that we’ve never been able to do with, I call them multistage apps, but they’re really just plain old webpages is like the nice transitions that happen between views where you might like fade in, fade out, or something like that.</p>
<p>Chris: There’s a native API in the works that’s going to make that a lot easier. That’s awesome. There’s also a native API in the works for HTML sanitization. So one of the big things that libraries do for you is they, when you’re rendering HTML from third party data, they have some libraries baked in that will help reduce your risk of cross-site scripting attacks.</p>
<p>Chris: There’s not really a good, just native way to do that, but there’s one in the works that will make that a lot easier. And even if you continue to use state based libraries, that should allow them to strip a bunch of code out and that would be an awesome thing.</p>
<p>Chris: One thing that the native web can’t do yet that would be really cool, is a way to handle DOM dipping so that if you want to build some HTML based on a JavaScript object and then update it as the object changes, it would be really cool if you didn’t have to rely on a library for that. And that there was maybe a performant out of the box way to do that in the browser. I think that would solve a lot of problems. As well as more accessible interactive components. I absolutely love when HTML and CSS can replace something I used to need JavaScript for. Doesn’t need to be as rigorously tested, way more fault tolerant, less likely to break, more performant all around. It’s a net win. And so I’d love to see more of those come to the platform.</p>
<p>Chris: So from a browser native thing there’s that. And then the other big thing I think we’re going to start to see more of is a shift away from client-side libraries and a shift to more pre-compiled stuff. Whether that’s static side generators, something like ASTRO that still uses JavaScript libraries, but pre renders them instead of making the browser do it. But those are the, I think, the big things I’m seeing start to happen and I think we’re going to see more and more of.</p>
<p>Drew: So you saying maybe it’s not all doom and gloom and perhaps we can fix this? There’s a way out?</p>
<p>Chris: No, yeah, I see us emerging from the dark ages slowly. And what I think is going to happen is we’re going to hit a point where much like where today people are like, "Why does everybody still use React?" I can imagine in 7 to 10 years time, we’re going to be like, "Why does anybody..." I’m sorry. Not React. jQuery. "Why does everybody still use jQuery?" We’re going to see the same thing with React and Vue. Like, "Why does everybody still start a project with those?" And there’s going to be some new libraries that are starting to emerge to solve a whole new set of problems that we haven’t even dreamed of today.</p>
<p>Drew: One comment from Twitter that I really identified with was from Amy Pellegrini, who said, "Every time I update something, everything gets broken." Yep. I just think we’ve all been there, haven’t we?</p>
<p>Chris: Yeah. I unfortunately don’t think that will ever fully go away because even in the non-build tool era of jQuery, we used to just load it with a script element. You would run into situations where different versions would be incompatible with each other. And so you’d drop a plug in into your site and it would be like, "Sorry, you’re running jQuery 1.83, and this requires 1.89 or higher because it added this new..." And so there’s always been some version of that. I think it’s a lot more pronounced now because so much of it happens in the command line and spits out all these terrible errors that don’t make sense. But yeah, that unfortunately I don’t think will ever go away. I feel the pain though. That one, it’s a big part of the reason why I try and use as few dependencies as possible.</p>
<p>Drew: Me too. Me too. So I’ve been learning all about the lean web or learning more about the lean web than our conversation. What have you been learning about lately, Chris?</p>
<p>Chris: Yeah. Great question. So I have been going deep on service workers in part because I love their ability to both make the web faster, or even if you’re not building a progressive web app, they’re just really, really cool. One of the things I’ve absolutely loved them for though is they allow me to build a single page app like experience in terms of performance, without all the complexity of having to handle JavaScript routing and stuff. So I can have a multipage app, cache my API calls for a short period of time without having to cache them in memory. And so I’ve been able to do some really cool things with them. And then the other thing I’ve been learning a lot about lately is serverless, which allows me to get the benefits of having some server-side code without having to actually manage a server, which is great.</p>
<p>Chris: And so I went really, really deep on those, put together a couple of courses on both of those topics as well, but they have benefited me immensely in my own work, in particular service workers, which has been amazing. I’m obsessed with them. Recommend them for everybody.</p>
<p>Drew: That’s amazing. And where can people find those courses that you put together on?</p>
<p>Chris: So if you go to vanillajsguides.com, you can dig into those and a whole bunch of other courses as well.</p>
<p>Drew: Amazing. If you dear listener would like to hear more from Chris, you can find his book on the web at leanweb.dev and his developer tips newsletter, which I believe now gets over 12,000 subscribers-</p>
<p>Chris: Yeah. Up a little bit from the last time we chatted.</p>
<p>Drew: Yeah. That’s at gomakethings.com. Chris is on twitter @chrisferdinandi. And you can check out his podcast at podcast.com or wherever you usually get your podcasts from. Thanks for joining us today, Chris. Do you have any parting words?</p>
<p>Chris: No, that was a really great summary, Drew. Thank you so much. You hit all the key links. So thanks so much for having me. This was great.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:12;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:71:"It’s That Time Of The Year (December 2021 Desktop Wallpapers Edition)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:79:"https://smashingmagazine.com/2021/11/desktop-wallpaper-calendars-december-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:79:"https://smashingmagazine.com/2021/11/desktop-wallpaper-calendars-december-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 30 Nov 2021 09:45:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:176:"Let’s welcome December with some new wallpapers! Designed by artists and designers from across the globe, they are available with and without a calendar for the month. Enjoy!";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Cosima Mielke)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:155:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b96c8c2-9305-4a64-aa40-cf22662ea698/dec-21-winter-holidays-preview-opt.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:133698:"<p>Slowly but surely, 2021 is coming to an end. And, well, could there be a better way to celebrate the last few weeks of the year than with some cheerful desktop wallpapers? To get you in the right <strong>mood for December</strong> — and the holiday season, of course — artists and designers from across the globe <a href="https://www.smashingmagazine.com/tag/wallpapers/">once again</a> got their ideas bubbling and created festive and inspiring wallpaper designs for you.</p>

<p>All wallpapers in this post are created with love and come in versions with and without a calendar for <strong>December 2021</strong> — so no matter if you want to count down the days to a deadline (or to Christmas morning, maybe?) or prefer to enjoy your new wallpaper without any distractions, we’ve got you covered. And if you’re up for some extra holiday cheer, you’ll also find some favorites from our wallpapers archives compiled at the end of this post. Happy December!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
</ul>

<div>
<h3>Submit a wallpaper!</h3>
<p>Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>! <a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Join in! →</a></p>
</div>

Winter Holidays
<p>“Enjoy the Christmas and New Year holidays with your loved ones!” — Designed by <a href="https://www.librafire.com">LibraFire</a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/dec-21-winter-holidays-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b96c8c2-9305-4a64-aa40-cf22662ea698/dec-21-winter-holidays-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/dec-21-winter-holidays-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/cal/dec-21-winter-holidays-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/winter-holidays/nocal/dec-21-winter-holidays-nocal-2560x1440.png">2560x1440</a></li>
</ul>

King Of Pop
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/dec-21-king-of-pop-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01fb0beb-dd84-4f27-a981-55b601962490/dec-21-king-of-pop-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/dec-21-king-of-pop-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/cal/dec-21-king-of-pop-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/king-of-pop/nocal/dec-21-king-of-pop-nocal-3840x2160.png">3840x2160</a></li>
</ul>

On To The Next One
<p>“Endings intertwined with new beginnings, challenges we rose to and the ones we weren’t up to, dreams fulfilled and opportunities missed. The year we say goodbye to leaves a bitter-sweet taste, but we’re thankful for the lessons, friendships, and experiences it gave us. We look forward to seeing what the new year has in store, but, whatever comes, we will welcome it with a smile, vigor, and zeal.” — Designed by <a href="https://www.popwebdesign.net/web-development-serbia.html">PopArt Studio</a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/dec-21-on-to-the-next-one-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6c570b3e-baf7-40f8-bd83-2303c896c586/dec-21-on-to-the-next-one-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/dec-21-on-to-the-next-one-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/cal/dec-21-on-to-the-next-one-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/on-to-the-next-one/nocal/dec-21-on-to-the-next-one-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Seville Has A Special Color
<p>“The year is over and we celebrated it in Seville! Happy Christmas and a happy new year!” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela</a> from Spain.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/dec-21-seville-has-a-special-color-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69c26ca2-bb59-4478-a838-1add79aa8402/dec-21-seville-has-a-special-color-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/dec-21-seville-has-a-special-color-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/cal/dec-21-seville-has-a-special-color-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/seville-has-a-special-color/nocal/dec-21-seville-has-a-special-color-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Anonymoose
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/dec-21-anonymoose-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a5bb588-802d-48c2-88e6-5d2beeb6a02b/dec-21-anonymoose-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/dec-21-anonymoose-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/cal/dec-21-anonymoose-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/anonymoose/nocal/dec-21-anonymoose-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Catchiest Christmas Song Ever
<p>Designed by <a href="https://activecollab.com">ActiveCollab</a> from the United States.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/dec-21-catchiest-christmas-song-ever-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/844e1858-a8da-49b7-bf78-c176b214d7fb/dec-21-catchiest-christmas-song-ever-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/dec-21-catchiest-christmas-song-ever-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/cal/dec-21-catchiest-christmas-song-ever-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/catchiest-christmas-song-ever/nocal/dec-21-catchiest-christmas-song-ever-nocal-2560x1440.png">2560x1440</a></li>
</ul>

December In Sunny So Cal
<p>“Oh dear! I mustn’t forget my parasol.” — Designed by <a href="https://www.creativerebelry.com/">Reena Ngauv</a> from Los Angeles.</p>
<a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/dec-21-december-in-sunny-so-cal-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/034b95e8-43e8-47bc-9879-a1d214d75721/dec-21-december-in-sunny-so-cal-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/dec-21-december-in-sunny-so-cal-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/cal/dec-21-december-in-sunny-so-cal-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/cal/dec-21-december-in-sunny-so-cal-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/cal/dec-21-december-in-sunny-so-cal-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/cal/dec-21-december-in-sunny-so-cal-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/nocal/dec-21-december-in-sunny-so-cal-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/nocal/dec-21-december-in-sunny-so-cal-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/nocal/dec-21-december-in-sunny-so-cal-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-21/december-in-sunny-so-cal/nocal/dec-21-december-in-sunny-so-cal-nocal-2560x1440.png">2560x1440</a></li>
</ul>



Oldies But Goodies

<p>The frosty winter weather, the joy of a glass of eggnog by the Christmas tree, or, well, Bathtub Party Day — these are just a few of the things that inspired the community to design a December wallpaper in the more than ten years that we’ve been running this monthly series. Below you’ll find a selection of <strong>December favorites</strong> from our wallpapers archives. Please note that these designs don’t come with a calendar.</p>

<p></p><h3>Dear Moon, Merry Christmas</h3><p></p>
<p></p><p>“Please visit Vladstudio website if you like my works!” — Designed by <a href="https://vlad.studio/">Vlad Gerasimov</a> from Russia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69d1bfe5-28c1-489a-80e7-0e74ec404bad/dec-19-dear-moon-merry-christmas-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6b9bd64-491c-4be4-bb3e-0295fea6f0c6/dec-19-dear-moon-merry-christmas-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6b9bd64-491c-4be4-bb3e-0295fea6f0c6/dec-19-dear-moon-merry-christmas-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1024x600.jpg">1024x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1440x960.jpg">1440x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1600x900.jpg">1600x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-2560x1440.jpg">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-2560x1600.jpg">2560x1600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-2880x1800.jpg">2880x1800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-3072x1920.jpg">3072x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-3840x2160.jpg">3840x2160</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/dear-moon-merry-christmas/nocal/dec-19-dear-moon-merry-christmas-nocal-5120x2880.jpg">5120x2880</a></li>
</ul>

<p></p><h3>Winter Landscape</h3><p></p>
<p></p><p>Designed by <a href="https://www.lalunaloop.be/">Morgane Van Achter</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97853828-c4da-4bf6-b986-6450b0d2cd8f/dec-20-winter-landscape-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/548eb8c6-45f3-43bb-9c44-232521ff27ae/dec-20-winter-landscape-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/548eb8c6-45f3-43bb-9c44-232521ff27ae/dec-20-winter-landscape-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/winter-landscape/nocal/dec-20-winter-landscape-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Happy Holidays</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e16c6728-d3a1-4800-8a6e-e3c45d2512ac/dec-20-happy-holidays-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56b7fbec-60c7-4776-96d0-028c06c5a552/dec-20-happy-holidays-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56b7fbec-60c7-4776-96d0-028c06c5a552/dec-20-happy-holidays-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/happy-holidays/nocal/dec-20-happy-holidays-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Getting Hygge</h3><p></p>
<p></p><p>“There’s no more special time for a fire than in the winter. Cozy blankets, warm beverages, and good company can make all the difference when the sun goes down. We’re all looking forward to generating some hygge this winter, so snuggle up and make some memories.” — Designed by <a href="https://bit.ly/TheHannonGroup">The Hannon Group</a> from Washington D.C.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad2c8c59-c9c4-4153-a57e-8602ff6e09d7/dec-17-getting-hygge-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1145e84f-229d-4f9e-82b6-370c707e695c/dec-17-getting-hygge-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1145e84f-229d-4f9e-82b6-370c707e695c/dec-17-getting-hygge-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/getting-hygge/nocal/dec-17-getting-hygge-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>It’s Christmas</h3><p></p>
<p></p><p>“The holiday season is finally here, which means it’s time to deck the halls, bring out the figgy pudding and embrace all things merry and bright. It’s Christmas!” — Designed by <a href="https://floralfrolic.net/">Divya (DimpuSuchi)</a> from Malaysia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5abd695-cdde-4eb1-a633-f3f8faf84205/dec-20-its-christmas-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72d86b6e-3310-468e-8e70-9fc6460d90f0/dec-20-its-christmas-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72d86b6e-3310-468e-8e70-9fc6460d90f0/dec-20-its-christmas-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1440x1050.jpg">1440x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-20/its-christmas/nocal/dec-20-its-christmas-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Cardinals In Snowfall</h3><p></p>
<p></p><p>“During Christmas season, in the cold, colorless days of winter, Cardinal birds are seen as symbols of faith and warmth! In the part of America I live in, there is snowfall every December. While the snow is falling, I can see gorgeous Cardinals flying in and out of my patio. The intriguing color palette of the bright red of the Cardinals, the white of the flurries and the brown/black of dry twigs and fallen leaves on the snow-laden ground fascinates me a lot, and inspired me to create this quaint and sweet, hand-illustrated surface pattern design as I wait for the snowfall in my town!” — Designed by <a href="https://pineconedream.com/">Gyaneshwari Dave</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/27101977-9a61-41b9-9e80-445f3a8932af/dec-18-cardinals-in-snowfall-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a28051e-b3bc-4eff-a30b-2456c249aed5/dec-18-cardinals-in-snowfall-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a28051e-b3bc-4eff-a30b-2456c249aed5/dec-18-cardinals-in-snowfall-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-640x960.jpg">640x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-768x1024.jpg">768x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/cardinals-in-snowfall/nocal/dec-18-cardinals-in-snowfall-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>The House On The River Drina</h3><p></p>
<p></p><p>“Since we often yearn for a peaceful and quiet place to work, we have found inspiration in the famous house on the River Drina in Bajina Bašta, Serbia. Wouldn’t it be great being in nature, away from the civilization, swaying in the wind and listening to the waves of the river smashing your house, having no neighbors to bother you? Not sure about the Internet, though…” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b63a58fb-92a5-4f9d-81b3-c90e2cfd9b5a/dec-16-the-house-on-the-river-drina-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b8776b3-8fdf-469a-b5b2-591d535d02b6/dec-16-the-house-on-the-river-drina-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b8776b3-8fdf-469a-b5b2-591d535d02b6/dec-16-the-house-on-the-river-drina-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-house-on-the-river-drina/nocal/dec-16-the-house-on-the-river-drina-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Joy To The World</h3><p></p>
<p></p><p>“Joy to the world, all the boys and girls now, joy to the fishes in the deep blue sea, joy to you and me.” — Designed by <a href="https://www.himorgan.com/">Morgan Newnham</a> from Boulder, Colorado.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/542d1894-584a-4537-b3c1-142deda3ab5c/dec-17-joy-to-the-world-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68553142-95b5-47da-9007-e50407f8c5d9/dec-17-joy-to-the-world-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68553142-95b5-47da-9007-e50407f8c5d9/dec-17-joy-to-the-world-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/joy-to-the-world/nocal/dec-17-joy-to-the-world-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Christmas Time!</h3><p></p>
<p></p><p>Designed by <a href="https://www.thomasmore.be/">Sofie Keirsmaekers</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a9988e43-6ee8-414c-8136-ac6939c5182e/dec-13-christmas-time-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf1ce792-3363-4899-9714-fd569b53452b/dec-13-christmas-time-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf1ce792-3363-4899-9714-fd569b53452b/dec-13-christmas-time-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-time-/nocal/dec-13-christmas-time--nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Ice Flowers</h3><p></p>
<p></p><p>“I took some photos during a very frosty and cold week before Christmas.” Designed by <a href="https://kyu-to.deviantart.com">Anca Varsandan</a> from Romania.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f14d58a3-b787-483b-a2e4-a3400d50dfed/january-10-ice-flowers-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b4a5499-4254-4d4f-a460-0f0964721a55/january-10-ice-flowers-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b4a5499-4254-4d4f-a460-0f0964721a55/january-10-ice-flowers-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/101dfe78-547b-4f28-ad00-c3f08302cbe1/january-10-ice-flowers-nocal-1024x768.jpg">1024x768</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33993672-e95d-4729-a836-7af5f941812c/january-10-ice-flowers-nocal-1280x800.jpg">1280x800</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14522cd5-614d-4597-b488-44ffa3e6f3f2/january-10-ice-flowers-nocal-1440x900.jpg">1440x900</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d43a061-dd0c-47f9-af83-a3d7413c719b/january-10-ice-flowers-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f3822fa3-5814-4b90-96bc-ef75191a9243/january-10-ice-flowers-nocal-1920x1200.jpg">1920x1200</a></li>
</ul>



<p></p><h3>Sweet Snowy Tenderness</h3><p></p>
<p></p><p>“You know that warm feeling when you get to spend cold winter days in a snug, homey, relaxed atmosphere? Oh, yes, we love it, too! It is the sentiment we set our hearts on for the holiday season, and this sweet snowy tenderness is for all of us who adore watching the snowfall from our windows. Isn’t it romantic?” — Designed by <a href="https://www.popwebdesign.net/">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/29ad3ce1-0f4e-4c84-a7fd-222e00e8f544/dec-18-sweet-snowy-tenderness-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6179490e-9ece-4078-8a4b-d37c27f546b4/dec-18-sweet-snowy-tenderness-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6179490e-9ece-4078-8a4b-d37c27f546b4/dec-18-sweet-snowy-tenderness-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/sweet-snowy-tenderness/nocal/dec-18-sweet-snowy-tenderness-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Christmas All Around The Globe</h3><p></p>
<p></p><p>“Christmas is celebrated all around the globe — in the winter as well as the summer. From north to south, east to west: Merry Christmas everyone!” — Designed by <a href="https://ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/782b5ebc-ec57-443f-9ab2-56d350ad5d6b/dec-13-christmas-around-the-globe-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2175646-24c0-48f5-b35b-62e772b07959/dec-13-christmas-around-the-globe-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2175646-24c0-48f5-b35b-62e772b07959/dec-13-christmas-around-the-globe-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-640x960.png">640x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1600x1050.png">1600x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-13/christmas-around-the-globe/nocal/dec-13-christmas-around-the-globe-nocal-2880x1800.png">2880x1800</a></li>
</ul>

<p></p><h3>Tongue Stuck On Lamppost</h3><p></p>
<p></p><p>Designed by <a href="https://www.joshcleland.com">Josh Cleland</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8eddae94-833f-43b7-9c6b-8c9c044ab034/december-11-tongue-stuck-on-lamppost-20-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6516be4f-fabe-4082-ac09-2fe769521ee8/december-11-tongue-stuck-on-lamppost-20-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6516be4f-fabe-4082-ac09-2fe769521ee8/december-11-tongue-stuck-on-lamppost-20-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-11/december-11-tongue_stuck_on_lamppost__20-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>All That Belongs To The Past</h3><p></p>
<p></p><p>“Sometimes new beginnings make us revisit our favorite places or people from the past. We don’t visit them often because they remind us of the past but enjoy the brief reunion. Cheers to new beginnings in the new year!” Designed by <a href="https://dorvandavoudi.com">Dorvan Davoudi</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/102edbd6-ebf2-4df9-9218-7d506a069725/jan-16-all-that-belongs-to-the-past-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3260240-ab67-4cc8-b391-6e4a412e8b75/jan-16-all-that-belongs-to-the-past-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3260240-ab67-4cc8-b391-6e4a412e8b75/jan-16-all-that-belongs-to-the-past-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/all-that-belongs-to-the-past/nocal/jan-16-all-that-belongs-to-the-past-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Enchanted Blizzard</h3><p></p>
<p></p><p>“A seemingly forgotten world under the shade of winter glaze hides a moment where architecture meets fashion and change encounters steadiness.” — Designed by <a href="https://www.creitive.com/">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/913ccea9-595b-4aff-9550-0afec57203cc/dec-17-enchanted-blizzard-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21da6af5-5de8-44c2-9a02-d0e17a1425fa/dec-17-enchanted-blizzard-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21da6af5-5de8-44c2-9a02-d0e17a1425fa/dec-17-enchanted-blizzard-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/enchanted-blizzard/nocal/dec-17-enchanted-blizzard-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>’Tis The Season To Be Happy</h3><p></p>
<p></p><p>Designed by <a href="https://www.tazi.com.au">Tazi</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/67e78c4b-25b7-44ee-8b2e-3d74aafbd8aa/dec-17-tis-the-season-to-be-happy-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7117e73a-765f-40da-b2fc-7a969186f21c/dec-17-tis-the-season-to-be-happy-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7117e73a-765f-40da-b2fc-7a969186f21c/dec-17-tis-the-season-to-be-happy-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/tis-the-season-to-be-happy/nocal/dec-17-tis-the-season-to-be-happy-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Christmas Woodland</h3><p></p>
<p></p><p>Designed by <a href="https://melarmstrongdesign.com">Mel Armstrong</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ebce7f3-b902-49e1-8c71-59f7ebffe370/dec-17-christmas-woodland-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ef5c205-d211-4776-ad9e-f69626f25b88/dec-17-christmas-woodland-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ef5c205-d211-4776-ad9e-f69626f25b88/dec-17-christmas-woodland-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-woodland/nocal/dec-17-christmas-woodland-nocal-2560x1440.png">2560x1440</a> </li>
</ul>

<p></p><h3>’Tis The Season (To Drink Eggnog)</h3><p></p>
<p></p><p>“There’s nothing better than a tall glass of Golden Eggnog while sitting by the Christmas tree. Let’s celebrate the only time of year this nectar of the gods graces our lips.” — Designed by <a href="https://fuzzproductions.com">Jonathan Shears</a> from Connecticut, USA.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0b833a42-0e02-46fa-864a-b4e3c36f2374/dec-15-tis-the-season-to-drink-eggnog-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/865c84ef-3e7f-491a-99fa-1cd9977ea871/dec-15-tis-the-season-to-drink-eggnog-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/865c84ef-3e7f-491a-99fa-1cd9977ea871/dec-15-tis-the-season-to-drink-eggnog-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-1440x1080.jpg">1440x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-1680x1260.jpg">1680x1260</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-2048x1536.jpg">2048x1536</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/tis-the-season-to-drink-eggnog/nocal/dec-15-tis-the-season-to-drink-eggnog-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Gifts Lover</h3><p></p>
<p></p><p>Designed by <a href="https://www.doud.be">Elise Vanoorbeek</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/25b69dac-5d0b-4e0a-bf39-b2554ec557db/dec-14-gifts-lover-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c9e03e4-efa6-4fb8-8a0d-69f1edd9479a/dec-14-gifts-lover-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c9e03e4-efa6-4fb8-8a0d-69f1edd9479a/dec-14-gifts-lover-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-14/gifts-lover/nocal/dec-14-gifts-lover-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>



<p></p><h3>Bathtub Party Day</h3><p></p>
<p></p><p>“December 5th is also known as Bathtub Party Day, which is why I wanted to visualize what celebrating this day could look like.” — Designed by <a href="https://www.behance.net/jonasvanhamme">Jonas Vanhamme</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cae906bc-d96d-498c-8598-9201b5c1c0dd/dec-18-bathtub-party-day-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfad32db-a716-4d4a-aeae-98411e78127d/dec-18-bathtub-party-day-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfad32db-a716-4d4a-aeae-98411e78127d/dec-18-bathtub-party-day-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/bathtub-party-day/nocal/dec-18-bathtub-party-day-nocal-2560x1600.png">2560x1600</a></li>
</ul>

<p></p><h3>Christmas Cookies</h3><p></p>
<p></p><p>“Christmas is coming and a great way to share our love is by baking cookies.” — Designed by <a href="https://www.mariakellerac.com">Maria Keller</a> from Mexico.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57f8e478-f6a2-4eeb-bac0-45d8dd01d7cb/dec-17-christmas-cookies-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/251c117b-6e3a-42eb-b274-82af1abf00ed/dec-17-christmas-cookies-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/251c117b-6e3a-42eb-b274-82af1abf00ed/dec-17-christmas-cookies-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-640x1136.png">640x1136</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-750x1334.png">750x1334</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1242x2208.png">1242x2208</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-cookies/nocal/dec-17-christmas-cookies-nocal-2880x1800.png">2880x1800</a></li>
</ul>

<p></p><h3>Robin Bird</h3><p></p>
<p></p><p>“I have chosen this little bird in honor of my grandfather, who passed away. He was fascinated by nature, especially birds. Because of him, I also have a fascination with birds. When I think of winter, I think of the birds, flying around searching for food. And why a robin? Because it is a cute little bird, who is also very recognizable.” — Designed by Engin Seline from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e2f8e71-8f4f-46d5-8115-34ac020a51aa/jan-16-robin-bird-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/212aa4a6-2d5a-4faf-8d1b-37bd6ac7da61/jan-16-robin-bird-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/212aa4a6-2d5a-4faf-8d1b-37bd6ac7da61/jan-16-robin-bird-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/jan-16/robin-bird/nocal/jan-16-robin-bird-nocal-1920x1200.png">1920x1200</a></li>
</ul>

<p></p><h3>’Tis The Season Of Snow</h3><p></p>
<p></p><p>“The tiny flakes of snow have just begun to shower and we know it’s the start of the merry hour! Someone is all set to cram his sleigh with boxes of love as kids wait for their dear Santa to show up! Rightly said, ’tis the season of snow, surprise and lots and lots of fun! Merry Christmas!” — Designed by <a href="https://www.sweans.com/">Sweans Technologies</a> from London.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b34bccc5-d2eb-478f-b0cf-9341a1c20c83/dec-18-tis-the-season-of-snow-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b354ca81-f2bc-4008-a07c-845f9814fa2d/dec-18-tis-the-season-of-snow-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b354ca81-f2bc-4008-a07c-845f9814fa2d/dec-18-tis-the-season-of-snow-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-18/tis-the-season-of-snow/nocal/dec-18-tis-the-season-of-snow-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Happy Birthday Rudyard!</h3><p></p>
<p></p><p>“December 30th is the birthday of Rudyard Kipling, the writer of the Jungle Book. To celebrate, I decided to create a very festive jungle scene with some of the characters from the story.” — Designed by <a href="https://www.safiabegum.com/">Safia Begum</a> from the United Kingdom.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a8139d8-e7d4-4458-a16c-ebc5461f4837/dec-17-happy-birthday-rudyard-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9668f6ea-b5ce-405c-93f3-9266afd8a8c3/dec-17-happy-birthday-rudyard-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9668f6ea-b5ce-405c-93f3-9266afd8a8c3/dec-17-happy-birthday-rudyard-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-800x450.png">800x450</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-1440x810.png">1440x810</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-1600x900.png">1600x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-1680x945.png">1680x945</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/happy-birthday-rudyard/nocal/dec-17-happy-birthday-rudyard-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Christmas Owl</h3><p></p>
<p></p><p>“Christmas waves a magic wand over this world, and behold, everything is softer and more beautiful.” — Designed by <a href="https://www.0effortthemes.com/">Suman Sil</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0f4c81c4-baa1-4ce1-9757-0d5d6e485eb2/dec-17-christmas-owl-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b68a038c-82d8-4c8d-acaa-1038bccaf8e0/dec-17-christmas-owl-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b68a038c-82d8-4c8d-acaa-1038bccaf8e0/dec-17-christmas-owl-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-17/christmas-owl/nocal/dec-17-christmas-owl-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Trailer Santa</h3><p></p>
<p></p><p>“A mid-century modern Christmas scene outside the norm of snowflakes and winter landscapes.” Designed by <a href="https://www.madebyhoundstooth.com">Houndstooth</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/40a7c173-9928-4a55-bc4c-4d48f339b3da/december-12-trailer-santa-21-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d3703c2-593a-4ff4-a08a-52cb237ddb64/december-12-trailer-santa-21-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d3703c2-593a-4ff4-a08a-52cb237ddb64/december-12-trailer-santa-21-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/december-12/december-12-trailer_santa__21-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-12/december-12-trailer_santa__21-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-12/december-12-trailer_santa__21-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-12/december-12-trailer_santa__21-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-12/december-12-trailer_santa__21-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/december-12/december-12-trailer_santa__21-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>The Matterhorn</h3><p></p>
<p></p><p>“Christmas is always such a magical time of year so we created this wallpaper to blend the majestry of the mountains with a little bit of magic.” — Designed by <a href="https://torattire.com/">Dominic Leonard</a> from the United Kingdom.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94e4bf3b-1ef4-4679-80ab-00c831c2be80/dec-16-the-matterhorn-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/25937464-9e3c-4bf5-9fc3-611b54699aa6/dec-16-the-matterhorn-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/25937464-9e3c-4bf5-9fc3-611b54699aa6/dec-16-the-matterhorn-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/the-matterhorn/nocal/dec-16-the-matterhorn-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Christmas Selfie</h3><p></p>
<p></p><p>“In this year of selfies, I’ve imagined Santa Claus doing the same.” — Designed by <a href="https://www.elacarta.com">Emanuela Carta</a> from Italy.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3eac541a-4c0e-45a9-ab06-7ec0fee72084/dec-16-christmas-selfie-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3df98b9f-310f-4a63-b885-6b97ba4edccf/dec-16-christmas-selfie-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3df98b9f-310f-4a63-b885-6b97ba4edccf/dec-16-christmas-selfie-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas-selfie/nocal/dec-16-christmas-selfie-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Christmas With The Digies</h3><p></p>
<p></p><p>“Merry Christmas from The Digies at digitalprofile.io.” — Designed by <a href="https://dribbble.com/rachieface">Rachel Sulek</a> from Wales.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1abdb11e-08f7-4c54-b7fc-d92405e39c84/dec-15-christmas-with-the-digies-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3db2455b-e270-493a-a246-e8d39370c66c/dec-15-christmas-with-the-digies-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3db2455b-e270-493a-a246-e8d39370c66c/dec-15-christmas-with-the-digies-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-15/christmas-with-the-digies/nocal/dec-15-christmas-with-the-digies-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Christmas</h3><p></p>
<p></p><p>“A simple wallpaper for the cold month December. Nothing more, nothing less.” — Designed by <a href="https://www.weareimd.be/">Frédéric Hermans</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e976f20f-c75a-4e9d-8486-d855007af87d/dec-16-christmas-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8d6e56b-1dac-4baa-a21f-64c9433f4785/dec-16-christmas-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8d6e56b-1dac-4baa-a21f-64c9433f4785/dec-16-christmas-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas/nocal/dec-16-christmas-nocal-640x1134.png">640x1134</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas/nocal/dec-16-christmas-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas/nocal/dec-16-christmas-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-16/christmas/nocal/dec-16-christmas-nocal-1920x1080.png">1920x1080</a></li>
</ul>

<p></p><h3>Christmas Mood</h3><p></p>
<p></p><p>Designed by <a href="https://masterbundles.com/">MasterBundles</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/142a79fe-62fb-48e2-b3ad-3b770e5146aa/dec-19-christmas-mood-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ceda106a-2a50-4b83-a748-77266bf3f89f/dec-19-christmas-mood-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ceda106a-2a50-4b83-a748-77266bf3f89f/dec-19-christmas-mood-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1440x1050.jpg">1440x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/dec-19/christmas-mood/nocal/dec-19-christmas-mood-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:13;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"3D CSS Flippy Snaps With React And GreenSock";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:73:"https://smashingmagazine.com/2021/11/3d-css-flippy-snaps-react-greensock/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:73:"https://smashingmagazine.com/2021/11/3d-css-flippy-snaps-react-greensock/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 29 Nov 2021 12:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:372:"One of Jhey’s main mantras is to make learning fun.  In this article, he shows you ways to level up your skills by bringing your ideas to life, and not forgetting that [you can be playful with code](https://www.smashingmagazine.com/2020/11/playfulness-code-supercharge-fun-learning/). With that mindset, every idea is bound to become an opportunity to try something new.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Jhey Tompkins)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:156:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a865f227-d5a1-4a63-a889-288a84fa2bce/3d-css-flippy-snaps-react-greensock.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:23171:"<p>Naming things is hard, right? Well, “Flippy Snaps” was the best thing I could come up with. 😂 I saw an effect like this on TV one evening and made a note to myself to make something similar.</p>
<p>Although this isn’t something I’d look to drop on a website any time soon, it’s a neat little challenge to make. It fits in with my whole stance on “<a href="https://www.smashingmagazine.com/2020/11/playfulness-code-supercharge-fun-learning/">Playfulness in Code</a>” to learn. Anyway, a few days later, I sat down at the keyboard, and a couple of hours later I had this:</p>
<blockquote><p>3D CSS Flippy Snaps ✨<br /><br />Tap to flip for another image 👇<br /><br />⚒️ <a href="https://twitter.com/reactjs?ref_src=twsrc%5Etfw">@reactjs</a> &amp;&amp; <a href="https://twitter.com/greensock?ref_src=twsrc%5Etfw">@greensock</a> <br />👉 <a href="https://t.co/Na14z40tHE">https://t.co/Na14z40tHE</a> via <a href="https://twitter.com/CodePen?ref_src=twsrc%5Etfw">@CodePen</a> <a href="https://t.co/nz6pdQGpmd">pic.twitter.com/nz6pdQGpmd</a></p>— Jhey 🐻🛠️✨ (@jh3yy) <a href="https://twitter.com/jh3yy/status/1457830342413455369?ref_src=twsrc%5Etfw">November 8, 2021</a></blockquote>

<p>My final demo is a React app, but we don’t need to dig into using React to explain the mechanics of making this work. We will create the React app once we’ve established how to make things work.</p>
<p><strong>Note</strong>: <em>Before we get started. It’s worth noting that the performance of this demo is affected by the grid size and the demos are best viewed in Chromium-based browsers.</em></p>
<p>Let’s start by creating a grid. Let’s say we want a 10 by 10 grid. That’s 100 cells (This is why React is handy for something like this). Each cell is going to consist of an element that contains the front and back for a flippable card.</p>
<pre><code>&lt;div class="flippy-snap"&gt;
  &lt;!-- 100 of these --&gt;
  &lt;div class="flippy-snap__card flippy-card"&gt;
    &lt;div class="flippy-card__front&gt;&lt;/div&gt;
    &lt;div class="flippy-card__rear&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<p>The styles for our grid are quite straightforward. We can use <code>display: grid</code> and use a custom property for the grid size. Here we are defaulting to <code>10</code>.</p>
<pre><code>.flippy-snap {
  display: grid;
  grid-gap: 1px;
  grid-template-columns: repeat(var(--grid-size, 10), 1fr);
  grid-template-rows: repeat(var(--grid-size, 10), 1fr);
}</code></pre>

<p>We won’t use <code>grid-gap</code> in the final demo, but, it’s good for seeing the cells easier whilst developing.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/porXNzB">1. Creating a Grid</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>Next, we need to style the sides of our cards and display images. We can do this by leveraging inline CSS custom properties. Let’s start by updating the markup. We need each card to know its <code>x</code> and <code>y</code> position in the grid.</p>
<pre><code>&lt;div class="flippy-snap"&gt;
  &lt;div class="flippy-snap__card flippy-card" style="--x: 0; --y: 0;"&gt;
    &lt;div class="flippy-card__front"&gt;&lt;/div&gt;
    &lt;div class="flippy-card__rear"&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="flippy-snap__card flippy-card" style="--x: 1; --y: 0;"&gt;
    &lt;div class="flippy-card__front"&gt;&lt;/div&gt;
    &lt;div class="flippy-card__rear"&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- Other cards --&gt;
&lt;/div&gt;</code></pre>

<p>For the demo, I'm using <code>Pug</code> to generate this for me. You can see the compiled HTML by clicking “View Compiled HTML” in the demo.</p>
<pre><code>- const GRID_SIZE = 10
- const COUNT = Math.pow(GRID_SIZE, 2)
.flippy-snap
  - for(let f = 0; f &lt; COUNT; f++)
    - const x = f % GRID_SIZE  
    - const y = Math.floor(f / GRID_SIZE)
    .flippy-snap__card.flippy-card(style=`--x: ${x}; --y: ${y};`)
      .flippy-card__front
      .flippy-card__rear</code></pre>

<p>Then we need some styles. </p>
<pre><code>.flippy-card {
  --current-image: url("https://random-image.com/768");
  --next-image: url("https://random-image.com/124");
  height: 100%;
  width: 100%;
  position: relative;
}
.flippy-card__front,
.flippy-card__rear {
  position: absolute;
  height: 100%;
  width: 100%;
  backface-visibility: hidden;
  background-image: var(--current-image);
  background-position: calc(var(--x, 0) * -100%) calc(var(--y, 0) * -100%);
  background-size: calc(var(--grid-size, 10) * 100%);
}
.flippy-card__rear {
  background-image: var(--next-image);
  transform: rotateY(180deg) rotate(180deg);
}</code></pre>

<p>The rear of the card gets its position using a combination of rotations via <code>transform</code>. But, the interesting part is how we show the image part for each card. In this demo, we are using a custom property to define the URLs for two images. And then we set those as the <code>background-image</code> for each card face.</p>
<p>But the trick is how we define the <code>background-size</code> and <code>background-position</code>. Using the custom properties <code>--x</code> and <code>--y</code> we multiply the value by <code>-100%</code>. And then we set the <code>background-size</code> to <code>--grid-size</code> multiplied by <code>100%</code>. This gives displays the correct part of the image for a given card.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/gOxNLPz">2. Adding an Image</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>You may have noticed that we had <code>--current-image</code> and <code>--next-image</code>. But, currently, there is no way to see the next image. For that, we need a way to flip our cards. We can use another custom property for this.</p>
<p>Let’s introduce a <code>--count</code> property and set a <code>transform</code> for our cards:</p>
<pre><code>.flippy-snap {
  --count: 0;
  perspective: 50vmin;
}
.flippy-card {
  transform: rotateX(calc(var(--count) * -180deg));
  transition: transform 0.25s;
  transform-style: preserve-3d;
}</code></pre>

<p>We can set the <code>--count</code> property on the containing element. Scoping means all the cards can pick up that value and use it to <code>transform</code> their rotation on the x-axis. We also need to set <code>transform-style: preserve-3d</code> so that we see the back of the cards. Setting a <code>perspective</code> gives us that 3D perspective.</p>
<p>This demo lets you update the <code>--count</code> property value so you can see the effect it has.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/LYjKbZW">3. Turning Cards</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>At this point, you could wrap it up there and set a simple click handler that increments <code>--count</code> by one on each click.</p>
<pre><code>const SNAP = document.querySelector('.flippy-snap')
let count = 0
const UPDATE = () =&gt; SNAP.style.setProperty('--count', count++)
SNAP.addEventListener('click', UPDATE)</code></pre>

<p>Remove the <code>grid-gap</code> and you’d get this. Click the snap to flip it.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/eYEwBdN">4. Boring Flips</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>Now we have the basic mechanics worked out, it’s time to turn this into a React app. There’s a bit to break down here.</p>
<pre><code>const App = () =&gt; {
  const [snaps, setSnaps] = useState([])
  const [disabled, setDisabled] = useState(true)
  const [gridSize, setGridSize] = useState(9)
  const snapRef = useRef(null)

  const grabPic = async () =&gt; {
    const pic = await fetch('https://source.unsplash.com/random/1000x1000')
    return pic.url
  }

  useEffect(() =&gt; {
    const setup = async () =&gt; {
      const url = await grabPic()
      const nextUrl = await grabPic()
      setSnaps([url, nextUrl])
      setDisabled(false)
    }
    setup()
  }, [])

  const setNewImage = async count =&gt; {
    const newSnap = await grabPic()
    setSnaps(
      count.current % 2 !== 0 ? [newSnap, snaps[1]] : [snaps[0], newSnap]
    )
    setDisabled(false)
  }

  const onFlip = async count =&gt; {
    setDisabled(true)
    setNewImage(count)
  }

  if (snaps.length !== 2) return &lt;h1 className="loader"&gt;Loading...&lt;/h1&gt;

  return (
    &lt;FlippySnap
      gridSize={gridSize}
      disabled={disabled}
      snaps={snaps}
      onFlip={onFlip}
      snapRef={snapRef}
    /&gt;
  )
}</code></pre>

<p>Our <code>App</code> component handles grabbing images and passing them to our <code>FlippySnap</code> component. That’s the bulk of what’s happening here. For this demo, we’re grabbing images from <a href="https://source.unsplash.com">Unsplash</a>.</p>
<pre><code>const grabPic = async () =&gt; {
  const pic = await fetch('https://source.unsplash.com/random/1000x1000')
  return pic.url
}

// Initial effect grabs two snaps to be used by FlippySnap
useEffect(() =&gt; {
  const setup = async () =&gt; {
    const url = await grabPic()
    const nextUrl = await grabPic()
    setSnaps([url, nextUrl])
    setDisabled(false)
  }
  setup()
}, [])</code></pre>

<p>If there aren’t two snaps to show, then we show a “Loading...” message.</p>
<pre><code>if (snaps.length !== 2) return &lt;h1 className="loader"&gt;Loading...&lt;/h1&gt;</code></pre>

<p>If we are grabbing a new image, we need to disable <code>FlippySnap</code> so we can’t spam-click it.</p>
<pre><code>&lt;FlippySnap
  gridSize={gridSize}
  disabled={disabled} // Toggle a "disabled" prop to stop spam clicks
  snaps={snaps}
  onFlip={onFlip}
  snapRef={snapRef}
/&gt;</code></pre>

<p>We’re letting <code>App</code> dictate the snaps that get displayed by <code>FlippySnap</code> and in which order. On each flip, we grab a new image, and depending on how many times we’ve flipped, we set the correct snaps. The alternative would be to set the snaps and let the component figure out the order.</p>
<pre><code>const setNewImage = async count =&gt; {
  const newSnap = await grabPic() // Grab the snap
  setSnaps(
    count.current % 2 !== 0 ? [newSnap, snaps[1]] : [snaps[0], newSnap]
  ) // Set the snaps based on the current "count" which we get from FlippySnap
  setDisabled(false) // Enable clicks again
}

const onFlip = async count =&gt; {
  setDisabled(true) // Disable so we can't spam click
  setNewImage(count) // Grab a new snap to display
}</code></pre>

<p>How might <code>FlippySnap</code> look? There isn’t much to it at all!</p>
<pre><code>const FlippySnap = ({ disabled, gridSize, onFlip, snaps }) =&gt; {
  const CELL_COUNT = Math.pow(gridSize, 2)
  const count = useRef(0)

  const flip = e =&gt; {
    if (disabled) return
    count.current = count.current + 1
    if (onFlip) onFlip(count)
  }

  return (
    &lt;button
      className="flippy-snap"
      ref={containerRef}
      style={{
        '--grid-size': gridSize,
        '--count': count.current,
        '--current-image': `url('${snaps[0]}')`,
        '--next-image': `url('${snaps[1]}')`,
      }}
      onClick={flip}&gt;
      {new Array(CELL_COUNT).fill().map((cell, index) =&gt; {
        const x = index % gridSize
        const y = Math.floor(index / gridSize)
        return (
          &lt;span
            key={index}
            className="flippy-card"
            style={{
              '--x': x,
              '--y': y,
            }}&gt;
            &lt;span className="flippy-card__front"&gt;&lt;/span&gt;
            &lt;span className="flippy-card__rear"&gt;&lt;/span&gt;
          &lt;/span&gt;
        )
      })}
    &lt;/button&gt;
  )
}</code></pre>

<p>The component handles rendering all the cards and setting the inline custom properties. The <code>onClick</code> handler for the container increments the <code>count</code>. It also triggers the <code>onFlip</code> callback. If the state is currently <code>disabled</code>, it does nothing. That flip of the <code>disabled</code> state and grabbing a new snap triggers the flip when the component re-renders.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/wvqLdGY">5. React Foundation</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>We have a React component that will now flip through images for as long as we want to keep requesting new ones. But, that flip transition is a bit boring. To spice it up, we’re going to make use of <a href="https://greensock.com">GreenSock</a> and its utilities. In particular, the “<a href="https://greensock.com/docs/v3/GSAP/UtilityMethods/distribute">distribute</a>” utility. This will allow us to distribute the delay of flipping our cards in a grid-like burst from wherever we click. To do this, we’re going to use GreenSock to animate the <code>--count</code> value on each card.</p>
<p>It’s worth noting that we have a choice here. We could opt to apply the styles with GreenSock. Instead of animating the <code>--count</code> property value, we could animate <code>rotateX</code>. We could do this based on the <code>count</code> ref we have. And this also goes for any other things we choose to animate with GreenSock in this article. It’s down to preference and use case. You may feel that updating the custom property value makes sense. The benefit being that you don’t need to update any JavaScript to get a different styled behavior. We could change the CSS to use <code>rotateY</code> for example.</p>
<p>Our updated <code>flip</code> function could look like this:</p>
<div>
<pre><code>const flip = e =&gt; {
  if (disabled) return
  const x = parseInt(e.target.parentNode.getAttribute('data-snap-x'), 10)
  const y = parseInt(e.target.parentNode.getAttribute('data-snap-y'), 10)
  count.current = count.current + 1
  gsap.to(containerRef.current.querySelectorAll('.flippy-card'), {
    '--count': count.current,
    delay: gsap.utils.distribute({
      from: [x / gridSize, y / gridSize],
      amount: gridSize / 20,
      base: 0,
      grid: [gridSize, gridSize],
      ease: 'power1.inOut',
    }),
    duration: 0.2,
    onComplete: () =&gt; {
      // At this point update the images
      if (onFlip) onFlip(count)
    },
  })
}</code></pre>
</div>

<p>Note how we’re getting an <code>x</code> and <code>y</code> value by reading attributes of the clicked card. For this demo, we’ve opted for adding some <code>data</code> attributes to each card. These attributes communicate a card's position in the grid. We’re also using a new <code>ref</code> called <code>containerRef</code>. This is so we reference only the cards for a <code>FlippySnap</code> instance when using GreenSock.</p>
<pre><code>{new Array(CELL_COUNT).fill().map((cell, index) =&gt; {
  const x = index % gridSize
  const y = Math.floor(index / gridSize)
  return (
    &lt;span
      className="flippy-card"
      data-snap-x={x}
      data-snap-y={y}
      style={{
        '--x': x,
        '--y': y,
      }}&gt;
      &lt;span className="flippy-card__front"&gt;&lt;/span&gt;
      &lt;span className="flippy-card__rear"&gt;&lt;/span&gt;
    &lt;/span&gt;
  )
})}</code></pre>

<p>Once we get those <code>x</code> and <code>y</code> values, we can make use of them in our animation. Using <code>gsap.to</code> we want to animate the <code>--count</code> custom property for every <code>.flippy-card</code> that’s a child of <code>containerRef</code>.</p>
<p>To distribute the delay from where we click, we set the value of <code>delay</code> to use <code>gsap.utils.distribute</code>. The <code>from</code> value of the <code>distribute</code> function takes an Array containing ratios along the x and y axis. To get this, we divide <code>x</code> and <code>y</code> by <code>gridSize</code>. The <code>base</code> value is the initial value. For this, we want <code>0</code> delay on the card we click. The <code>amount</code> is the largest value. We've gone for <code>gridSize / 20</code> but you could experiment with different values. Something based on the <code>gridSize</code> is a good idea though. The <code>grid</code> value tells GreenSock the grid size to use when calculating distribution. Last but not least, the <code>ease</code> defines the ease of the <code>delay</code> distribution.</p>
<pre><code>gsap.to(containerRef.current.querySelectorAll('.flippy-card'), {
  '--count': count.current,
  delay: gsap.utils.distribute({
    from: [x / gridSize, y / gridSize],
    amount: gridSize / 20,
    base: 0,
    grid: [gridSize, gridSize],
    ease: 'power1.inOut',
  }),
  duration: 0.2,
  onComplete: () =&gt; {
    // At this point update the images
    if (onFlip) onFlip(count)
  },
})</code></pre>

<p>As for the rest of the animation, we are using a flip duration of <code>0.2</code> seconds. And we make use of <code>onComplete</code> to invoke our callback. We pass the flip <code>count</code> to the callback so it can use this to determine snap order. Things like the duration of the flip could get configured by passing in different <code>props</code> if we wished.</p>
<p>Putting it all together gives us this:</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/VwzJbpM">6. Distributed Flips with GSAP</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>Those that like to push things a bit might have noticed that we can still “spam” click the snap. And that’s because we don’t disable <code>FlippySnap</code> until GreenSock has completed. To fix this, we can use an internal ref that we toggle at the start and end of using GreenSock.</p>
<div>
<pre><code>const flipping = useRef(false) // New ref to track the flipping state

const flip = e =&gt; {
  if (disabled || flipping.current) return
  const x = parseInt(e.target.parentNode.getAttribute('data-snap-x'), 10)
  const y = parseInt(e.target.parentNode.getAttribute('data-snap-y'), 10)
  count.current = count.current + 1
  gsap.to(containerRef.current.querySelectorAll('.flippy-card'), {
    '--count': count.current,
    delay: gsap.utils.distribute({
      from: [x / gridSize, y / gridSize],
      amount: gridSize / 20,
      base: 0,
      grid: [gridSize, gridSize],
      ease: 'power1.inOut',
    }),
    duration: 0.2,
    onStart: () =&gt; {
      flipping.current = true
    },
    onComplete: () =&gt; {
      // At this point update the images
      flipping.current = false
      if (onFlip) onFlip(count)
    },
  })
}</code></pre>
</div>

<p>And now we can no longer spam click our <code>FlippySnap</code>!</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/jOLjmXE">7. No Spam Clicks</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>Now it’s time for some extra touches. At the moment, there’s no visual sign that we can click our <code>FlippySnap</code>. What if when we hover, the cards raise towards us? We could use <code>onPointerOver</code> and use the “distribute” utility again.</p>
<pre><code>const indicate = e =&gt; {
  const x = parseInt(e.currentTarget.getAttribute('data-snap-x'), 10)
  const y = parseInt(e.currentTarget.getAttribute('data-snap-y'), 10)
  gsap.to(containerRef.current.querySelectorAll('.flippy-card'), {
    '--hovered': gsap.utils.distribute({
      from: [x / gridSize, y / gridSize],
      base: 0,
      amount: 1,
      grid: [gridSize, gridSize],
      ease: 'power1.inOut'
    }),
    duration: 0.1,
  })
}</code></pre>

<p>Here, we are setting a new custom property on each card named <code>--hovered</code>. This is set to a value from <code>0</code> to <code>1</code>. Then within our CSS, we are going to update our card styles to watch for the value.</p>
<pre><code>.flippy-card {
  transform: translate3d(0, 0, calc((1 - (var(--hovered, 1))) * 5vmin))
             rotateX(calc(var(--count) * -180deg));
}</code></pre>

<p>Here we are saying that a card will move on the z-axis at most <code>5vmin</code>.</p>
<p>We then apply this to each card using the <code>onPointerOver</code> prop.</p>
<pre><code>{new Array(CELL_COUNT).fill().map((cell, index) =&gt; {
  const x = index % gridSize
  const y = Math.floor(index / gridSize)
  return (
    &lt;span
      onPointerOver={indicate}
      className="flippy-card"
      data-snap-x={x}
      data-snap-y={y}
      style={{
        '--x': x,
          '--y': y,
      }}&gt;
      &lt;span className="flippy-card__front"&gt;&lt;/span&gt;
      &lt;span className="flippy-card__rear"&gt;&lt;/span&gt;
    &lt;/span&gt;
  )
})}</code></pre>

<p>And when our pointer leaves our <code>FlippySnap</code> we want to reset our card positions.</p>
<pre><code>
const reset = () =&gt; {
  gsap.to(containerRef.current.querySelectorAll('.flippy-card'), {
    '--hovered': 1,
    duration: 0.1,
  })
}</code></pre>

<p>And we can apply this with the <code>onPointerLeave</code> prop.</p>
<pre><code>&lt;button
  className="flippy-snap"
  ref={containerRef}
  onPointerLeave={reset}
  style={{
    '--grid-size': gridSize,
    '--count': count.current,
    '--current-image': `url('${snaps[0]}')`,
    '--next-image': `url('${snaps[1]}')`,
  }}
  onClick={flip}&gt;</code></pre>

<p>Put that all together and we get something like this. Try moving your pointer over it.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/wvqLdZL">8. Visual Inidication with Raised Cards</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p>What next? How about a loading indicator so we know when our <code>App</code> is grabbing the next image? We can render a loading spinner when our <code>FlippySnap</code> is <code>disabled</code>.</p>
<pre><code>{disabled &amp;&amp; &lt;span className='flippy-snap__loader'&gt;&lt;/span&gt;}</code></pre>

<p>He styles for which could make a rotating circle.</p>
<pre><code>.flippy-snap__loader {
  border-radius: 50%;
  border: 6px solid #fff;
  border-left-color: #000;
  border-right-color: #000;
  position: absolute;
  right: 10%;
  bottom: 10%;
  height: 8%;
  width: 8%;
  transform: translate3d(0, 0, 5vmin) rotate(0deg);
  animation: spin 1s infinite;
}
@keyframes spin {
  to {
    transform: translate3d(0, 0, 5vmin) rotate(360deg);
  }
}</code></pre>

<p>And this gives us a loading indicator when grabbing a new image.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/qBXzmzx">9. Add Loading Indicator</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
That’s it!
<p>That’s how we can create a <code>FlippySnap</code> with React and GreenSock. It’s fun to make things that we may not create on a day-to-day basis. Demos like this can pose different challenges and can level up your problem-solving game.</p>
<p>I took it a little further and added a slight parallax effect along with some audio. You can also configure the grid size! (Big grids affect performance though.)</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/QWMXgLb">3D CSS Flippy Snaps v2 (React &amp;&amp; GSAP)</a> by <a href="https://codepen.io/jh3y">JHEY</a></p>
<p><em>It’s worth noting that this demo works best in Chromium-based browsers.</em></p>
<p>So, where would you take it next? I’d like to see if I can recreate it with Three.js next. That would address the performance. 😅 </p>
<p>Stay Awesome!  ʕ•ᴥ•ʔ</p>



";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:14;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"How To Maintain A Large Next.js Application";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:71:"https://smashingmagazine.com/2021/11/maintain-large-nextjs-application/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:71:"https://smashingmagazine.com/2021/11/maintain-large-nextjs-application/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 26 Nov 2021 12:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:213:"In this article, Nirmalya discusses some of the complex problems that he faced while building and maintaining large Next.js applications. He always explains how these problems can be solved by using various tools.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:43:"hello@smashingmagazine.com (Nirmalya Ghosh)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:154:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d36d3a50-0f3f-402e-9ceb-8164b41065bc/maintain-large-nextjs-application.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:16773:"<p>Maintaining a large application is always a difficult task. It might have outdated dependencies which can cause maintainability issues. It can also have tests that are flaky and don’t inspire any confidence. There can also be issues with large JavaScript and CSS bundles causing the application to provide a non-optimal user experience for the end-users.</p>
<p>However, there are a few ways in which you can make a large code-base easy to maintain. In this article, we will discuss a few of those techniques as well as some of the things I wish I had known earlier to help manage large Next.js applications.</p>
<p><strong>Note</strong>: <em>While this article is specific to Next.js, some of the points will also work for a wide variety of front-end applications.</em></p>
Use TypeScript
<p>TypeScript is a strongly typed programming language which means that it enforces certain strictness while intermixing different types of data. According to <a href="https://insights.stackoverflow.com/survey/2021">StackOverflow Developer Survey 2021</a>, <a href="https://www.typescriptlang.org/">TypeScript</a> is one of the languages that developers want to work with the most. </p>
<p>Using a strongly typed language like TypeScript will help a lot when working with a large codebase. It will help you understand if there is a possibility that your application will break when there is a change. It is not guaranteed that TypeScript will always complain when there is a chance of breakage. However, most of the time, TypeScript will help you <strong>eliminate bugs even before you build your application</strong>. In certain cases, the build will fail if there are type mismatches in your code as Next.js checks for type definition during build time.</p>
<p>From <a href="https://nextjs.org/docs/basic-features/typescript">the Next.js docs</a>:</p>
<blockquote>“By default, Next.js will do type checking as part of the next build. We recommend using code editor type checking during development.”</blockquote>

<p>Note that <code>next build</code> is the script that creates an optimized production build of your Next.js application. From my personal experience, it helped me a lot when I was trying to <a href="https://nextjs.org/blog/next-11#upgrade-guide">update Next.js to version 11</a> for one of my applications. As a part of that update, I also decided to update a few other packages. Because of TypeScript and VSCode, I was able to figure out when those breaking changes even before I had built the application.</p>
Use A Mono-Repo Structure Using Lerna Or Nx
<p>Imagine that you are building a component library along with your main Next.js application. You might want to keep the library in a separate repository to add new components, build and release them as a package. This seems clean and works fine when you want to work in the library. But when you want to integrate the library in your Next.js application, <strong>the development experience will suffer</strong>.</p>
<p>This is because when you integrate the component library with your Next.js application, you might have to go back into the library’s repository, make changes, release the updates and then install the new version in your Next.js application. Only after that, the new changes from the component library will start reflecting in the Next.js application. Imagine your whole team doing this multiple times. The amount of time spent on building and releasing the component library separately will add up to a huge chunk.</p>
<p>This problem can be resolved if you <strong>use a mono-repo structure where your component library resides with your Next.js application</strong>. In this case, you can simply update your component library and it will immediately reflect in your Next.js application. There is no need for a separate build and release of your component library.</p>
<p>You can use a package like <a href="https://www.npmjs.com/package/next-transpile-modules">next-transpile-modules</a> so that you don’t even need to build your component library before your Next.js application can consume it. However, if you are planning to release your component library as an npm package, you might need to have a build step.</p>
<p>For managing a mono-repo, you can use tools like <a href="https://lerna.js.org/">Lerna</a>, <a href="https://nx.dev/">Nx</a>, <a href="https://rushjs.io/">Rush</a>, <a href="https://turborepo.com/">Turborepo</a>, <a href="https://classic.yarnpkg.com/en/docs/workspaces/">yarn workspaces</a>, or <a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces">npm workspaces</a>. I liked using Lerna together with yarn workspaces when I needed to configure my build pipeline. If you prefer something which will automate a bunch of things via CLI, you can take a look at Nx. I feel that all of them are good but solve slightly different problems.</p>
Use Code Generators Like Hygen To Generate Boilerplate Code
<p>When a lot of developers start contributing to a large code-base, there is a good chance that there will be a lot of duplicate code. This happens mainly because there is a need to build a page, component, or utility function which is similar to an already existing one with slight modifications.</p>
<p>You can think of <strong>writing unit test cases</strong> for your components or utility functions. You might want to copy the boilerplate code as much as possible and do certain modifications as per the new file. However, this adds a lot of code consisting of bad variable naming in your code-base. This can be reduced by a proper code-review process. However, there is a better way to reduce this by automating the generation of the boilerplate code.</p>
<p>Unless you are using <a href="https://nx.dev/latest/react/getting-started/nx-cli">Nx</a>, you will need to have a way in which you can automate a lot of code generation. I have used <a href="https://www.hygen.io/">Hygen</a> to generate the boilerplate code for Redux, React components, and utility functions. You can check out the <a href="https://www.hygen.io/docs/quick-start">documentation</a> to get started with Hygen. They also have <a href="https://www.hygen.io/docs/redux">a dedicated section</a> for generating Redux boilerplate. You can also use <a href="https://redux-toolkit.js.org/">Redux Toolkit</a> to reduce the boilerplate code necessary for your Redux applications. We will discuss this package next.</p>
Use A Well-Established Pattern Like Redux With Lesser Boilerplate Via Redux Toolkit
<p>Many developers will argue that <a href="https://redux.js.org/">Redux</a> increases the complexity of the code-base or <a href="https://reactjs.org/docs/context.html">React Context</a> is much easier to maintain. I think that it depends mostly on the type of application that you are building as well as the expertise of the whole development team. You can choose whatever state management solution your team is most comfortable with, but try to choose one that doesn’t need to have a lot of boilerplate.</p>
<p>In this article, I’m mentioning Redux because it is still <a href="https://www.npmtrends.com/mobx-vs-redux-vs-zustand-vs-xstate">the most popular state management solution</a> out there according to npm trends. In the case of Redux, you can reduce a lot of boilerplate code by using <a href="https://redux-toolkit.js.org/">Redux Toolkit</a>. This is a very opinionated and powerful library that you can use to <strong>simplify your state management</strong>. Check out their <a href="https://redux-toolkit.js.org/introduction/getting-started">documentation</a> regarding how to get started with Redux Toolkit.</p>
<p>I have used Redux, <a href="https://zustand.surge.sh/">Zustand</a>, and Redux Toolkit while building Next.js applications. I feel that Zustand is very simple and easy to understand. However, I still use Redux in case I need to build something complex. I haven’t used <a href="https://xstate.js.org/">XState</a> but it is also a popular choice.</p>
Use React Query Or SWR For Fetching Async Data
<p>Most front-end applications will fetch data from a back-end server and render it on the page. In a Next.js application or any JavaScript application, you can fetch data using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">the Fetch API</a>, <a href="https://www.npmjs.com/package/axios">Axios</a>, or similar libraries. However, as the application grows, it becomes very difficult to manage this async state of your data. You might create your abstractions using utility functions or wrappers around Fetch or Axios but when multiple developers are working on the same application, these utility functions or wrappers will soon become difficult to manage. Your application might also suffer from caching, and performance issues.</p>
<p>To resolve these kinds of issues, it is better to use packages like <a href="https://react-query.tanstack.com/">React Query</a> or <a href="https://swr.vercel.app/">SWR</a>. These packages provide <strong>a default set of configurations out of the box</strong>. They handle a lot of things like caching and performance which are difficult to manage on your own. Both of these packages provide some <a href="https://react-query.tanstack.com/guides/important-defaults">default configuration</a> and <a href="https://swr.vercel.app/docs/options">options</a> which you can use to customize their behaviors according to the requirements of your application. These packages will fetch and cache async data from your back-end API endpoints and make your application state much more maintainable.</p>
<p>I have used both React Query and SWR in my projects and I like both of them. You can take a look at <a href="https://react-query.tanstack.com/comparison#_top">their comparison</a> and features to decide which one you should use.</p>
Use Commitizen And Semantic Release With Husky
<p>If you deploy and release your application often, then you might have encountered issues with versioning. When you are working on a big application and multiple developers are contributing to it, managing releases becomes even more difficult. It becomes very difficult to keep track of the changelog. Manually updating the changelog becomes very difficult and slowly your changelog becomes out of date.</p>
<p>You can combine packages like <a href="https://www.npmjs.com/package/commitizen">Commitizen</a> and <a href="https://www.npmjs.com/package/semantic-release">Semantic Release</a> to help you with versioning and maintaining a changelog. These tools help you in <strong>automating part of your release process by keeping the changelog in sync</strong> with what changes were deployed in a particular release. You can use a tool like <a href="https://www.npmjs.com/package/husky">Husky</a> to ensure that all the contributors are following the established pattern for writing commit messages and helping you in managing your changelog.</p>
Use Storybook For Visualizing UI Components
<p>In a large code-base, your application will most likely consist of a lot of components. Some of these components will be outdated, buggy, or not necessary anymore. However, it is very difficult to keep track of this kind of thing in a large application. Developers might create new components whose behavior might be similar to an already existing component because they don’t know that the previous component exists. This happens often because there is no way to keep track of what components the application currently has and how they interact with each other.</p>
<p>Tools like <a href="https://storybook.js.org/">Storybook</a> will help you <strong>keep track of all the components that your code-base currently consists of</strong>. <a href="https://storybook.js.org/docs/react/get-started/examples">Setting up Storybook</a> is easy and can integrate with your existing Next.js application. Next.js has <a href="https://github.com/vercel/next.js/tree/canary/examples/with-storybook">an example</a> that shows how to set up Storybook with your application.</p>
<p>I have always liked using Storybook because it helps my team of developers understand how each component behaves and what APIs it exposes. It serves as a source of documentation for every developer. Storybook also helps designers understand the behavior of all the components and interactions. You can also use <a href="https://www.chromatic.com/">Chromatic</a> along with Storybook for visual testing and catching regression issues during each release.</p>
<p><strong>Recommended Reading</strong>: <em>“<a href="https://www.smashingmagazine.com/2020/09/building-react-apps-storybook/">Building React Apps With Storybook</a>” by Abdulazeez Adeshina</em></p>
Write Maintainable Tests From The Start
<p>Writing tests consumes time. As a result, many companies tend not to invest time in writing any sort of test. Because of this, the application might suffer in the long run. As the application grows, the complexity of the application also increases. In a complex application, refactoring becomes difficult because it is very hard to understand which files might break because of the changes.</p>
<p>One solution to this problem would be to <strong>write as many tests</strong> as possible from the start. You can follow <a href="https://en.wikipedia.org/wiki/Test-driven_development#:~:text=Test%2Ddriven%20development%20(TDD">Test Driven Development (or TDD)</a>,software%20against%20all%20test%20cases.) or any other similar concept that works for you. There is an excellent article <a href="https://kentcdodds.com/blog/the-testing-trophy-and-testing-classifications"><em>The Testing Trophy and Testing Classifications</em></a> by Kent C. Dodds which talks about different types of tests that you can write.</p>
<p>Although writing maintainable tests take time. But I think that tests are very essential for large applications as it gives developers the confidence to refactor files. Generally, I use <a href="https://jestjs.io/">Jest</a>, <a href="https://testing-library.com/docs/react-testing-library/intro">React Testing Library</a>, and <a href="https://www.cypress.io/">Cypress</a> for writing tests in my application.</p>
Use Dependabot To Update Packages Automatically
<p>When multiple feature teams contribute to the same application, there is a good chance that the packages used in it will become outdated. This happens because if there are any breaking changes while updating packages, there is a possibility that a considerable amount of time needs to be invested in doing that update. This might result in missing deadlines for shipping features. However, this practice might hurt in the long run. Working with outdated packages can cause a lot of issues like security vulnerabilities, performance issues, and so on.</p>
<p>Fortunately, tools like <a href="https://dependabot.com/">Dependabot</a> can <strong>help your team by automating the update process</strong>. Dependabot can be <a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates#about-the-dependabotyml-file">configured</a> to check for outdated packages and send updated pull requests as often as you need. Using tools like Dependabot has helped me a lot in keeping the dependencies of my applications updated.</p>
Things I Wish I Had Known Earlier
<p>There are many things that I wish I had known earlier while building the Next.js application. However, the most important is the going to the <a href="https://nextjs.org/docs/going-to-production">Production section of the Next.js documentation</a>. This section outlines some of the most important things that one should implement <strong>before deploying a Next.js application to production</strong>. Before I read this section, I used to arbitrarily guess about what to do before deploying any application to production.</p>
<p>Always check what browsers you need to support before deploying your application to production and shipping them to your customers. <a href="https://nextjs.org/docs/basic-features/supported-browsers-features">Next.js supports a wide range of browsers</a>. But it is essential to understand what type of users you are shipping your application to and what type of browsers they use.</p>
Conclusion
<p>These are some of the things that I learned while building and maintaining a large Next.js application. Most of these points will apply to any front-end application. For any front-end application, the main priority should always be shipping a product that has a very good user experience, is fast, and feels smooth to use.</p>
<p>I try to keep all these points in mind whenever I develop any application. I hope that they’ll prove to be useful to you, too!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:15;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:36:"A Showcase Of Lovely Little Websites";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:69:"https://smashingmagazine.com/2021/11/showcase-lovely-little-websites/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:69:"https://smashingmagazine.com/2021/11/showcase-lovely-little-websites/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 24 Nov 2021 12:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:258:"Instead of spending your coffee break scrolling through your social feeds, how about a lovely little website instead? We came across some fantastic ones that are just too good not to be shared. But be warned, your break might take a bit longer than intended.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Cosima Mielke)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:134:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a0a3a89-ba5a-40a8-af80-f8db0554af37/radiooooo-opt.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:28298:"<p>A map that blends past and present, a musical time machine bringing back distant memories, or an interactive graphic novel pulling you deeper and deeper into a powerful story — sometimes you come across a lovely little website that, well, <strong>instantly conquers your heart</strong>. It doesn’t necessarily have to be overly useful or practical. Instead, its true value shines in the experience you get from it. It might leave you with your jaw dropped, with a smile on your face, surprised, excited, or inspired.</p>
<p>In this post, we collected lovely little sites like these, found in the remote corners of the web. They are perfect for a <strong>short coffee break</strong> or whenever you’re up for a little bit of diversion. We hope you’ll enjoy them. Oh, and if you’ve come across a website that you feel is too good to keep to yourself, please don’t hesitate to share it in the comments below. We’d love to hear about it!</p>
Plant Guides, From A To Z
<p>Every office, and that includes home office as well, is better off with a lovely selection of beautiful plants. But which plants are easier to deal with for some of us who tend to be forgetful? Which ones require more care, and if so, what does it usually involve?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f848cc48-7b12-4e47-80fa-dcc288faf357/plant-guides-opt.png" /></p>
<p><a href="https://howmanyplants.com/plant-guides">How Many Plants</a> is a wonderful resource that covers all these questions well. It provides a thorough overview of all popular plants, sorted alphabetically and by care difficulty. You can even filter out plants based on their features (size, format, placement), plant type (traits, origins, pet-friendly) and leaf look (shape and surface). A great reference site to keep nearby.</p>
Covid Art Museum
<p>Of course, design isn’t quite like art. While design tries to solve a particular problem, art makes us think and feel — provoking us and questioning the status quo. But art can also bring around <strong>new perspectives</strong> and change in times when it’s so much needed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ac47c131-e250-4261-9e8a-f85c066158b1/covid-art-opt.png" /></p>
<p>The <a href="https://covidartmuseum.com/">Covid Art Museum</a> is a growing online exhibition of art born during Covid-19 quarantine, now with 238 contributions by people from all around the world. Often it’s an attempt to cope with the world around us, and perhaps take a slightly different perspective of how the changed world changed our perception of the world and our lives. </p>
Museum Of Annoying Experiences
<p>How often do you feel frustrated these days? How often do you open a browser window just to <strong>find yourself stuck</strong> identifying fire hydrants and understanding confusing sentences? Or perhaps calling a customer support service just to be put on hold for half an hour (at best)?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d91df0c-b3c0-45a6-935d-56108054e3c4/annoying-experiences-opt.png" /></p>
<p>The <a href="https://annoyingmuseum.zendesk.com/">Museum of Annoying Experiences</a> takes us on a journey to the year 3000 when bad customer service is nothing but a distant memory, only observable in the exhibits that show how things used to be in the past (well, today) when most interactions were incredibly annoying. Each exhibit is interactive and playful, taking a fun look at frustrations around us. Who knows: hopefully in the year 3000, all these annoying experiences will indeed be distant.</p>
The Musical Time Machine
<p>It’s still quite difficult to travel back in time, but fortunately, we can do so online. What if you wanted to listen to the pop charts extravaganza from the US back in 1955 or Uzbekistan in 1932? Well, <a href="https://radiooooo.com/">Radiooooo</a> has got your back (well, you might need to sign up for a free basic plan first).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a0a3a89-ba5a-40a8-af80-f8db0554af37/radiooooo-opt.png" /></p>
<p>The website is a collection of songs collected over decades and now searchable, with filters by genre, speed, country, and time period. In fact, you can search by slow for chilling, fast for dancing, and weird music for bugging out — indeed, there is something for everyone! And if you want to go fancy, there is a shuffle mode, with songs picked by the curators. </p>
UX Misconceptions And Laws
<p>When we design experiences on the web, usually we rely on things that worked well in the past. Of course, we don’t know for sure how well our solutions worked, and we don’t know if they’d perform well next time around. But out of our experiences views emerge, and then as they find ground, they become more established over time. And sometimes, this is exactly how misconceptions appear.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b045e590-a531-49b5-a091-9fd7186a72e8/ux-misconceptions-opt.png" /></p>
<p>“<a href="https://10ideesrecuesenuxdesign.castoretpollux.com/en/">10 misconceptions on UX</a>” highlights common views and data around infinite scrolling, making everything accessible from the homepage, original design, mobile-first and user interviews, among others. Admittedly, the creators of the site are quite opinionated, and you might disagree with some statements, but the website is fun to play with, and there are dozens of random fun facts to explore as well.</p>
<p>Also, if you’d like to deep-dive into common principles and heuristics of UX, Jon Yablonski has collected dozens of <a href="https://lawsofux.com/">Laws of UX</a> in his beautiful website, featuring everything from Hick’s Law and Law of Common Region to Tesler’s Law and Zeigarnik Effect. Wonderful resources worth keeping close! </p>
The Timeline Of The Web
<p>The web has been going through quite a few changes over the last three decades. You might remember Perl 5, Firebug, Backbone.js, and the end of Flash, but very often most things we’ve experienced on the web appear quite blurry, as they were changing so quickly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1d4109e-97d0-40ea-b821-abcc1a22024a/history-of-the-web-opt.png" /></p>
<p>In <a href="https://thehistoryoftheweb.com/timeline/">The History of the Web</a>, Jay Hoffman, with illustrations by Katerina Limpitsouni, celebrates the most important events in the web’s young history. It’s an evolving timeline that charts the events on a timeline, with useful resources and links to follow-up and review. A lovely little project to keep bookmarked. </p>
Sounds To Help You Focus
<p>Staying focused might easily be one of the biggest challenges when you need to get work done. If you’re working from home and are missing the familiar office sounds, <a href="https://imisstheoffice.eu/">I Miss The Office</a> brings some <strong>office atmosphere</strong> into your home office — with virtual colleagues who produce typical sounds like typing, squeaking chairs, or the occasional bubbling of the watercooler.</p>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5cf1a563-d531-48c0-bd18-71da9d990f07/imisstheoffice-opt.png" /></p>
The Boat: A Powerful Piece Of Storytelling
<p>Some stories are so dense, so intense, that they capture you and don’t let you go. “<a href="http://www.sbs.com.au/theboat/">The Boat</a>” is such a story. Based on the short story by Nam Le, “The Boat” combines animation, audio, and ink and charcoal drawings into a powerful, interactive graphic novel.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15966683-880d-47c2-8813-6cf56b77aed6/the-boat-opt.png" /></p>
<p>The story told is the one of Mai, a girl whose parents send her alone on a boat to Australia after the Vietnam War. And, well, the storytelling experience really is exceptional. Each little element, each thoroughly applied animation contributes to creating an atmosphere that reflects the fear, despair, but also the hope that is linked to the escape. Take some time and see for yourself. It’s worth it.</p>
Interactive Timeline... In Dots!
<p>Dots, dots, and even more dots. But these are not just any ordinary dots. Every dot is a historic event, so you can just imagine how the whole picture looks like if you step back and take a look at <a href="http://histography.io/">Histography</a>. This impressive interactive timeline spans across 14 billion years of history, from the Big Bang to the 2010s. What started out as a simple project in the <em>Bezalel Academy of Arts and Design</em> by Ronel Mor, has now turned out to be a leading example of what creative timelines can actually look like.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/615407e4-17c2-4517-b531-317f5d43fb19/histography-opt.png" /></p>
<p>All of the historical events shown in the interface have been drawn from Wikipedia and new recorded events are added on a daily basis. Not only does it allow you to skip between decades to millions of years, but you can also choose to watch a variety of events which have happened in a particular period or target a specific event in time.</p>
Designing A Galaxy Far Far Away
<p>Take 22 Illustrator files that measure 1024 × 465152 px combined, put in 1000 hours of work, and add the story of Star Wars Episode IV. What you’ll get is a project that will make your jaw drop: <a href="http://swanh.net/">SWANH</a>. Brought to life by illustrator and graphic novelist Martin Panchaud, SWANH tells the whole story of “Star Wars: A New Hope” in a huge infographic that requires 403.5ft (123m) of scrolling to get from top to bottom. And, well, it’s worth it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b366556d-6041-427c-aa8f-2e90dea5d454/swanh-opt.png" /></p>
<p>Made up of 157 images, the sheer dimensions of the piece are impressive, and so is the love to detail that Martin Panchaud put into creating the Star Wars universe. But SWANH is more than eye candy for Star Wars lovers. It’s also an experiment that wants to create a contrast to what we usually expect on the web: quickly understandable contexts and short stories. Brilliant.</p>
Design Facts That You Didn’t Know About
<p>Humankind has always created, however, the design craft as we know and practice it today is a rather young discipline. But that doesn’t mean it doesn’t have a lot of stories to tell. The project <a href="http://www.designfacts.org">Design Facts</a> by writer and art director Shane Bzok reveals them by serving bite-sized pieces of design history that you probably haven’t heard of yet.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab229aab-b9f7-455a-a414-a31c64db2a69/design-facts-opt.png" /></p>
<p>Did you know, for example, that the logo for the Spanish lollipop company <em>Chupa Chups</em> was designed by Salvador Dali in 1969? That the Adobe founders named their company after a creek that ran behind the house of one of the founders? Or that the logo of the Chanel brand with its interlocking C’s originally adorned the building of a French vineyard and that Coco Chanel was granted permission by the vineyard owner to use it for her brand in the early 20’s? These are only three of the more than 130 surprising and informative design facts that Shane Bzok has collected. Perfect to squeeze into a short coffee break.</p>
The Beauty Of Vintage Control Panels
<p>An old phone with a dial plate, a tape deck with a grid of buttons, an electricity control room with hundreds of bulbs — vintage electronics have a fascinating charm to them. In praise of all those dials, toggles and buttons that made and shaped the tech design of the past century, Stephen Coles and Norman Hathaway <a href="http://control--panel.com/">dedicated a Tumblog solely to vintage control panels</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/29d103db-adc7-4ee4-ae50-a3a02db0c30a/vintage-control-panels-opt.png" /></p>
<p>As you’ll see, browsing the collection feels like opening a time capsule. Apart from car dashboards and tech magazine covers of the 80s that still seem (fairly) familiar, you’ll find gems like four-buttoned remote controls from the 40s or retro-futuristic concepts, among them a smartwatch from the 80s that is essentially a shrunken PC worn on the wrist. A fun journey through the history of interface design. Leaves us with the question what people will think about our state-of-the-art gadgets and UIs in 50 years from now.</p>
Little Moments Of Happiness
<p>Did you ever cool off a lion with a fan? It might sound weird, but, well, we did. And what can we say? The lion loved it! The refreshing breeze made his mane dance and brought a big smile to his face. Don’t believe it? Well, go ahead, and <a href="https://moments.epic.net/#lion">try for yourself</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aec60ae6-5d08-47bd-ba93-9e4fd0db6e25/lion-fan-game-preview-opt.png" /></p>
<p>The lion is part of the WebGL project named “<a href="https://moments.epic.net/">Moments of Happiness</a>”, which was brought to life by EPIC Agency. He and five of his animal friends — a sneezing dragon, a playful cat, a paranoid bird, a valorous rabbit and a mighty fish — are bound to put a smile to your face, too, as you interact with them. To breathe life into the odd yet lovable bunch, the experiments use Three.js and the GSAP Library. If you want to take a closer look under the hood, the source codes are available on <a href="http://codepen.io/Yakudoo">Codepen</a>. Watch out, though: They are not fully optimized and might not work in some browsers or devices.</p>
Monochromatic Eye Candy
<p>Who doesn’t love some good eye candy? If you need some fresh inspiration, be sure to stop by the Tumblr of <a href="http://theafrix.tumblr.com/">The Afrix</a>. Curated by designer Tom Wysocki, the Tumblr resembles a well-balanced exhibition of opposites — black and white, strict geometry and fluent, organic shapes — joining up to build a harmonious whole.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01292f62-9306-4b16-99e1-d5902c5af987/afrix-opt.png" /></p>
<p>Among the works, you’ll find actual designs for portfolio websites and detailed illustrations, but also rather abstract and seemingly random digital experiments. It’s that mix of the unforeseen that makes the showcase so refreshing despite its monochromatic color palette. Beautiful works of art with a mysterious touch.</p>
An Alphabetical Adventure
<p>“A” is for “Albert”, “B” is for “Bounce”, “C” for “Cowabunga”. If you have no idea what all of this is about, well, no worries, we’ll tell you: it’s the beginning of a very special piece of eye candy. Brought to life by design agency Studio Lovelock, “<a href="http://www.aisforalbert.com/">A Is For Albert</a>” explores the moments of happiness — and the little mishaps — that life with kids brings along — with an animated alphabet.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3bbeaf14-741c-43fc-b615-ab6b330fa48b/albert-opt.png" /></p>
<p>Each letter from A to Z tells the story of how Albert, a blonde little boy, explores the world in his own cute yet chaotic (and seen from his parents’ perspective sometimes maybe even a bit annoying) way. He decorates the livingroom wallpaper with his brush artworks, for example, and shows his love for the family cat by hugging it a bit too tight. Simple geometric shapes and a soft color palette are everything the project needs to breathe life into Albert’s (and his parents’) everyday adventures and make us smile.</p>
Blending Past And Present
<p>Maps can do more than help us find the way. They are witnesses of their time and, when we look at old maps, it’s like taking a trip back into long forgotten days. Now imagine that you had a magic spyglass that could show you what your neighborhood looked like 100 years ago. You’d only need to get out a recent map, hover your spyglass over it, and see what has changed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74a5a24f-5aab-4738-b2fc-1006225dbaac/historic-maps-opt.png" /></p>
<p>Well, actually, that’s possible. The National Library of Scotland provides a <a href="http://maps.nls.uk/geo/explore/spy/index.cfm#zoom=16.609999999999985&amp;lat=51.4838&amp;lon=-0.1238&amp;layers=168&amp;b=1">browser-based tool</a> that lets you jump between the same area on a recent and a vintage map just looking through a (digital) spyglass. The service works for maps of Great Britain, Scotland, England, and Wales. A fantastic way to see the world (and maybe even your neighborhood) from a different perspective.</p>
Do You Have The Design Eye?
<p>So, you think no-one is better than you when it comes to assessing if something is centered or slightly off? Well, then here’s a challenge for you: <a href="https://www.supremo.co.uk/designers-eye/"><em>It’s Centred That</em></a>. The little game created by the folks at the UX design and web development studio Supremo takes your design eye to the ultimate test: You’re presented with shapes and need to decide if the dot is placed in the center. But beware, what sounds easy, is actually harder than you’d think. Will you make it through all 10 levels?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f65b39d6-8c33-4ebc-b5a9-40eaa95c9ca4/design-eye-opt.png" /></p>
Patterns In Islamic Art
<p>The Islamic world has brought forth an incredibly rich heritage of architectural decoration, a heritage that deserves to be better known and that has a lot to offer not only to art historians, as David Wade points out. To make the beauty accessible to everyone, he started <a href="https://patterninislamicart.com/"><em>Pattern in Islamic Art</em></a>, a showcase of more than 4,000 images of patterns and other design features drawn from this artistic tradition. No matter if you are up for some eye candy or want to investigate the underlying construction of the complex geometries, the site is a real treasure chest.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/03601b24-b83d-4744-9d42-1e6061b59f3d/patterns-islamic-art-opt.png" /></p>
Print Design Inspiration From The Past
<p>Typography, layout, color, patterns — vintage magazines provide an endless source of inspiration. If you’re up for some eye candy, the folks at Present &amp; Correct have collected a selection of print design goodies over time.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21359f29-280e-4863-b7ed-2aa01099f15f/vintage-print-design-opt.png" /></p>
<p>Among them are covers from the East German design magazine <a href="http://blog.presentandcorrect.com/form-zweck"><em>Form + Zweck</em></a> which was published between 1956 and 1990, just like covers of Switzerland’s oldest typographic journal <a href="http://blog.presentandcorrect.com/typographische-monatsblatter"><em>Typographische Monatsblätter</em></a>. The Japanese magazine <a href="http://blog.presentandcorrect.com/industrial-art-news"><em>Industrial Art News</em></a> with its bold and vibrant cover art is also part of the collection. For some more contemporary inspiration, be sure to also check out the site of the Japanese <a href="http://www.idea-mag.com/en/idea_magazine/"><em>IDEA magazine</em></a> where you can peek inside past issues and even browse them by keyword. Eye candy to get lost in.</p>
A Curated Gallery Of Patterns
<p>When bold colors meet subtle palettes, organic curves appear next to sharp-edged geometric forms, and minimalist designs face playful artworks, inspiration isn’t far. If you’re up for a surprise bag of inspiration, <a href="https://patterncollect.com/">Pattern Collect</a> is for you. The site curates beautifully illustrated patterns created by designers from across the globe.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6e4f838-73d1-4a28-8c17-56b16ad45343/pattern-inspiration-opt.png" /></p>
<p>You can browse the showcase by tag and, if you like an artwork, a link takes you to the original on Dribbble or Behance where you can learn more about the illustrator and their work. Who knows, maybe this will even turn out to be the opportunity to find creative talent to work with on an upcoming project?</p>
A Trip Back To The Early-Days Of Computing
<p>You’re in the mood for some tech nostalgia? Well, then <a href="http://www.pcjs.org/">PCjs</a> will be your kind of thing. The open-source project revives the times when computers came with a monochrome display and ran on 4.77Mhz and 64KB of RAM. And the best: It’s no showcase, but you can actually interact with the machines right in your browser. The simulations of the Original IBM PC from 1981 and the OSI Challenger 1P from 1978 were written entirely in JavaScript and require no additional plugins — no Java, no Flash.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2273402-842c-4820-a8e6-71d6b4951ddc/pcjs-opt.png" /></p>
<p>The pre-configured machines are ready to run BASIC, DOS, Windows 1.01, and assorted non-DOS software, and, if that’s not enough control for you yet, you can even build your own PC. The goal of the project is to help people understand how these early computers worked and to make it easy to experiment with them. It also provides a platform for running and analyzing older software. Now that’s really a trip down the memory lane.</p>
A Rainbow Of Cover Artwork
<p>By pairing hex color values with album cover art of 2020, you’ll have the foundation for a very special project: <a href="http://albumcolors.com/">Album Colors Of The Year</a>. It arranges some of last year’s album releases by color to create a rainbow of cover artwork.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/028e19b3-a350-4948-8db0-a55cff9f48a3/albumcolors-opt.png" /></p>
<p>Lady Gaga’s album “Chromatica”, for instance, is a case of <code>#ed4c73</code>, Suuns’ “Fiction” shines in <code>#e489b3</code>, and Avalon Emerson’s “DJ-Kicks” screams <code>#f8bb04</code>. In times when album covers often live rather unnoticed in the corner of our smartphone screens, it is nice to see their artwork in the center of attention for a change. A great place to seek fresh inspiration — or just discovering some new tunes to get you through a lengthy coding session.</p>
Teletext Time Travel
<p>Do you remember the times when you switched to the teletext for the weather forecast or the sports results? The loud colors on the black background, pixel art graphics, and flashing text? (Well, you might not, and it’s perfectly fine!) The <a href="http://teletext.mb21.co.uk/gallery/">Teletext Museum</a> is the perfect place to revive these memories or discover them (if you live outside Europe, for example).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96e2cd2-e72c-4852-b563-f737c4769d84/teletext-opt.png" /></p>
<p>If we didn’t have the web, most of us would still be teletext designers and developers since essentially each teletext page is a box with content in it. Sounds familiar? Well, the gallery with images from teletext services from around the world illustrates how the interface design has evolved over time and a timeline gives you more information on what exactly changed and how.</p>
<p>If you ever wanted to take on the role of a teletext designer, well, you can do that, too. Jason Robertson who <a href="http://www.transdiffusion.org/2016/01/07/teletext-time-travel">recovers old teletext data from VHS cassettes</a> in a complicated and time-consuming process provides a <a href="http://www.uniquecodeanddata.co.uk/teletext76/">plethora of teletext pages</a> from the 80’s and 90’s. Some of them can be edited right in the browser. The process needs some getting used to, but it’s definitely a fun trip back in time.</p>
The Lives Of Famous Painters
<p>When we hear names like Picasso, Dalí, or Miró, we immediately remember some of their paintings. But what do we actually know about the artists behind the masterpieces? About their lives and love, the events that shaped them and their works? To visualize painter’s lives, information designer Giorgia Lupi and her team at Accurat teamed up with illustrator Michaela Buttignol. The result of the collaboration is a stunning <a href="https://www.brainpickings.org/index.php/2013/06/07/painters-lives-accurat-giorgia-lupi/">series of minimalist infographics</a> that boil the biographies of ten famous painters down to their cornerstones.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/227cacb2-675d-4b1f-aa2e-890b7e05bec4/painters-opt.png" /></p>
<p>The visualizations depict key moments — births, deaths, love affairs, marriages, children, travels — but also interesting tidbits such as astrological sign, left/right handedness as well as  connections and influences. By picking up the characteristic colors and other stylistic preferences of each artist, the designs also reflect the painters’ styles. A fun way to dive deeper into the history of art. If you’d like to learn more about creating engaging infographics like this one, you should also check out Giorgia Lupi’s <a href="https://medium.com/accurat-studio/beautiful-reasons-c1c6926ab7d7">article on the aesthetics of data narratives</a>.</p>
The Museum Of The World
<p>The Rosetta Stone, the Parthenon sculptures, Egyptian mummies — all of them cornerstones of human culture which can be admired in the British Museum today. Comprising more than 2,000,000 years of human history, its collection is exceptional and one of the largest of its kind. To make that cultural heritage accessible to more people from all over the world, the British Museum has partnered up with Google. The result: the <a href="https://britishmuseum.withgoogle.com/">Museum Of The World</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffa394a0-060c-4842-8485-2397367fe56e/museum-of-the-world-opt.png" /></p>
<p>The WebGL-powered desktop experience explores connections between the world’s cultures by showcasing exhibits that shaped human history. As you travel deeper into the history of mankind with each scroll, you can browse the artefacts according to type and area of origin — no matter where in the world they might be located. Stunning.</p>
Bringing Imaginations To Life
<p>Guess what happens if 100 kids draw monsters and 100 illustrators bring those imaginations to life? Probably something hilarious and very refreshing. Katherine Johnson did just that: She invites Elementary students to draw monsters, and once their creations have taken shape, she works with illustrators to bring them to life in their unique artistic styles.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/54643c9a-4a51-41ce-acc5-5bc4a108cbe1/monsters-opt.png" /></p>
<p>The ultimate goal of <a href="http://www.gomonsterproject.com/monster-gallery">The Monster Project</a> as the project is called is to help children recognize the value of their ideas and make them feel excited about the creative potential of their own minds. At the moment, the site features over 100 monsters created by over 100 artists from all over the world. Now, are you feeling inspired already?</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:16;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"Adding A Dyslexia-Friendly Mode To A Website";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:68:"https://smashingmagazine.com/2021/11/dyslexia-friendly-mode-website/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:68:"https://smashingmagazine.com/2021/11/dyslexia-friendly-mode-website/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 23 Nov 2021 10:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:206:"With a little CSS, we can adapt our web designs to be more accommodating for people with dyslexia. In this article, we’ll explore those techniques by adding a dyslexia-friendly mode to an existing design.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:43:"hello@smashingmagazine.com (John C Barstow)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:151:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1fb4e46-6f0a-4631-a04c-d42376eddc82/dyslexia-friendly-mode-website.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:18096:"<p>Dyslexia is perhaps the most common learning disorder in the world, affecting somewhere between 10–20% of the world’s population. It can cause difficulties with reading, writing, and spelling, though the degree of impairment varies widely — some people are barely affected while others require a great deal of extra support.</p>
<p>Existing best practices and guidance, such as the Web Content Accessibility Guidelines (WCAG), give us a solid foundation for inclusive design and already incorporate many details that affect dyslexic readers. For example, WCAG <strong>guidance around line length and spacing</strong> match the recommendations I found doing my research. In fact, some of those resources are linked in the <a href="https://www.w3.org/WAI/WCAG21/Understanding/">Understanding WCAG 2.1</a> document which provides extended commentary on the guidelines.</p>
<p>We can build upon those foundations to offer more focused support for different communities, making it easier to engage with our websites on their own terms. In this article, we’ll look at ways to make an existing design dyslexia-friendly.</p>
<p>This article builds on English-language research and can be generalized to cover most European languages that use Latin and Cyrillic scripts. For other languages and scripts, you will find you need to tailor or even ignore these guidelines.</p>
Font Selection
<blockquote>“The font for the body copy should be chosen for its on-screen readability, before any concern for style.”<br /><br />— “<a href="https://www.smashingmagazine.com/2012/05/applying-macrotypography-for-readable-web-page/">How To Apply Macrotypography For A More Readable Web Page</a>,” Nathan Ford</blockquote>

<p>When I first started researching this topic, I incorrectly believed that I would have to limit my font selection. Luckily, research shows that standard fonts like Helvetica and Times New Roman are just as readable as purpose-built fonts like <a href="https://www.dyslexiefont.com/">Dyslexie</a> or <a href="https://opendyslexic.org/">Open Dyslexic</a>.</p>
<p>What this means for your font selection is that you merely have to select fonts with <a href="https://www.smashingmagazine.com/2020/07/css-techniques-legibility/">legibility in mind</a>.</p>
<p>All right, problem solved, let’s go home!</p>
<p>Well, not really. It turns out there is something special about those purpose-built fonts.</p>
Whitespace
<blockquote>“It seems that at least for some people with dyslexia, they are vulnerable to a phenomenon called ‘visual crowding’ when they read.”<br /><br />— <a href="https://www.sheffield.ac.uk/health-sciences/people/human-communication-sciences/jenny-thomson">Dr Jenny Thomson</a></blockquote>

<p>While study after study shows little benefit from the choice of font, they also consistently show <strong>spacing between letters and words</strong> as the most important factor in supporting a dyslexic reader. Jon Severs has written <a href="https://www.tes.com/news/does-comic-sans-really-help-dyslexic-learners">a very good overview of these studies</a> with quotes from many of the leading researchers.</p>
<p>The popularity of Comic Sans in the dyslexic community seems to be driven by the wider spacing found in that font, spacing that has been built into additional fonts intended for their community.</p>
<p>As designers, we have the power to extend this spacing to any font, letting us support our readers without a major redesign. While we’re at it, we can further <strong>improve things by reducing distractions</strong> and design choices that can produce the visual crowding that affects dyslexic readers.</p>
An Existing Design
<p>The following CodePen example shows a fun little design with semantic and accessible markup that received 100% from a Lighthouse audit. It follows best practices, tries to present a strong visual identity, has good contrast levels, and uses <a href="https://overpassfont.org/">Overpass</a> for headings and body, which provides a unified and legible sans serif family of typefaces:</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/jOLXpgg">Dyslexia-unfriendly design</a> by <a href="https://codepen.io/jbowtie">John C Barstow</a>.</p>
<p>This will be our starting point, which we will extend to build our dyslexia-friendly version.</p>
Initial Changes
<p>We want the entire document to work together to support our dyslexic readers, so we will begin by adding a class to the <code>body</code> element.</p>
<pre><code>&lt;body class="dyslexia-mode"&gt;</code></pre>

<p>This will allow us to easily toggle our new changes on and off via JavaScript and makes it easy to locate the relevant CSS rules.</p>
<p>The <em>British Dyslexia Association</em> published a <a href="https://www.bdadyslexia.org.uk/advice/employers/creating-a-dyslexia-friendly-workplace/dyslexia-friendly-style-guide">style guide</a> in 2018 which we can use as a starting point:</p>
<blockquote>“Larger inter-letter / character spacing (sometimes called tracking) improves readability, ideally around 35% of the average letter width.”<br /><br />“Inter-word spacing should be at least 3.5 times the inter-letter spacing.”</blockquote>

<p>The <code>ch</code> unit in CSS is based on the advance of the <code>0</code> glyph, but in practice for proportional fonts can often be used as an approximation of the average character width. If you’re using a font with a particularly narrow or wide zero, you may find you need to adjust the numbers below.</p>
<p>We’re using Overpass in our example, which has a fairly standard zero, so we can express the recommended numbers directly:</p>
<pre><code>.dyslexia-mode {
    letter-spacing: 0.35ch;
    word-spacing: 1.225ch; /* 3.5x letter-spacing */
}</code></pre>

<p>Modern browsers default to enabling a font’s common ligatures, and older browsers will do so if you use the unofficial <code>text-rendering: optimizeLegibility</code> property. For most of us, this improves legibility as it merges close-set characters into a single glyph. For example, ‘f’ and ‘i’ are often merged to create ‘ﬁ’.</p>
<p>Dyslexic readers, on the other hand, <strong>may struggle to recognize the ligature</strong> as two letters, especially as we have increased the spacing, making ligatures stand out even more than usual. While some browsers may automatically disable ligatures as a result of the increased letter spacing, for consistent behavior we should explicitly disable them ourselves via CSS:</p>
<pre><code>.dyslexia-mode {
    letter-spacing: 0.35ch;
    word-spacing: 1.225ch; /* 3.5x letter-spacing */
    font-variant-ligatures: none; /* explicitly disable ligatures */
}</code></pre>



Line Spacing
<p>The <a href="https://www.w3.org/TR/WCAG21/#visual-presentation">WCAG guidelines</a> suggest a minimum line height of 1.5, with a paragraph setting at least 1.5 times larger than the line spacing.</p>
<p>Following this guidance is already quite helpful for your dyslexic readers, but that minimum value is based on the standard word spacing. Since we’re increasing the word spacing, we should increase the line height proportionally.</p>
<p>I find a <strong>line-height of 2.0</strong> works quite well. It’s a little more than the BDA guidance of 1.5x the word spacing, unitless as suggested by <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height#prefer_unitless_numbers_for_line-height_values">MDN documentation</a>, and easy to sync up to a design’s vertical rhythm.</p>
<p>To achieve the recommended amount of paragraph spacing, in this example we apply a top margin on our <code>p</code> elements. In a larger project, you might want to use Heydon Pickering’s famous <a href="https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/">owl selector</a>, especially if you have nested content.</p>
<p>Following the WCAG suggestion, that top margin should be <strong>a minimum of 3em</strong> to get the desired paragraph spacing. After feedback from my dyslexic reader, I <strong>increased this to 3.5em</strong> which was more comfortable for them.</p>
<p> As with any inclusive design, feedback from real users is critical to ensuring the best results.</p>
<p>While we could apply these settings to our entire page, I prefer to target them to the main content area, especially when modifying an existing design. Site headers, footers, and navigation tend not to have paragraph content and can be particularly sensitive to vertical whitespace changes.</p>
<pre><code>.dyslexia-mode main {
   line-height: 2.0;
}

.dyslexia-mode main p {
   margin-top: 3.5em;
}</code></pre>

Other Typographic Changes
<p>At this point, we’ve made the large-scale changes that will have the biggest impact on a dyslexic reader. Now we can turn our thoughts to the smaller touches that help refine a design.</p>
<p>The extra whitespace we’ve introduced will make many fonts appear lighter, thinner, or lower contrast, so we can increase the font weight or adjust the color to compensate.</p>
<pre><code>.dyslexia-mode {
  font-weight: 600; /* demi-bold */
}</code></pre>

<p>This in turn may make bold (at a font-weight of <code>700</code>) harder to distinguish. You could make it a heavier bold by increasing the font-weight or distinguishing it in some other way like changing the size or color. For my design, I chose to leave it at the same weight, but make it darker than the regular text.</p>
<pre><code>.dyslexia-mode strong {
  color: #000;
}</code></pre>

<p>Now is a good time to use your developer tools to <strong>check your contrast</strong>. For dyslexic readers, you should aim for a contrast ratio of <strong>at least 4.5:1</strong>, which corresponds to the <a href="https://www.w3.org/TR/WCAG21/#contrast-minimum">WCAG 2.1 minimum contrast guidelines</a>.</p>
<p>Why the minimum guidelines? Well, there are two issues to consider. One is that at very high contrast ratios some dyslexic readers will see their text blurring or swirling. This is known as the “blur effect”. This is one of the reasons that the BDA style guide we referenced earlier recommends avoiding pure black text or pure white backgrounds.</p>
<p>The second consideration is that many dyslexic readers find <a href="https://pielot.org/2013/06/use-18pt-font-size-for-readers-with-dyslexia/">larger font sizes more readable</a>. Research suggests a base size of 18pt, which meets the <a href="https://www.w3.org/TR/WCAG21/#dfn-large-scale">WCAG definition of large-scale text</a> and therefore a contrast ratio of 4.5:1 will still meet the enhanced contrast guidelines.</p>
<p>Which reminds us, we should <strong>bump up that base font size</strong>!</p>
<pre><code>.dyslexia-mode {
  font-size: 150%; /* assuming 16px base size, convert to 18pt */
}</code></pre>

<p>Responsive designs tend to scale well with browser zoom settings, so a different strategy here could be to leave your font size untouched and suggest that your readers increase the page zoom in their browser.</p>
<p>Following the WCAG guidelines means that our design does not use justified text, so we don’t have to make an adjustment. Because <strong>justification can alter the spacing</strong> between letters and words, if you have used it, you should ensure you disable it in a dyslexia-friendly mode.</p>
Reduce Clutter
<p>The extra whitespace we’ve been adding makes it easier to focus on letters and words. That implies that we can be even more helpful by reducing the amount of confusing, cluttered, or potentially distracting things in our design.</p>
<p>Best practices in web design tend to emphasize progressive enhancement and mobile-first design, which <strong>helps keep page weights down and makes web pages resilient</strong>. These practices naturally lead to a minimal default state with fewer decorations and distractions (because these would overwhelm a small screen). We can preserve this minimal state in our dyslexia-friendly mode.</p>
<p>For the background, this means defaulting to a solid color and using the <code>:not</code> pseudo-class in our enhancements to avoid applying them to our new mode.</p>
<p>We can use similar constructs to avoid the creation of decorative borders and shadows, leaving only those that are functionally necessary.</p>
<div>
<pre><code>@media(min-width:700px) { /<em> only apply on wider screens... </em>/
  body:not(.dyslexia-mode) main { /<em> ...if not in our friendly mode! </em>/
    background-image: url(<a href="https://res.cloudinary.com/jbowtie/image/upload/v1631662164/exclusive_paper_dyitgt.webp)">https://res.cloudinary.com/jbowtie/image/upload/v1631662164/exclusive_paper_dyitgt.webp)</a>;
  }
}</code></pre>
</div>

<p>In the existing design, we deliberately make the heading look like an imperfectly applied printed label by rotating it slightly. This is meant to evoke a playful or humanistic touch, and we often see designs adopt little touches like these for similar reasons.</p>
<p>However, this label-like appearance is a prime example of a decorative element that produces <strong>visual crowding</strong>. So even though it works well in a mobile context, we are going to need to remove this touch to provide a better experience for our dyslexic readers.</p>
<div>
<pre><code>.dyslexia-mode h2 {
  border: none; border-bottom: thin grey solid;  /<em> just keeping the bottom border for this element, to retain some separation </em>/
  max-width: 100%; /<em> standard width </em>/
  transform: none; /<em> do not rotate </em>/
  background-color: inherit; /<em> We no longer look like a label, so we don't require our own background </em>/
  margin-bottom: 1em; padding-left:0; /<em> some spacing adjustments </em>/
}</code></pre>
</div>

<p>Zebra striping has long been used when displaying tabular data, but <a href="https://alistapart.com/article/zebrastripingmoredataforthecase/">research by Jessica Enders</a> shows that the benefits are not necessarily as clear as I thought, and I didn’t find any dyslexia-specific research on the subject.</p>
<p>What I did find was a request from my dyslexic reader to implement <strong>zebra striping for tables and lists</strong>! Once again, real user feedback is invaluable.</p>
<p>I chose to restrict this to the main content, to avoid having to revisit the design of the site navigation. We don’t actually have any tables in our example, but the CSS changes would be quite similar.</p>
<pre><code>.dyslexia-mode main li:nth-of-type(odd) {
    background-color: palegoldenrod;
}</code></pre>



Toggling Our New Mode
<p>Now that we have a dyslexia-friendly design, we need to decide whether to make it the default, or something that is chosen by the user.</p>
<p>When retrofitting an existing site, as in this example, we’ll probably opt for a mode, to reduce the impact of changes on existing users.</p>
<p>In building a new site or refreshing a design, we should consider which changes we can make the default, for the benefit of all users. As with any other design work, you’re <strong>balancing the needs of multiple audiences</strong>, branding constraints, and tensions with other design goals such as evoking specific moods or keeping certain information “above the fold”.</p>
<p>Switching between modes is accomplished by toggling the class on the body element. Here we do it with a toggle button and some JavaScript, using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"><code>localStorage</code></a> to persist the change across visits and pages. This could be set and stored as part of a user profile.</p>
<div>
<pre><code>    // toggle dyslexia support
    const isPressed = window.localStorage.getItem('dyslexic') === 'true';
    if(isPressed) {
        document.body.classList.add('dyslexia-mode');
    }
    // set the button to pressed if appropriate
    const toggle = document.getElementById('dyslexia-toggle');
    if(isPressed) {
        toggle.setAttribute('aria-pressed', 'true');
    }
    // toggle dyslexia support
    toggle.addEventListener('click', (e) =&gt; {
        let pressed = e.target.getAttribute('aria-pressed') === 'true';
        e.target.setAttribute('aria-pressed', String(!pressed));
        document.body.classList.toggle('dyslexia-mode');
        window.localStorage.setItem('dyslexic', String(!pressed));
    });</code></pre>
</div>

<p>See the Pen <a href="https://codepen.io/smashingmag/pen/dyzwqXm">Dyslexia-friendly mode added</a> by <a href="https://codepen.io/jbowtie">John C Barstow</a>.</p>
Conclusion
<p>The separation of content and presentation that CSS gives us always comes in handy when we need to adapt designs to better serve different communities.</p>
<p>Building on the solid foundations of a design that embraces accessibility guidelines, we’ve learned to extend our design to <strong>improve the experience for dyslexic readers</strong>. There are other audiences that could benefit from this kind of focused design work, and I hope this inspires you to seek them out and share your experience.</p>
<p>This design was tested with a small and possibly unrepresentative sample size. If you or someone you know has dyslexia, your feedback in the comments below about what does or doesn’t work would be very welcome and helpful!</p>
<h3>Additional References</h3>
<ul>
<li>“<a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0071161">Shorter Lines Facilitate Reading in Those Who Struggle</a>,” Matthew H. Schneps, Jenny M. Thomson, Gerhard Sonnert, Marc Pomplun, Chen Chen, Amanda Heffner-Wong</li>
<li>“<a href="https://www.atlantis-press.com/article/125947156.pdf">A Comparative Study Of Dyslexia Style Guides In 
Improving Readability For People With Dyslexia</a>” (PDF)</li>
<li>“<a href="https://www.pnas.org/content/109/28/11455">Extra-Large Letter Spacing Improves Reading In Dyslexia</a>,” Marco Zorzi, Chiara Barbiero, Andrea Facoetti, Isabella Lonciari, Marco Carrozzi, Marcella Montico, Laura Bravar, Florence George, Catherine Pech-Georgel, and Johannes C. Ziegler</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:17;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:31:"Smashing Workshops: Winter 2021";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:72:"https://smashingmagazine.com/2021/11/smashingconf-workshops-winter-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:72:"https://smashingmagazine.com/2021/11/smashingconf-workshops-winter-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 22 Nov 2021 16:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:229:"What’s the state of CSS, Vue.js and Next.js? What are new, smart interface design patterns we could use? Let’s figure it out. With our [online workshops on UX, front-end and design](https://smashingconf.com/online-workshops).";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:45:"hello@smashingmagazine.com (Iris Lješnjanin)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:133:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2659d54-48e0-40d0-9fea-07c199eee87d/sanfran-2022.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:8643:"<p>For many of us, personal workspace can feel quite comfortable and convenient, but nobody really wants to sign up for another full day of focused screen time. That’s why we break our <a href="https://smashingconf.com/online-workshops/workshops">online Smashing workshops</a> down into 2.5h-sessions — with one session per day. This way, you always have enough time take it all in, try things out, rewatch a session or raise questions between sessions.</p>
<p>We’re super thrilled to announce the full program of workshops for the next months to come:</p>


<div><a href="https://smashingconf.com/online-workshops/workshops/brad-frost-nov/"><div>Creating and Maintaining Successful Design Systems<img src="https://d33wubrfki0l68.cloudfront.net/502cf7a10bd06fcb572acfb8b0592d9b28c50975/11b60/images/speakers/brad-frost.jpg" /></div><div>Brad Frost</div><div>5 sessions Nov 30 – Dec 14 workflow</div></a><a href="https://smashingconf.com/online-workshops/workshops/lea-verou-nov/"><div>Dynamic CSS Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/5ef0f3cb554cb09cf3d34f293f5ee3fa5a742e49/91e2b/images/speakers/lea-verou.png" /></div><div>Lea Verou</div><div>4 sessions Nov 29 – Dec 14 css</div></a><a href="https://smashingconf.com/online-workshops/workshops/yury-vetrov/"><div>Design Management Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/81e85d206622f50174b8793ffebfb4c139194e43/f323b/images/speakers/yury-vetrov.jpg" /></div><div>Yury Vetrov</div><div>5 sessions Dec 1–15 ux</div></a><a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-navigation-dec/">Early birds!<div>Designing The Perfect Navigation<img src="https://d33wubrfki0l68.cloudfront.net/c21ac313bd003251245fe0ec848a83b26157fef5/a6b54/images/speakers/vitaly-friedman.jpg" /></div><div>Vitaly Friedman</div><div>2 sessions Dec 2–3 ux</div></a><a href="https://smashingconf.com/online-workshops/workshops/carie-fisher-jan/">Early birds!<div>Accessible Front-End Patterns Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/f84c61767dea414d2b87f306d86de71eba9bb39e/7502a/images/speakers/carie-fisher.jpg" /></div><div>Carie Fisher</div><div>5 sessions Jan 20 – Feb 3 dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-frontend-feb/">Early birds!<div>New Adventures In Front-End, 2022 Edition<img src="https://d33wubrfki0l68.cloudfront.net/c21ac313bd003251245fe0ec848a83b26157fef5/a6b54/images/speakers/vitaly-friedman.jpg" /></div><div>Vitaly Friedman</div><div>5 sessions Feb 3–17 dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/gleb-bahmutov/">Early birds!<div>Front-End Testing Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/c617057a855d75af61034a896ef5a56b100c6da5/919aa/images/speakers/gleb-bahmutov.jpg" /></div><div>Gleb Bahmutov</div><div>4 sessions Feb 8–16 dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/trine-falbe/">Early birds!<div>Ethical Design Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/67cd8f94b812463c401dcff71d524d4b8f18b517/ee589/images/speakers/trine-falbe.jpg" /></div><div>Trine Falbe</div><div>5 sessions 1–15 March ux</div></a><a href="https://smashingconf.com/online-workshops/bundles#/"><div>10× Tickets Bundle<img src="https://d33wubrfki0l68.cloudfront.net/da6e9dee46f4008c7c1c3735e3571e77086b321a/8aa3f/images/events/online-workshops/summer-cat.png" /></div><div>Save $1250 off the price.</div><div>10 tickets No expiry Smashing!</div></a></div><div></div>

<p>Our online workshops take place <strong>live</strong> and span <strong>multiple days across weeks.</strong> In every session, there is always enough time to bring up your questions or just get a cup of tea. We don’t rush through the content, but instead, try to create a welcoming, <strong>friendly and inclusive environment for everyone</strong> to have time to think, discuss and get feedback.</p>
<p>There are plenty of <a href="https://www.smashingmagazine.com/2021/02/smashing-workshop-form-design-masterclass/">things to expect from a Smashing workshop</a>, but the most important one is focusing on practical examples and techniques. The workshops aren’t talks; they are interactive, with live conversations with attendees, sometimes with challenges, homework and team work. Of course, you get all workshop materials and <strong>video recordings</strong> as well, so if you miss a session you can re-watch it the same day.</p>
<div><a href="https://www.smashingconf.com/online-workshops/">Jump to all workshops →</a></div>

SmashingConf San Francisco 2022
<p>Yes, it’s official! Next year, we’ll be organizing a SmashingConf in each of these cities: San Francisco, Freiburg, New York and Austin! Alongside in-house workshops, <a href="https://smashingconf.com/sf-2022/">the first speakers have already been announced</a> with talks by experts on accessibility, front-end, design systems, performance and interface design.</p>
<p>We’d love to meet you in person on <strong>March 28–31</strong>, <strong>2022</strong>, at the waterfront next to the iconic Golden Gate Bridge. There will be two days of talks, a single track, two workshop days, and <a href="https://smashingconf.com/sf-2022/schedule">loads of side events</a> (all included in your ticket). For both the talks and the workshops, we have a good range of topics, varying from Figma to Web Performance and from SVG Animation to CSS Custom Properties. <a href="https://smashingconf.com/sf-2022/#speakers"><strong>Jump to all speakers and topics →</strong></a></p>

    <a href="https://smashingconf.com/sf-2022/">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2659d54-48e0-40d0-9fea-07c199eee87d/sanfran-2022.png" />
    </a>A friendly, inclusive conference for designers and developers. Let’s jazz together!

<div><a href="https://smashingconf.com/sf-2022/registration#/">To the tickets →</a></div>

The Next Smashing Conference In A City Nearby
<p> Great conferences are all about learning new skills and making new connections. That’s why we’ve set up a couple of <strong>new adventures for 2022</strong> — practical sessions, new formats, new lightning talks, evening sessions and genuine, interesting conversations — with a dash of friendly networking! </p>
<h3>Austin, USA</h3>
<p><a href="https://smashingconf.com/sf-2022#get-notified"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6632127-36c8-4ec7-82b5-fb83c2ab2374/smashingconf-au-2022.svg" /></a>We are so excited to be bringing SmashingConf to Austin again on <strong>June 27–30, 2022</strong>. We’ll be exploring how new web technologies and emerging front-end/UX techniques can make us all better designers and developers. More details will be announced very soon — make sure to <a href="https://smashingconf.com/sf-2022#get-notified">subscribe to the SmashingConf newsletter</a> to be one of the first ones to know! 🌮</p>

<h3>Freiburg, Germany</h3>
<p><a href="https://smashingconf.com/sf-2022#get-notified"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f7d2570-3b38-4f60-af3f-4c1fd5425d18/smashingconf-fr-2022.svg" /></a>We will be returning to our hometown for <a href="https://smashingconf.com/sf-2022#get-notified">SmashingConf Freiburg</a> on the <strong>5-7 September 2022</strong>. We pour our hearts into creating friendly, inclusive events that are focused on real-world problems and solutions. Our focus is on front-end and UX, but we cover all things web — be it UI design or machine learning. The Freiburg edition is, of course, no exception! 🥨</p>

<h3>New York, USA</h3>
<p><a href="https://smashingconf.com/sf-2022#get-notified"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9815f8f7-e05a-4894-8eb6-f55ef90b3138/smashingconf-ny-2022.svg" /></a>Each and every one of our Smashing conferences is a friendly, inclusive event for people who care about their work. No fluff, no fillers, no multi-track experience — just actionable insights applicable to your work right away. Join us for SmashingConf NYC in <strong>October 2022</strong> — an event that is always quite a popular one! <a href="https://twitter.com/smashingconf">Follow @smashingconf on Twitter</a> to get notified once we spill the beans on the Who, When and Where! ✨</p>

Thank You!
<p>A sincere <em>thank you</em> for your kind, ongoing support and generosity — for being <em>smashing</em>, now and ever. We’d be honored to welcome you.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:18;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:54:"Improving The Performance Of Wix Websites (Case Study)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:83:"https://smashingmagazine.com/2021/11/improving-performance-wix-websites-case-study/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:83:"https://smashingmagazine.com/2021/11/improving-performance-wix-websites-case-study/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 22 Nov 2021 10:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:252:"Implementing a performance culture is very important. In this article, Dan Shappir shares which actions and processes the Wix team put in place in order to achieve dramatic improvements in the performance of websites built and hosted on their platform.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:40:"hello@smashingmagazine.com (Dan Shappir)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:166:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/253b5a80-a208-4057-95b0-60762c922d07/improving-performance-wix-websites-case-study.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:30749:"<p>A website’s performance can make or break its success, yet in August 2020, despite many improvements we had previously made, such as implementing Server-Side Rendering (SSR), the ratio of Wix websites with good <a href="https://web.dev/vitals/">Google Core Web Vitals (CWV)</a> scores was only 4%. It was at this point that we realized we needed to make a significant change in our approach towards performance, and that we must embrace performance as part of our culture.</p>
<p>Implementing this change <strong>enabled us to take major steps</strong> such as updating our infrastructure along with completely rewriting our core functionality from the ground up. We deployed these enhancements gradually over time to ensure that our users didn’t experience any disruptions, but instead only a consistent improvement of their site speed. </p>
<p>Since implementing these changes, we have seen a dramatic improvement in the performance of websites built and hosted on our platform. In particular, the worldwide ratio of Wix websites that receive a good (green) CWV score has increased from 4% to over 33%, which means <strong>an increase of 737%</strong>. We also expect this upwards trend to continue as we roll out additional improvements to our platform. </p>
<p>You can see the impact of these efforts in the <a href="https://datastudio.google.com/s/lIkQgAX3SIs">Core Web Vitals Technology Report</a> from <a href="https://developers.google.com/web/tools/chrome-user-experience-report">Google Chrome User Experience Report (CrUX)</a> / <a href="https://httparchive.org/">HTTP Archive</a>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8f53e04f-3b31-4900-b385-83b426169171/8-improving-performance-wix-websites-case-study.png" /></p>
<p>These performance improvements provide a lot of value to our users because sites that have good Google CWV scores are eligible for the maximum <a href="https://developers.google.com/search/docs/advanced/experience/page-experience#signals">performance ranking boost</a> in the Google search results (SERP). They also likely have <strong>increased conversion rates and lower bounce rates</strong> due to the improved visitor experience.</p>
<p>Now, let’s take a deeper look into the actions and processes we put in place in order to achieve these significant results.</p>
The Wix Challenge
<p>Let’s begin by describing who we are, what are our use-cases, and our challenges.</p>
<p>Wix is a SaaS platform providing products and services for any type of user to create an online presence. This includes building websites, hosting websites, managing campaigns, SEO, analytics, CRM, and much more. It was founded in 2006 and has since grown to have over 210 million users in 190 countries, and hosts over five million domains. In addition to content websites, Wix also supports e-commerce, blogs, forums, bookings and events, and membership and authentication. And Wix has its own app store with apps and themes for restaurants, fitness, hotels, and much more. To support all this, we have over 5,000 employees spread around the globe.</p>
<p>This high rate of growth, coupled with the current scale and diversity of offerings presents a huge challenge when setting out to <strong>improve performance</strong>. It’s one thing to identify bottlenecks and implement optimizations for a specific website or a few similar websites, and quite another when dealing with many millions of websites, having such a wide variety of functionality, and an almost total freedom of design.</p>
<p>As a result, we cannot optimize for a specific layout or set of features that are known in advance. Instead, we have to accommodate all of this variability, mostly on-demand. On the positive side, since there are so many users and websites on Wix, improvements that we make benefit millions of websites, and can have a positive impact on the Web as a whole.</p>
<p>There are more challenges for us in addition to scale and diversity:</p>
<ul>
<li><strong>Retaining existing design and behavior</strong><br />A key requirement we set for ourselves was to improve the performance of all existing websites built on Wix without altering any aspect of their look and feel. So essentially, they need to continue to look and work exactly the same, only operate faster.</li>
<li><strong>Maintaining development velocity</strong><br />Improving performance requires a significant amount of resources and effort. And the last thing we want is to negatively impact our developers' momentum, or our ability to release new features at a high rate. So once a certain level of performance is achieved, we want to be able to preserve it without being constantly required to invest additional effort, or slow down the development process. In other words, we needed to find a way to automate the process of preventing performance degradations.</li>
<li><strong>Education</strong><br />In order to create change across our entire organization, we needed to get all the relevant employees, partners, and even customers up to speed about performance quickly and efficiently. This required a lot of planning and forethought, and quite a bit of trial and error. </li>
</ul>
Creating A Performance Culture
<p>Initially, at Wix, performance was a task assigned to a relatively small dedicated group within the company. This team was tasked with identifying and addressing specific performance bottlenecks, while others throughout the organization were only brought in on a case-by-case basis. While some noticeable progress was made, it was <strong>challenging to implement significant changes</strong> just for the sake of speed.</p>
<p>This was because the amount of effort required often exceeded the capacity of the performance team, and also because ongoing work on various features and capabilities often got in the way. Another limiting factor was the lack of data and insight into exactly what the bottlenecks were so that we could know exactly where to focus our efforts for maximum effect.</p>
<p>About two years ago, we came to the conclusion that we cannot continue with this approach. That in order to provide the level of performance that our users require and expect we need to operate at the organizational level. And that if we do not provide this level of performance it will be detrimental to our business and future success. There were several catalysts for this understanding, some due to changes in the Web ecosystem in general, and others to our own market segment in particular:</p>
<ul>
<li><strong>Changes in device landscape</strong><br />Six years ago, over 70% of sessions for Wix websites originated from desktops, with under 30% coming from mobile devices. Since then the situation has flipped, and now over 70% of sessions originate on mobile. While mobile devices have come a long way in terms of network and CPU speed, many of them are still significantly underpowered when compared to desktops, especially in countries where mobile connectivity is still poor. As a result, unless performance improves, many visitors experience a decline in the quality of experience they receive over time.</li>
<li><strong>Customer expectations</strong><br />Over the past few years, we’ve seen a significant shift in customer expectations regarding performance. Thanks to activities by Google and others, website owners now understand that having good loading speed is a major factor in the success of their sites. As a result, customers prefer platforms that provide good performance — and avoid or leave those that don’t.</li>
<li><strong>Google search ranking</strong><br />Back in 2018 Google announced that sites with especially slow pages on mobile would be penalized. But starting in 2021, Google shifted its approach to instead <a href="https://developers.google.com/search/docs/advanced/experience/page-experience#signals">boost the ranking of mobile sites that have good performance</a>. This has increased the motivation of site owners and SEOs to use platforms that can create fast sites.</li>
<li><strong>Heavier websites</strong><br />As the demand for faster websites increases, so does the expectation that websites provide a richer and more engaging experience. This includes features like videos and animations, sophisticated interactions, and greater customization. As <a href="https://httparchive.org/reports/state-of-the-web#bytesTotal">websites become heavier and more complex</a>, the task of maintaining performance becomes ever more challenging.</li>
<li><strong>Better tooling and metrics standardization</strong><br />Measuring website performance used to be challenging and required specific expertise. But in recent years the ability to gauge the speed and responsiveness of websites has improved significantly and has become much simpler, thanks to tools like <a href="https://developers.google.com/web/tools/lighthouse">Google Lighthouse</a> and <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a>. Moreover, the industry has primarily standardized on Google’s Core Web Vitals (CWV) performance metrics, and monitoring them is now integrated into services such as the <a href="https://support.google.com/webmasters/answer/9205520">Google Search Console</a>.</li>
</ul>
<p>These changes dramatically shifted our perception of website performance from being just a part of our offerings to become an imperative company focus and a strategic priority. And that in order to achieve this strategy implementing a culture of performance throughout the organization is a must. In order to accomplish this, we took a two-pronged approach. First, at an “all hands” company update, our CEO announced that going forward ensuring good performance for websites built on our platform will be <strong>a strategic priority for the company as a whole</strong>. And that the various units within the company will be measured on their ability to deliver on this goal.</p>
<p>At the same time, the performance team underwent a huge transformation in order to support the company-wide prioritization of performance. It went from working on specific speed enhancements to interfacing with all levels of the organization, in order to support their performance efforts. The first task was providing education on <strong>what website performance actually means</strong>, and how it can be measured. And once the teams started working off of the knowledge, it meant organizing performance-focused design and code reviews, training and education, plus providing tools and assets to support these ongoing efforts.</p>
<p>To this end, the team built on the expertise that it had already gained while working on specific performance projects. And it also engaged with the performance community as a whole, for example by attending conferences, bringing in domain experts, and studying up on modern architectures such as the Jamstack.</p>
Measuring And Monitoring
<p>Peter Drucker, one of the best-known management consultants, famously stated:</p>
<blockquote>“If you can’t measure it, you can’t improve it.”</blockquote>

<p>This statement is true for management, and it’s undoubtedly true for website performance. </p>
<p>But which metrics should be measured in order to determine website performance? Over the years many metrics have been proposed and used, which made it difficult to compare results taken from different tools. In other words, <strong>the field lacked standardization</strong>. This changed approximately two years ago when Google introduced three primary metrics for measuring website performance, known collectively as Google Core Web Vitals (CWV).</p>
<p>The three metrics are:</p>
<ol>
<li><strong>LCP</strong>: <a href="https://web.dev/lcp/">Largest Contentful Paint</a> (measures visibility)</li>
<li><strong>FID</strong>: <a href="https://web.dev/fid/">First Input Delay</a> (measures response time)</li>
<li><strong>CLS</strong>: <a href="https://web.dev/cls/">Cumulative Layout Shift</a> (measures visual stability)</li>
</ol>
<p>CWV have enabled the industry to focus on a small number of metrics that cover the main aspects of the website loading experience. And the fact that Google is now using CWV as a search ranking signal provides additional motivation for people to improve them.</p>
<p><strong>Recommended Reading</strong>: <em>“<a href="https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/">An In-Depth Guide To Measuring Core Web Vitals</a>” by Barry Pollard</em></p>
<p>At Wix, we focus on CWV when analyzing field data, but also use lab measurements during the development process. In particular, lab tests are critical for implementing <a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Performance_budgets">performance budgets</a> in order to prevent performance degradations. The best implementations of performance budgets integrate their enforcement into the CI/CD process, so they are applied automatically, and prevent deployment to production when a regression is detected. When such a regression does occur it breaks the build, forcing the team to fix it before deployment can proceed. </p>
<p>There are various performance budgeting products and open-source tools available, but we decided to create our own custom budgeting service called <strong>Perfer</strong>. This is because we operate at a much larger scale than most web development operations, and at any given moment hundreds of different components are being developed at Wix and are used in thousands of different combinations in millions of different websites.</p>
<p>This requires the ability to test a very large number of configurations. Moreover, in order to avoid breaking builds with random fluctuations, tests that measure performance metrics or scores are run multiple times and an aggregate of the results is used for the budget. In order to accommodate such a high number of test runs without negatively impacting build time, Perfer executes the performance measurements in parallel on a cluster of dedicated servers called <strong>WatchTower</strong>. Currently, WatchTower is able to execute up to 1,000 Lighthouse tests per minute.</p>
<p>After deployment performance data is collected anonymously from all Wix sessions in the field. This is especially important in our case because the huge variety of Wix websites makes it effectively impossible to test all relevant configurations and scenarios “in the lab.” By collecting and analyzing RUM data, we ensure that we have the best possible insight into the experiences of actual visitors to the websites. If we identify that a certain deployment degrades performance and harms that experience, even though this degradation was not identified by our lab tests, we can quickly roll it back.</p>
<p>Another <strong>advantage of field measurements</strong> is that they match the approach taken by Google in order to collect performance data into the CrUX database. Since it is the CrUX data that is used as an input for Google’s performance ranking signal, utilizing the same approach for performance analysis is very important.</p>
<p>All Wix sessions contain custom instrumentation code that gathers performance metrics and transmits this information anonymously back to our telemetry servers. In addition to the three CWV, this code also reports Time To First Byte (<strong>TTFB</strong>), First Contentful Paint (<strong>FCP</strong>), Total Blocking Time (<strong>TBT</strong>), and Time To Interactive (<strong>TTI</strong>), and also low-level metrics such as DNS lookup time and SSL handshake time. Collecting all this information makes it possible for us to not only quickly identify performance issues in production, but also to analyze the root causes of such issues. For example, we can determine if an issue was caused by changes in our own software by the changes in our infrastructure configuration, or even by issues affecting third-party services that we utilize (such as CDNs).</p>
Upgrading Our Services And Infrastructure
<p>Back when I joined Wix seven years ago, we only had a single data center (along with a fallback data center) in the USA which was used to serve users from all around the world. Since then we’ve expanded the number of data centers significantly, and have multiple such centers spread around the globe. This ensures that wherever our users connect from, they’ll be serviced both quickly and reliably. In addition, we use CDNs from multiple providers to <strong>ensure rapid content delivery regardless of location</strong>. This is especially important given that we now have users in 190 countries.</p>
<p>In order to make the best possible use of this enhanced infrastructure, we completely redesigned and rewrote significant portions of our front-end code. The goal was to shift as much of the computation as possible off of the browsers and onto fast servers. This is especially beneficial in the case of mobile devices, which are often less powerful and slower. In addition, this significantly reduced the amount of JavaScript code that needs to be downloaded by the browser.</p>
<p>Reducing JavaScript size almost always benefits performance because it decreases the overhead of the actual download as well as parsing and execution. Our measurements showed a direct correlation between the JavaScript size reduction and performance improvements:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/144a5625-e42f-4d49-b77c-f11976c00b1a/6-improving-performance-wix-websites-case-study.png" /></p>
<p>Another benefit of moving computations from browsers to servers is that the results of these computations can often be cached and reused between sessions even for unrelated visitors, thus reducing per-session execution time dramatically. In particular, when a visitor navigates to a Wix site for the first time, the HTML of the landing page is generated on the server by Server-Side Rendering (<strong>SSR</strong>) and the resulting HTML can then be propagated to a CDN.</p>
<p>Navigations to the same site — even by unrelated visitors — can then be served directly from the CDN, without even accessing our servers. If this workflow sounds familiar that’s because it’s essentially the same as the on-demand mechanism provided by some advanced <a href="https://jamstack.org/">Jamstack</a> services.</p>
<p><strong>Note</strong>: <em>“On-demand” means that instead of Static Site Generation performed at build time, the HTML is generated in response to the first visitor request, and propagated to a CDN at runtime.</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3370e2e4-ab0b-4eeb-a3c7-44d91792f81c/2-improving-performance-wix-websites-case-study.jpg" /></p>
<p>Similarly to Jamstack, client-side code can enhance the user interface, making it more dynamic by <strong>invoking backend services using APIs</strong>. The results of some of these APIs are also cached in a CDN as appropriate. For example, in the case of a shopping cart checkout icon, the HTML for the button is generated on the server, but the actual number of items in the cart is determined on the client-side and then rendered into that icon. This way, the page HTML can be cached even though each visitor is able to see a different item count value. If the HTML of the page does need to change, for example, if the site owner publishes a new version, then the copy in the CDN is immediately purged.</p>
<p>In order to reduce the impact of computations on end-point devices, we moved business logic that does need to run in the browsers into <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Web Workers</a>. For example, business logic that is invoked in response to user interactions. The code that runs in the browser’s main thread is mostly dedicated to the actual rendering operations. Because Web Workers execute their JavaScript code off of the main thread, they don’t block event handling, <strong>enabling the browser to quickly respond</strong> to user interactions and other events.</p>
<p>Examples of code that runs in Web Workers include the business logic of various vertical solutions such as e-commerce and bookings. Sending requests to backend services is mostly done from Web Workers, and the responses are parsed, stored and managed in the Web Workers as well. As a result, using Web Workers can reduce blocking and improve the FID metric significantly, providing better responsiveness in general. In lab measurements, this improved TBT measurements.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc51a983-801b-48d9-8267-e3910f1a8f1c/4-improving-performance-wix-websites-case-study.png" /></p>
Enhanced Media Delivery
<p>Modern websites often provide a richer user experience by downloading and presenting much more media resources, such as images and videos, than ever before. Over the past decade the median amount of bytes of images downloaded by websites, according to the Google CrUX database, has <a href="https://httparchive.org/reports/state-of-images#bytesImg">increased more than eightfold</a>!</p>
<p>This is more than the median improvement in network speeds during the same period, which results in slower loading times. Additionally, our RUM data (field measurements) shows that for almost ¾ of Wix sessions the LCP element is an image. All of this highlights the need to deliver images to the browsers as efficiently as possible and to quickly display the images that are in a webpage’s initially visible viewport area.</p>
<p>At the same time, it is crucial to deliver the highest quality of images possible in order to provide an engaging and delightful user experience. This means that improving performance by noticeably degrading visual experience is almost always out of the question. The performance enhancements we implement need to preserve the original quality of images used, unless explicitly specified otherwise by the user.</p>
<p>One technique for improving media-related performance is optimizing the delivery process. This means downloading required media resources as quickly as possible. In order to achieve this for Wix websites, we use a CDN to deliver the media content, as we do with other resources such as the HTML itself. And by specifying a lengthy caching duration in the HTTP response header, we allow images to be cached by browsers as well. This can improve the loading speed for repeat visits to the same page significantly by completely avoiding downloading the images over the network again.</p>
<p>Another technique for improving performance is to deliver the required image information more efficiently by reducing the number of bytes that need to be downloaded while preserving the desired image quality. One method to achieve this is to use a modern image format such as <a href="https://developers.google.com/speed/webp">WebP</a>. Images encoded as WebP are generally 25% to 35% smaller than equivalent images encoded as PNG or JPG. Images uploaded to Wix are automatically converted to WebP before being delivered to <a href="https://caniuse.com/webp">browsers that support this format</a>.</p>
<p>Very often images need to be resized, cropped, or otherwise manipulated when displayed within a webpage. This manipulation can be performed inside the browser using CSS, but this usually means that more data needs to be downloaded than is actually used. For example, all the pixels of an image that have been cropped out aren’t actually needed but are still delivered. We also take into account viewport size and resolution, and display pixel depth, to optimize the image size. For Wix sites, we perform these manipulations on the server-side <strong>before</strong> the images are downloaded, this way we can ensure that only the pixels that are actually required are transmitted over the network. On the servers, we employ AI and ML models to generate resized images at the best quality possible.</p>
<p>Yet another technique that is used for reducing the amount of image data that needs to be downloaded upfront is <a href="https://web.dev/browser-level-image-lazy-loading/">lazy loading images</a>. This means not loading images that are wholly outside the visible viewport until they are about to scroll in. Deferring image download in this way, and even avoiding it completely (if a visitor never scrolls to that part of the page), reduces network contention for resources that are already required as soon as the page loads, such as an LCP image. Wix websites automatically utilize lazy loading for images, and for various other types of resources as well.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/927fe8b2-0ecf-4310-92dd-268941ad6d55/3-improving-performance-wix-websites-case-study.png" /></p>
Looking Forward
<p>Over the past two years, we have deployed numerous enhancements to our platform intended to improve performance. The result of all these enhancements is a dramatic increase in the percentage of Wix websites that get a good score for all three CWVs compared to a year ago. But performance is a journey, not a destination, and we still have many more action items and future plans for improving websites’ speed. To that end, we are investigating new browser capabilities as well as additional changes to our own infrastructure. The performance budgets and monitoring that we have implemented provide safeguards that these changes provide actual benefits.</p>
<p>New media formats are being introduced that have the potential to reduce download sizes even more while retaining image quality. We are currently investigating <a href="https://www.smashingmagazine.com/2021/09/modern-image-formats-avif-webp/#avif">AVIF</a>, which looks to be especially promising for photographic images that can use lossy compression. In such scenarios, AVIF can provide significantly reduced download sizes even compared to WebP, while retaining image quality. AVIF also supports progressive rendering which may improve perceived performance and user experience, especially on slower connections, but currently won’t provide any benefits for CWV.</p>
<p>Another promising browser innovation that we are researching is the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility">content-visibility CSS property</a>. This property enables the browser to skip the effort of rendering an HTML element until it’s actually needed. In particular, when <code>content-visibility:auto</code> setting is applied to an element that is off-screen its descendants are not rendered. This enables the browser to skip most of the rendering work, such as styling and layout of the element’s subtree.</p>
<p>This is especially desirable for many Wix pages that tend to be lengthy and content-rich. In particular, Wix’s new EditorX responsive sites editor support sophisticated grid and flexbox layouts that can be expensive for the browser to render, so that avoiding unnecessary rendering operations is especially desirable. Unfortunately, this property is currently only supported in Chromium-based browsers. Also, it’s challenging to implement this functionality in such a way that no Wix website is ever adversely affected in terms of its visual appearance or behavior.</p>
<p><a href="https://developers.google.com/web/updates/2019/02/priority-hints">Priority Hints</a> is an upcoming browser feature that we are also investigating, which promises to improve performance by providing greater control over when and how browsers download resources. This feature will inform browsers about which resources are more urgent and should be downloaded ahead of other resources. For example, a foreground image could be assigned a higher priority than a background image since it’s more likely to contain significant content. On the other hand, if applied incorrectly, priority hints can actually degrade download speed, and hence also CWV scores. Priority hints are currently undergoing Origin Trial in Chrome.</p>
<p>In addition to enhancing Wix’s own infrastructure, we’re also working on providing better tooling for our users so that they can design and implement faster websites. Since Wix is highly customizable, users have the freedom and flexibility to create both fast and slow websites on our platform, depending on the decisions they make while building these sites. Our goal is to inform users about the performance of their decisions so that they can make appropriate choices. This is similar to the <a href="https://seoguide.wix.com/en/">SEO Wiz</a> tool that we already provide.</p>
Summary
<p>Implementing a performance culture at Wix enabled us to apply performance enhancements to almost every part of our technological stack — from infrastructure to software architecture and media formats. While some of these enhancements have had a greater impact than others, it’s the cumulative effect that provides the overall benefits. And these benefits aren’t just measurable at a large scale; they’re also apparent to our users, thanks to tools like WebPageTest and Google PageSpeed Insights and actual feedback that they receive from their own users.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a52b4c65-f0b1-4cbd-8c55-e9275cee5aa4/7-improving-performance-wix-websites-case-study.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ebbb4cb-a18a-4162-bef1-58edc3dcab05/improving-performance-wix-websites-case-study-1.png" /></p>
<p>The feedback we ourselves receive, from our users and the industry at large, and the tangible benefits we experience, drive us forward to continue improving our speed. The performance culture that we’ve implemented is here to stay.</p>
<h3>Related Resources</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=bVartMNq_Kc">How to Optimize Your Wix Site for Core Web Vitals</a> (Joint Google and Wix webinar)</li>
<li>“<a href="https://web.dev/wix/">How Wix improved website performance by evolving their infrastructure</a>” by Alon Kochba</li>
<li>“<a href="https://www.smashingmagazine.com/2021/01/front-end-performance-2021-free-pdf-checklist/">Front-End Performance Checklist 2021</a>” by Vitaly Friedman</li>
<li><a href="https://www.wix.com/learn-about-performance">Learn about Wix performance</a>, Wix.com</li>
<li>“<a href="https://youtu.be/sere07YqHkU">My Website is Slow, Now What?</a>” by Dan Shappir</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:19;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:27:"Next.js Wildcard Subdomains";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:64:"https://smashingmagazine.com/2021/11/nextjs-wildcard-subdomains/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:64:"https://smashingmagazine.com/2021/11/nextjs-wildcard-subdomains/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 19 Nov 2021 10:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:274:"Hosting with a wildcard subdomain enables your users to visit your site on any subdomain of your domain (<code>*.example.com</code>), and as you can imagine, we can use this to create unique user experiences which we’ll be exploring in this article through a Next.js lens.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:38:"hello@smashingmagazine.com (Sam Poder)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:147:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b24747b-6f11-4588-a119-16eaf38bc933/nextjs-wildcard-subdomains.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:14357:"<p>A “wildcard”? What in the world? Great question, these types of domain stem from <em>Wildcard DNS Records</em> which look like this:</p>
<pre><code>*.example.               3600     TXT   "Wild! You have found a wildcard."
</code></pre>

<p>When used, this DNS record will cause any subdomain that matches with the wildcard to hold a <code>TXT</code> value of: “Wild! You have found a wildcard.”</p>
<p>For example, if this was set on the domain <code>smashingmagazine.com</code>, <code>apples.example.smashingmagazine.com</code> and <code>oranges.example.smashingmagazine.com</code> would both return the above TXT value. The same principle can be applied to CNAME &amp; A records as well.</p>
Wild Use Cases For Wildcards
<p>Wildcards can be used for a wide range of things. For now, let’s focus on where they can be applied in combination with Next.js:</p>
<ol>
<li><strong>Providing Hosted Services</strong><br />The most common use of wildcard domains is to provide users of hosted services their own space with a unique subdomain. For example, if I was building a platform for restaurants to host digital ordering platforms with the domain <code>menus.abc</code>, I would be able to offer Dom’s Pizzeria <code>domspizzeria.menus.abc</code> and Magical Prata the domain <code>magicalprata.menus.abc</code>. The benefit of this is that it gives each of these establishments their enclosed space which they can customize and build out. This space can act as its own website — not tied to anything.</li>
<li><strong>Hosting Content And Personal Portfolios</strong><br />Wildcards can also be used as a space for hosting content in portfolios, giving a sense of individuality to these portfolios, an example of this would be how Medium provides subdomains for the authors.</li>
<li><strong>Wilder More Creative Use Cases</strong><br />You can’t define these use cases, but there are many creative use cases of these styles of domains. For example, later in this article, we’ll be developing a web toy that flips a webpage upside down making it readable for Australians. </li>
</ol>
The Caveats Of Wildcards With Next.js
<p><em>Sigh.</em> Unfortunately, using wildcards isn’t perfect there are a couple of drawbacks:</p>
<ul>
<li><strong>No More Static-Site Generation (and ISR)</strong><br />Unfortunately, there aren’t any special systems to provide custom statically generated pages for different wildcard subdomains like you may with dynamic routing for example (where you have <code>[slug].js</code> files).</li>
<li><strong>Difficulties with Development</strong><br />When developing locally, it can be a pain to simulate wildcard domains and we’ll be touching on this a fair bit later on in this article but it is something important to keep in mind.</li>
<li><strong>Limited Deployment Platforms</strong><br />Vercel supports Wildcard Domains, however, other Jamstack oriented platforms do not all support wildcard domains. For example, Netlify limits the feature to a select group of users on the Pro plan.</li>
</ul>
Building With Wildcards
<p>With all this talk, let’s look at building with these domains. We’ll be focusing on three places where you can get the wildcard:</p>
<ol>
<li><a href="#server-side-in-getserversideprops">Server Side In <code>getServerSideProps</code></a>,</li>
<li><a href="#client-side-with-useeffect">Client Side With <code>useEffect</code></a>,</li>
<li><a href="#server-side-on-api-routes-and-edge-functions"><a href="link">Server Side On API Routes And Edge Functions</a></a>.</li>
</ol>
<h3>Server Side In <code>getServerSideProps</code></h3>
<p>This is the most commonplace in which you will need to extract the wildcard, you can use this on pages where you need to render completely different content for different wildcards. As discussed above, this can not be done through static site generation so we must do it on server-side rendered pages.</p>
<p>The <code>getServerSideProps</code> is passed a context object, in this object you can access the HTTP request object using <code>context.req</code>. In this request object, you can access the hostname at <code>headers.host</code>, which will return a string such as <code>example.yourdomain.com</code>. We can split the string into an array across each period and then access the first item in said array. In code, that looks like this:</p>
<pre><code>export async function getServerSideProps(context) {
  let wildcard = context.req.headers.host.split(".")[0];
  wildcard =
    wildcard != "yourdomain"
      ? process.env.NODE_ENV != "development"
        ? wildcard
        : process.env.TEST_WILDCARD
      : "home";
  return { props: { wildcard } };
}</code></pre>

<p>As you can see in this piece of code, we do an extra set processing on the wildcard if it’s the base domain we set the wildcard to <code>home</code> (if taking user input, this is a case you will need to handle) and if we are testing on localhost we can test out other wildcards. In our default export function, which renders our page we can use a switch statement to handle the wildcards:</p>
<pre><code>export default function App(props) {
  switch(props.wildcard) {
    case "home":
      return &lt;div&gt;Welcome to the home page!&lt;/div&gt;;
      break;
    default:
      return &lt;div&gt;The wild card is: {props.wildcard}.&lt;/div&gt;;
  }
}</code></pre>

<h3>Client Side With <code>useEffect</code></h3>
<p>If you only want to make small modifications to each page on a different wildcard, you can avoid using server-side rendering by using the <code>useEffect</code> hook on the client-side. This approach will be rather similar to how we did it in <code>getServerSideProps</code>, except we will be relying on <code>window.location.hostname</code>. Using <code>window</code> means that the initial server render won’t be able to access the information, so we must wrap it within a <code>useEffect</code> hook that runs on the client-side. Here’s how that code looks like:</p>
<pre><code>// useEffect and useState must be imported from 'react'

const [wildcard, setWildcard] = useState("")
  useEffect(() =&gt; {
    setWildcard(window.location.hostname.split(".")[0])
  }, [])</code></pre>

<p>This approach, however, is far from perfect as there is a delay between the page’s first render and the wildcard being available. Therefore, if you are making drastic changes based on the wildcard then the changes will be jarring for your user. This may also hurt your cumulative layout shift measure on your web vitals. With this in mind, I highly recommend limiting your use of this approach to adaptations that would be off-sight from the viewer on the initial load. An example would be a branded footer, on a technical documentation page. It is, of course, still handy to know.</p>
<h3>Server Side On API Routes And Edge Functions</h3>
<p>API routes are another area where you may want to access a wildcard from. Fortunately, the same request object we discussed in the above section on <code>getServerSideProps</code> is also available when using a Node.js API route with Next.js. We can access it like this:</p>
<pre><code>export default (req, res) =&gt; {
  let wildcard = req.headers.host.split(".")[0];
  wildcard =
    wildcard != "yourdomain"
      ? process.env.NODE_ENV != "development"
        ? wildcard
        : process.env.TEST_WILDCARD
      : "home";
  res.json({ wildcard: wildcard })
}</code></pre>

<p>Following this, we can then take certain actions such as fetching different data from your database depending on the wildcard and return that from the API.</p>
<p>This same logic can be applied to Next.js’ new Edge Functions / Middleware. This enables you to use wildcards in more than one route without duplicating code as well as speeding up the processing as code execution happens on the edge. Whilst the functionality is still in beta, it’s certainly something to keep an eye on.</p>
<pre><code>// _middleware.js
export function middleware(req) {
  let wildcard = req.headers.get("host").split(".")[0];
  console.log(wildcard);
  wildcard =
    wildcard != "yourdomain"
      ? process.env.NODE_ENV != "development"
        ? wildcard
        : process.env.TEST_WILDCARD
      : "home";
  console.log(process.env.TEST_WILDCARD);
  return new Response(JSON.stringify({ wildcard: wildcard }), {
    status: 200,
    headers: { "Content-Type": "application/json" },
  });
}</code></pre>



The 🦘Aussie-izer
<p>Now that we’ve explored the theory of this strategy, let’s explore how we put it into practice. In this section, we’ll be taking this approach to build a project that flips websites upside down (well, websites that are using a .com domain and aren’t subdomains) called the 🦘Aussie-izer.</p>
<p>To get started, we’re going to want to run <code>yarn init</code> and then <code>yarn add next react react-dom</code>, and finish up by adding these standard scripts to our <code>package.json</code>:</p>
<pre><code>"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint"
}</code></pre>

<p>As soon as we’ve got a standard Next.js project set up, we’re going to want to create the only code file we’ll need for this project: <code>pages/index.js</code>.</p>
<p>First, we’ll want to add the <code>getServerSideProps</code> function in which we’ll extract the wildcard (as I’ll be hosting this at <code>aussieizer.sampoder.com</code>) that’s what I’ll be evaluating to <code>home</code> as:</p>
<pre><code>export async function getServerSideProps(context) {
  let wildcard = context.req.headers.host.split(".")[0];
  wildcard =
    wildcard != "aussieizer"
      ? wildcard != "localhost:3000"
        ? wildcard
        : process.env.TEST_WILDCARD
      : "home";
  return { props: { wildcard } };
}</code></pre>

<p>We’ll then be using that wildcard, to render an iFrame to fill that page (by flipping iFrame over to create the effect), with our <code>src</code> being set to <code>{`https://${props.wildcard}.com`}</code>. We’ll use a switch case, as we discussed above, to render a small helper page if they visit the home page:</p>
<div>
<pre><code>export default function App(props) {
  switch (props.wildcard) {
    case "home":
      return (
        &lt;div&gt;
          Welcome to the Aussie-izer! This only works for .com domains. If you
          want to Aussie-ize{" "}
          &lt;a href="<a href="https://example.com&quot;&gt;https://example.com&lt;/a">https://example.com"&gt;https://example.com&lt;/a</a>&gt; visit{" "}
          &lt;a href="<a href="https://example.aussieizer.sampoder.com&quot;">https://example.aussieizer.sampoder.com"</a>&gt;
            <a href="https://example.aussieizer.sampoder.com">https://example.aussieizer.sampoder.com</a>
          &lt;/a&gt;.
        &lt;/div&gt;
      );
      break;
    default:
      return (
        &lt;iframe
          src={<code>https://${props.wildcard}.com</code>}
          style={{
            transform: "rotate(180deg)",
            border: "none",
            height: "100vh",
            width: "100%",
            overflow: "hidden",
          }}
          frameBorder="0"
          scrolling="yes"
          seamless="seamless"
          height="100%"
          width="100%"
        &gt;&lt;/iframe&gt;
      );
  }
}</code></pre>
</div>

<p>And we’re ready to go! The live version is available at <a href="https://aussieizer.sampoder.com">https://aussieizer.sampoder.com</a> and the source code can be found at <a href="https://github.com/sampoder/aussie-izer/">https://github.com/sampoder/aussie-izer/</a>. </p>
Hosting/Deployment
<p>If you’re hosting on a custom server, wildcard domains will be a breeze to set up through DNS. However, a great part about using Jamstack is being able to host on services such as Vercel or Netlify; these services have their own domain management systems.</p>
<h3>Vercel</h3>
<p>Vercel supports wildcard domains out of the box — for all accounts. To use them, first visit the <code>Domains</code> section of your deployment’s <code>Settings</code> tab. Next, you’ll want to enter your domain by using a <code>*</code> to signify the wildcard.</p>
<p>For the above example, I entered:</p>
<pre><code>*.aussieizer.sampoder.com</code></pre>

<p>You most likely will also want to add your root domain (<code>aussieizer.sampoder.com</code>, in my case) to be able to provide a homepage or some instructions, however, that could also be a separate codebase.</p>
<h3>Netlify</h3>
<p>Netlify limits their wildcards feature to Pro accounts; if you have a Pro account, you will need to email their support staff for them to then enable the option on your account. It will show up in the domain settings page once enabled.</p>
<h3>Render</h3>
<p>Render also offers wildcard domains to all users. Simply enter a domain with a <code>*</code> (signifying your wildcard) in the <code>Add Custom Domain</code> input on the custom domains section of your site’s settings page which will enable the wildcard. Please note that Render will require you to add additional records to your DNS so that they can issue a <code>LetsEncrypt</code> SSL certificate (exact instructions will be shown to you when you input your wildcard domain).</p>
That’s It!
<p>Wildcard domains often go under the radar — I hope you enjoyed exploring them with me. Thank you!</p>
<p><em>Also: FYI Australians do not actually see upside down.</em></p>
<h3>Further Reading On Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2021/05/evolution-jamstack/">The Evolution Of Jamstack</a>,” Mathias Biilmann</li>
<li>“<a href="https://www.smashingmagazine.com/2021/07/global-local-styling-nextjs/">Global vs. Local Styling In Next.js</a>,” Alexander Dubovoy</li>
<li>“<a href="https://www.smashingmagazine.com/2021/06/breaking-down-bulky-builds-netlify-nextjs/">Breaking Down Bulky Builds With Netlify And Next.js</a>,” Atila Fassina</li>
<li>“<a href="https://www.smashingmagazine.com/2020/08/smashing-podcast-episode-23/">What Is Next.js?</a>,” Smashing Podcast episode with Guillermo Rauch</li>
<li>“<a href="https://www.smashingmagazine.com/2020/11/smashing-podcast-episode-29/">How Does Netlify Dogfood The Jamstack?</a>,” Smashing Podcast episode with Leslie Cohn-Wein</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:20;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:60:"A Guide To Modern CSS Colors With RGB, HSL, HWB, LAB And LCH";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:61:"https://smashingmagazine.com/2021/11/guide-modern-css-colors/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:61:"https://smashingmagazine.com/2021/11/guide-modern-css-colors/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 17 Nov 2021 16:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:199:"In this article, we’ll take a look at the best ways to handle colors in CSS today, some tips for using them in a design system, and what we can expect from our colors in the not-too-distant future.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:44:"hello@smashingmagazine.com (Michelle Barker)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:144:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b424cd2e-1e44-4ca2-8506-4e45a5bdb570/guide-modern-css-colors.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:20342:"<p>There’s more to color on the web than meets the eye, and it’s about to get a lot more interesting! Today, we’ll take a look at the best ways to use colors in a design system, and what we can expect from our colors in the not-too-distant future.</p>
Well-Known Color Values
<p>There are many different ways to define colors in CSS. <a href="https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/">CSS named colors</a> are one of the simplest ways to color an element:</p>
<pre><code>.my-element {
  background-color: red;
}
</code></pre>

<p>These are very limited, and rarely fit the designs we are building! We could also use color hex (hexadecimal) values. This code gives our element a red background color:</p>
<pre><code>.my-element {
  background-color: #ff0000;
}
</code></pre>

<p>Unless you’re a color expert, hex values are very difficult to read. It’s unlikely you would be able to guess the color of an element by reading the hex value. When building a website we might be given a hex color value by a designer, but if they asked us to make it, say 20% darker, we would have a hard time doing that by adjusting the hex value, without a visual guide or color picker.</p>
<h3>RGB</h3>
<p>RGB (red, green, blue) notation is an alternative way of writing colors, giving us access to the same range of colors as hex values, in a much more readable form. We have an <code>rgb()</code> function in CSS for this. Colors on the web are additive, meaning the higher the proportion of red, green and blue, the lighter the resulting color will be. If we only use the red channel, the result is red:</p>
<pre><code>.my-element {
  background-color: rgb(255, 0, 0);
}
</code></pre>

<p>Setting the red, green and blue channels to the highest value will result in white:</p>
<pre><code>.my-element {
  background-color: rgb(255, 255, 255);
}
</code></pre>

<p>We can also add an alpha channel (for transparency), by using the <code>rgba()</code> function:</p>
<pre><code>.my-element {
  background-color: rgba(255, 0, 0, 0.5); // transparency of 50%
}

.my-element {
  background-color: rgba(255, 0, 0, 1); // fully opaque
}
</code></pre>

<p><code>rgb()</code> and <code>rgba()</code> allow us to “mix” colors in our code to some extent, but the results can be somewhat unpredictable.</p>
<h3>HSL</h3>
<p>More recently, we have been able to use HSL (hue, saturation, lightness) values, with the <code>hsl()</code> and <code>hsla()</code> color functions. As a developer, these are far more intuitive when it comes to adjusting color values. For example, we can get darker and lighter variants of the same color by adjusting the <code>lightness</code> parameter:</p>
<pre><code>.my-element {
  background-color: hsl(0deg, 100%, 20%); // dark red
}

.my-element {
  background-color: hsl(0deg, 100%, 50%); // medium red
}

.my-element {
  background-color: hsl(0deg, 100%, 80%); // light red
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6d3545f-7d8b-497a-99be-6f4bb8704b64/1-modern-css-color.png" /></p>
<p>The <code>hue</code> parameter represents the position on a color wheel, and can be any value between <code>0</code> and <code>360deg</code>. The function also accepts turn units (e.g. <code>0.5turn</code>), and unitless values.</p>
<p>The following are all valid:</p>
<pre><code>.my-element {
  background-color: hsl(180deg, 50%, 50%);
}

.my-element {
  background-color: hsl(0.5turn, 50%, 50%);
}

.my-element {
  background-color: hsl(180, 50%, 50%);
}
</code></pre>

<p><strong>Tip</strong>: Holding down SHIFT and clicking the color swatch in the inspector in Chrome and Firefox dev tools will toggle the color value between hex, RGB and HSL!</p>
<p><code>hsl()</code> and <code>hsla()</code> lend themselves well to manipulation with custom properties, as we’ll see shortly.</p>
<h3><code>currentColor</code></h3>
<p>The <code>currentColor</code> keyword is worth a mention as another way of setting a color on an element that’s been around for a while. It effectively allows us to use the current text color of an element as a variable. It’s pretty limited when compared with custom properties, but it’s often used for setting the fill color of SVG icons, to ensure they match the text color of their parent. <a href="https://css-tricks.com/cascading-svg-fill-color/">Read about it here</a>.</p>
Modern Color Syntax
<p>The <a href="https://www.w3.org/TR/css-color-4">CSS Color Module Level 4</a> provides us with a more convenient syntax for our color functions, which is <a href="https://caniuse.com/?search=space-separated">widely supported in browsers</a>. We no longer need the values to be comma-separated, and the <code>rgb()</code> and <code>hsl()</code> functions can take an optional alpha parameter, separated with a forward slash:</p>
<pre><code>.my-element {
  /* optional alpha value gives us 50% opacity */
  background-color: hsl(0 100% 50% / 0.5);
}

.my-element {
  /* With no alpha value the background is fully opaque*/
  background-color: hsl(0 100% 50%);
}
</code></pre>

New CSS Color Functions
<h3>HWB</h3>
<p>HWB stands for hue, whiteness and blackness. Like HSL, the hue can be anywhere within a range of 0 to 360. The other two arguments control how much white or black is mixed into that hue, up to 100% (which would result in a totally white or totally black color). If equal amounts of white and black are mixed in, the color becomes increasingly gray. We can think of this as being similar to mixing paint. It could be especially useful for creating monochrome color palettes</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/536ab898-2bb4-4c42-a9f1-e46bf1da7f63/2-modern-css-color.png" /></p>
<p>Try it out with <a href="https://codepen.io/smashingmag/pen/xxLmOgV">this demo</a> (works in Safari only):</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/da33544f-aab5-4fc3-81d9-d3e5f75442d4/3-modern-css-color.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71cf899c-c146-484e-bb1a-5a26e9e7c55d/4-modern-css-color.png" /></p>
<p>Why do we need LAB and LCH when we have HSL? One reason is that using LAB or LCH, gives us access to a much larger range of colors. LCH and LAB are designed to give us access to the entire spectrum of human vision. Furthermore, HSL and RGB have a few shortcomings: they are not perceptually uniform and, in HSL, increasing or decreasing the lightness has quite a different effect depending on the hue.</p>
<p>In <a href="https://codepen.io/smashingmag/pen/yLoGJXd">this demo</a>, we can see a stark contrast between LCH and HSL by hitting the grayscale toggle. For the HSL hue and saturation strips, there are clear differences in the perceptual lightness of each square, even though the “lightness” component of the HSL function is the same! Meanwhile, the chroma and hue strips on the LCH side have an almost-uniform perceptual lightness.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4253d9b2-46d7-4b10-9e1a-b5f3ac6cea1c/5-modern-css-color.png" /></p>
<p>We can also see a big difference when using LCH color for gradients. Both these gradients start and end with the same color (with LCH values converted to the HSL equivalents using <a href="http://colormine.org/convert/lch-to-hsl">this converter</a>). But the LCH gradient goes through vibrant shades of blue and purple in the middle, whereas the HSL gradient looks muddier and washed-out by comparison.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72ba74de-3574-4301-ab9c-03b37c52acf6/6-modern-css-color.png" /></p>
<ul>
<li><a href="https://codepen.io/smashingmag/pen/VwzqjzW">See the demo →</a></li>
</ul>
<p>LAB and LCH, while perhaps being syntactically a little less intuitive, behave in a way that makes more sense to the human eye. In her article, <a href="https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/">LCH color in CSS: what, why, and how?</a>, Lea Verou explains in detail the advantages of LCH color. She also built this <a href="https://css.land/lch/">LCH color picker</a>.</p>
<p>As with other color functions, <code>hwb()</code>, <code>lab()</code> and <code>lch()</code> can also take an optional alpha parameter.</p>
<pre><code>.my-element {
  background-color: lch(80% 240 50 / 0.5); // Resulting color has 50% opacity
}
</code></pre>



Browser Support And Color Spaces
<p><code>hwb()</code>, <code>lab()</code> and <code>lch()</code> are currently only supported in Safari. It’s possible to start using them straight away by providing a fallback for non-supporting browsers. Browsers that don’t support the color function will simple ignore the second rule:</p>
<pre><code>.my-element {
  background-color: lch(55% 102 360);

  /* LCH color converted to RGB using Lea Verou’s tool: https://css.land/lch/ */
  background-color: rgb(98.38% 0% 53.33%);
}
</code></pre>

<p>If other styles depend on newer color functions being supported, we could use a feature query:</p>
<pre><code>.my-element {
  display: none;
}

/* Only display this element if the browser supports lch() */
@supports (background-color: lch(55% 102 360)) {
  .my-element {
    display: block;
    background-color: lch(55% 102 360);
  }
}
</code></pre>

<p>It’s worth noting, as Lea explains in her article, that although modern screens are capable of displaying colors beyond RGB, most browsers currently only support colors within the sRGB color space. In the <a href="https://codepen.io/smashingmag/pen/KKvbMXY">LAB color demo</a> you might notice that moving the sliders beyond a certain point doesn’t actually affect the color, even in Safari where <code>lab()</code> and <code>lch()</code> are supported. Using values outside of the sRGB range will only have an effect when hardware and browsers advance sufficiently.</p>
<p>Safari now supports the <code>color()</code> function, which enables us to display colors in the P3 space, but these are limited to RGB colors for now, and don’t yet give us all the advantages of LAB and LCH.</p>
<pre><code>.my-element {
  background: rgb(98.38% 0% 53.33%); // bright pink
  background: color(display-p3 0.947 0 0.5295); // equivalent in P3 color space
}
</code></pre>

<p><strong>Recommended Reading</strong>: <em>“<a href="https://webkit.org/blog/10042/wide-gamut-color-in-css-with-display-p3/">Wide Gamut Color in CSS with Display-P3</a>” by Nikita Vasilyev</em></p>
Accessibility
<p>Once they are widely supported, perhaps LAB and LCH can help us choose more accessible color combinations. Foreground text should have the same contrast ratio with background colors with different hue or chroma values, as long as their lightness value remains the same. That’s certainly not the case at the moment with HSL colors.</p>
Color Management
<p>A wider range of color functions means we have more options when it comes to managing colors in our application. Often we require several variants of a given color in our design system, ranging from dark to light.</p>
<h3>Custom Properties</h3>
<p>CSS custom properties allow us to store values for reuse in our stylesheets. As they allow partial property values, they can be especially useful for managing and manipulating color values. HSL lends itself particularly well to custom properties, due to its intuitiveness. In the previous demo, I’m using them to adjust the hue for each segment of the color strip by calculating a <code>--hue</code> value based on the element’s index (defined in another custom property). </p>
<pre><code>li {
  --hue: calc(var(--i) * (360 / 10));
  background: hsl(var(--hue, 0) 50% 45%);
}
</code></pre>

<p>We can also do things like calculate complementary colors (colors from opposite sides of the color wheel). Plenty has been written about this, so I won’t cover old ground here, but if you’re curious then Sara Soueidan’s article on <a href="https://www.sarasoueidan.com/blog/hex-rgb-to-hsl/">color management with HSL</a> is a great place to start. </p>
<h3>Migrating From Hex/RGB To HSL</h3>
<p>RGB colors might serve your needs up to a point, but if you need the flexibility to be able to derive new shades from your base color palette then you might be better off switching to HSL (or LCH, once supported). I would recommend embracing custom properties for this.</p>
<p><strong>Note</strong>: <em>There are plenty of online resources for converting hex or RGB values to HSL (here’s <a href="https://www.w3docs.com/tools/color-rgb">one example</a>).</em></p>
<p>Perhaps you have colors stored as Sass variables:</p>
<pre><code>$primary: rgb(141 66 245);
</code></pre>

<p>When converting to HSL, we can assign custom properties for the hue, saturation and lightness values. This makes it easy to create darker or lighter, more or less saturated variants of the original color.</p>
<pre><code>:root {
  --h: 265;
  --s: 70%;
  --l: 50%;

  --primary: hsl(var(--h) var(--s) var(--l));
  --primaryDark: hsl(var(--h) var(--s) 35%);
  --primaryLight: hsl(var(--h) var(--s) 75%);
}
</code></pre>

<p>HSL can be incredibly useful for creating color schemes, as detailed in the article  <a href="https://web.dev/building-a-color-scheme/">Building a Color Scheme</a> by Adam Argyle. In the article he creates light, dark and dim color schemes, using a brand color as a base. I like this approach because it allows for some fine-grained control over the color variant (for example, decreasing the saturation for colors in the “dark” scheme), but still retains the big advantage of custom properties: updating the brand color in just one place will be carried through to all the color schemes, so it could potentially save us a lot of work in the future.</p>
<h3>Sass Color Functions</h3>
<p>When it comes to mixing and adjusting colors, Sass has provided <a href="https://sass-lang.com/documentation/modules/color">color functions</a> to enable us to do just this for many years. We can saturate or desaturate, lighten or darken, even mix two colors together. These work great in some cases, but they have some limitations: firstly, we can only use them at compile-time, not for manipulating colors live in the browser. Secondly, they are limited to RGB and HSL, so they suffer from the same issues of perceptual uniformity, as we can see in <a href="https://codepen.io/smashingmag/pen/abyPZVZ">this demo</a>, where a color is increasingly desaturated yet appears increasingly lighter when converted to grayscale.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad752292-91a6-4289-b31b-784776b86a06/7-modern-css-color.png" /></p>
<p>To ensure that the lightness remains uniform, we could use custom properties with LCH in a similar way to HSL above.</p>
<pre><code>li {
  --hue: calc(var(--i) * (360 / 10));
  background: lch(50% 45 var(--hue, 0));
}
</code></pre>

Color Mixing And Manipulation
<h3>Color Mixing</h3>
<p>One thing CSS doesn’t <em>yet</em> allow us to do is mix colors in the browser. That’s all about to change: the <a href="https://www.w3.org/TR/css-color-5/#color-mix">Level 5 CSS Color Specification</a> (working draft) contains proposals for color mixing functions that sound rather promising. The first is the <code>color-mix()</code> function, which mixes two colors much like Sass’s <code>mix()</code> function. But <code>color-mix()</code> in CSS allows us to specify a color space, and uses the LCH by default, with superior mixing as a result.</p>
<p><strong>Update</strong>: <em><code>color-mix()</code> and <code>color-contrast()</code> are now available behind a flag in Safari 15! Check out <a href="https://appademic.tech/safari-hidden-features-debug-menu/">this article</a> on how to enable experimental features in Safari.</em></p>
<p>The colors don’t have to be LCH when passed in as arguments either, but the interpolation will use the specified color space. We can specify how much of each color to mix, similar to gradient stops:</p>
<pre><code>.my-element {
  /* equal amounts of red and blue */
  background-color: color-mix(in lch, red, blue);
}

.my-element {
  /* 30% red, 70% blue */
  background-color: color-mix(in lch, red 30%, blue);
}
</code></pre>

<h3>Color Contrast And Accessibility</h3>
<p><code>color-contrast()</code> is another proposed function, which really does have huge implications for picking accessible colors. In fact, it’s designed with accessibility in mind first and foremost. It permits the browser to pick the most appropriate value from a list, by comparing it with another color. We can even specify the desired contrast ratio to ensure our color schemes meet WCAG guidelines. Colors are evaluated from left to right, and the browser picks the first color from the list that meets the desired ratio. If no colors meet the ratio, the chosen color will be the one with the highest contrast.</p>
<pre><code>.my-element {
  color: wheat;
  background-color: color-contrast(wheat vs bisque, darkgoldenrod, olive, sienna, darkgreen, maroon to AA);
}
</code></pre>

<p>Because this isn’t supported in any browsers right now, I’ve borrowed this example directly from the spec. when the browser evaluates the expression the resulting color will be <code>darkgreen</code>, as it is the first one that meets the AA contrast ratio when compared to <code>wheat</code>, the color of the text.</p>
<h3>Browser Support</h3>
<p>The Level 5 Color Specification is currently in Working Draft, meaning no browsers yet support the <code>color-contrast()</code> and <code>color-mix()</code> functions and their syntax is subject to change. But it certainly looks like a bright future for color on the web!</p>
Environmental Impact Of Colors
<p>Did you know that your chosen color palette can have an impact on how much energy your website uses? On OLED screens (which account for most modern TVs and laptops), darker colors will use significantly less energy than light colors — with white using the most energy, and black the least. According to Tom Greenwood, author of <a href="https://abookapart.com/products/sustainable-web-design">Sustainable Web Design</a>, blue is also more energy-intensive than colors in the red and green areas of the spectrum. To reduce the environmental impact of your applications, consider a darker color scheme, using less blue, or enabling a dark-mode option for your users. As an added bonus, a more environmentally friendly choice of colors can also reduce the impact on the battery life of mobile devices.</p>
Tools
<ul>
<li><a href="https://codepen.io/robdimarzo/full/xxZgKOR">Hexplorer</a>, Rob DiMarzo<br /><em>Learn to understand hex colors with this interactive visualization.</em></li>
<li><a href="https://css.land/lch/">LCH color picker</a>, Lea Verou and Chris Lilley<br /><em>Get LCH colors and their RGB counterparts.</em></li>
<li><a href="https://www.w3docs.com/tools/color-hwb">HWB color picker</a><br /><em>Visualize HWB colors and convert to HSL, RGB and hex.</em></li>
<li><a href="https://github.com/5t3ph/a11y-color-tokens">Ally Color Tokens</a>, Stephanie Eckles<br /><em>An accessible color token generator.</em></li>
</ul>
Resources
<ul>
<li>“<a href="https://css-tricks.com/nerds-guide-color-web/">A Nerd’s Guide To Color On The Web</a>,” Sarah Drasner, CSS-Tricks</li>
<li>“<a href="https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/">LCH Colors In CSS: What, Why, And How?</a>,” Lea Verou</li>
<li>“<a href="https://css-tricks.com/the-best-color-functions-in-css/">The Best Color Functions In CSS?</a>,” Chris Coyier, CSS-Tricks</li>
<li>“<a href="https://web.dev/building-a-color-scheme/">Building A Color Scheme</a>,” Adam Argyle, Web.dev</li>
<li>“<a href="https://www.smashingmagazine.com/2021/07/hsl-colors-css/">Using HSL Colors In CSS</a>,” Ahmad Shaheed, Smashing Magazine</li>
<li>“<a href="https://www.sarasoueidan.com/blog/hex-rgb-to-hsl/">On Switching From Hex And RGB To HSL</a>,” Sara Soueidan</li>
<li>“<a href="https://webkit.org/blog/6682/improving-color-on-the-web/">Improving Color On The Web</a>,” Dean Jackson, Webkit Blog</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:21;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:77:"Meet Touch Design For Mobile Interfaces, A New Smashing Book By Steven Hoober";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:62:"https://smashingmagazine.com/2021/11/touch-design-pre-release/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:62:"https://smashingmagazine.com/2021/11/touch-design-pre-release/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 16 Nov 2021 16:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:206:"Meet “Touch Design for Mobile Interfaces”, our brand-new guide on designing for mobile with proven, universal, human-centric standards. 400 pages. <strong>Shipping starting in mid-January 2022.</strong>";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:44:"hello@smashingmagazine.com (Vitaly Friedman)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:142:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9bd7979-279d-4547-8540-cb1e344cbf19/newsletter-header-opt.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:19420:"<p>Mobile and touch are the new normal for computing, but there remain a lot of myths, rumors, errors, bias, and out-of-date information on how portable touchscreens are used. Let’s change that!</p><p>In our brand-new book <em>Touch Design for Mobile Interfaces</em>, Steven Hoober shares his <strong>in-depth research about designing for touch</strong> as well as tips, tricks, trends, tendencies, guidelines, and heuristics you can apply to your work immediately to create human-centered mobile interfaces. <a href="/printed-books/touch-design-for-mobile-interfaces/#bookTOC">Jump to table of contents.</a></p>

<ul>
<li><strong><a href="#about-the-book">Jump to the details ↓</a></strong></li>
<li><a href="https://smashingmagazine.com/provide/eBooks/touch-design/touch-design-for-mobile-interfaces-sample-chapter.pdf">Download a free PDF sample</a> (14MB)</li>
<li><strong>Printed books</strong> will be shipped starting in <strong>mid-January 2022</strong>.</li>
<li><a href="/printed-books/touch-design-for-mobile-interfaces/">Get the book right away.</a></li>
</ul>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9bd7979-279d-4547-8540-cb1e344cbf19/newsletter-header-opt.png">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9bd7979-279d-4547-8540-cb1e344cbf19/newsletter-header-opt.png" />
    </a>




About The Book
<p>There are over two billion portable touchscreen devices in use today, and hundreds of millions more installed in cars and kiosks. Sales of traditional mouse-and-keyboard computers have been falling for years, replaced by mobile phones and tablets.</p>

<p>Conventional computers now sport touchscreens and otherwise blur the lines between device types – and between mobile and desktop operating systems. Mobile and touch are <strong>the new computing normal</strong>, but there is a lot of myth, rumor, error, bias, and out-of-date information on how portable touchscreens are used.</p>

<p><em>Touch Design for Mobile Interfaces</em> presents and shares real information on hardware, people, interactions, and environments. Steven Hoober has studied <strong>how people really touch and hold</strong> phones and tablets, as well as seeing it firsthand over twenty years designing products for mobile phones, tablets, kiosks, and computers.</p>

<p>As well as Steven’s in-depth research, the book includes tips, tricks, trends, tendencies, guidelines, and heuristics you can apply to your own designs immediately.</p>

<p><em>400 pages. Written by Steven Hoober. Cover design by Espen Brunborg. <strong>Shipping starting in mid-January 2022.</strong></em></p>

<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f0aae0c-c813-4082-84c8-1eac4a4f72ac/touch-design-book-big-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f0aae0c-c813-4082-84c8-1eac4a4f72ac/touch-design-book-big-opt.png" /></a>Meet our new book “Touch Design for Mobile Interfaces”.

<h3>You’ll learn:</h3>
<ul>
<li>The <strong>history of touch</strong> and how it’s influencing traditional computing platforms still today,</li>
<li>how touch intersects with <strong>human behavior</strong> and impacts your design work,</li>
<li>how people really <strong>hold and touch</strong>,</li>
<li>how your designs can take into account the ways people <strong>adapt their touch</strong> to perform different actions,</li>
<li>how to overcome problems of <strong>visibility and interactivity</strong>,</li>
<li>how to avoid catastrophes when <strong>mistaken taps</strong> are made,</li>
<li>how to <strong>consider likely problems</strong> when planning the design of your app or website,</li>
<li>how to design UIs that attract the eye, <strong>afford action</strong>, and inspire confidence,</li>
<li>how <strong>human vision</strong> is not what it appears to be,</li>
<li>how to create well-organized, usable <strong>templates</strong> for touchscreen design,</li>
<li>the pros and cons of some of the most important <strong>page design elements</strong> (e.g., menus, lists, floating bars, tabs).</li>
</ul>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/363d45e6-b209-47ba-9bf1-0a1581bcd1c2/touch-design-inside-3-opt.png">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/363d45e6-b209-47ba-9bf1-0a1581bcd1c2/touch-design-inside-3-opt.png" /></a>A sneak-peek inside the book. <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/363d45e6-b209-47ba-9bf1-0a1581bcd1c2/touch-design-inside-3-opt.png">Large view</a>.
    



<h3>Who is this book for?</h3>
<p>This book is for <strong>digital-first designers working on mobile or touchscreen products</strong>. If you want to design better for mobile, or you need data to back up your decisions, this book is evidence-based, specific, and full of actionable information. If you want to move from desktop design to mobile, the book provides a path for you to reconsider design decisions for touch and mobility.</p>

<p>There are benefits too for <strong>product designers, managers, and analysts, as well as developers and engineers on mobile touchscreen products</strong>. You’ll be able to plan for the new <em>touch-also</em> world, write better stories and features, and understand how the work environment has moved from predictable computers in cubicles to devices everywhere, anywhere, and anytime.</p>

Table Of Contents
<p>How do people really use their mobile devices? And how can we design better mobile interfaces based on that knowledge?</p>

<p>The <strong>13 chapters</strong> of our shiny new book explore just that.</p>


<div>
    
          
              <div>
                <div>
                  1. Defining Mobile Devices
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>The first chapter describes different devices in the context of their unique attributes of portability, connectivity, and awareness. We’ll come to understand how important it is to understand mobile technology and use patterns, and become aware that mobile paradigms are influencing more traditional computing platforms.</p>
             </div>
         
          
              <div>
                <div>
                  2. The History and Technology of Touch
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Chapter 2 reviews the evolution of direct screen interaction dating back to the 1950s, and the development of commercialized touch since the 1980s. Today’s devices can be better understood by learning how touch technology advanced before achieving ubiquity through capacitive touch.</p>
             </div>
         
          
              <div>
                <div>
                  3. Capacitive Touch
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Chapter 3 addresses how capacitive touch intersects with human behavior and impacts our design work.</p>
             </div>
         
          
              <div>
                <div>
                  4. Standards, Assumptions, and Problems
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>We’ll learn how various standards, assumptions, and problems can be problematic for designers of today’s mobile touchscreens. The specifications, norms, and principles of earlier times are sometimes not to be trusted as they are too often based on technological assumptions that no longer apply.</p>
             </div>
         
          
              <div>
                <div>
                  5. Finding Out How People Hold and Touch
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Chapter 5 covers the observational research Stevn Hoober conducted to discover how people actually manipulate their mobile phones and tablets in everyday use. Through debunking some widely accepted but incorrect assumptions, we’ll learn most of all to change the way we think about designing for touch, because while there are many ways to hold a device, everyone uses them all, constantly shifting from one to another.</p>
             </div>
         
          
              <div>
                <div>
                  6. Touch Accuracy and the Center-Out Preference
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>To understand touchscreen performance, Steven undertook several studies and found that popular notions of touch accuracy and preferred touch regions are wrong. He discusses this in chapter 6 and shows that people favor the middle of the screen for both reading and touching.</p>
             </div>
         
          
              <div>
                <div>
                  7. How Fingers Get In the Way
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Every mobile device user has experienced how fingers get in the way, and in chapter 7, you’ll learn how our designs can take into account the ways people adapt their touch to perform different actions like tapping and scrolling, and to overcome problems of visibility and interactivity.</p>
             </div>
         
         
              <div>
                <div>
                  8. Imprecision and Probability
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Chapter 8 covers the issues around imprecision and probability and shows how we need to design systems, interactions, and processes that prevent mistakes — especially avoiding catastrophe when mistaken taps are made.</p>
             </div>
         
         
              <div>
                <div>
                  9. Phones Are Not Flat
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Mobile devices are used in all kinds of locations and people handle them constantly. People and their environments can be confusing, confounding, and unpredictable. Chapter 9 describes ways we can consider likely problems when planning the design of our apps and websites.</p>
             </div>
         
         
              <div>
                <div>
                  10. People Only Touch What They See
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>We start to move into tactics — with a little less theory, data, research, and background info. Chapter 10 covers best practices in how the UIs of interactive elements are designed to attract the eye, afford action, be readable, and inspire confidence that they can be safely tapped.</p>
             </div>
         
         
              <div>
                <div>
                  11. 1, 2, 3: Designing by Zones
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>In chapter 11, Steven introduces the concept of information design, describes how human vision is not what it appears to be, and then turns all that we’ve learned so far into a simple formula we can all use to create well-organized, usable templates for touchscreen design.</p>
             </div>
         
         
              <div>
                <div>
                  12. Progressive Disclosure
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>Shifting from template theory to template creation practice, in Chapter 12, we’ll review the pros and cons of some of the most important page design elements, such as menus, lists, floating bars, and tabs, to see how they can integrate with the concept of information design for center-out touchscreen products.</p>
             </div>
         
         
              <div>
                <div>
                  13. Practical Mobile Touchscreen Design
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>We’ll finish off by skimming lightly over more or less the entire process of designing digital touchscreen products, from teams to strategy and onward. From these resources we can start building a reference library of how to pursue each aspect of the design process.</p>
             </div>
         
    
</div>

<p><strong>400 pages</strong>. The <a href="/ebooks/touch-design-for-mobile-interfaces-ebook/">eBook is available right away</a> (PDF, ePUB, Amazon Kindle). <strong>Shipping starting in mid-January 2022.</strong> Written by Steven Hoober. Designed by Espen Brunborg.</p>



    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7504223-4ede-41b3-8d59-55ba7e7f5b27/touch-design-inside-1-opt.png">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7504223-4ede-41b3-8d59-55ba7e7f5b27/touch-design-inside-1-opt.png" />
    </a>




About the Author
<p><a href="https://twitter.com/shoobe01"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cf92e10-18f9-400e-8f8f-e4ef510ab87e/steven-hoober-200px-opt.png" /></a><em>Steven Hoober</em> shifted focus from graphic design to mobile UX in 1999. Since then, he designed the first Google mobile search, the first mobile app store, several mobile browsers, and numerous websites and apps for global brands. See more of Steven’s research at <a href="https://4ourthmobile.com/">4ourthmobile.com</a>.</p>


Reviews and Testimonials
<blockquote><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13062cd8-1f45-49e1-b4b8-633901e35400/lucas-roe-opt.png" />“Eye opening and practical, but above all, useful. Steven synthesizes his extensive field observations with a deep technical understanding of touch usage and history. This book balances pragmatic guidelines and theory in a way that’s accessible, memorable, and highly referenceable. I now observe phone usage completely differently, but in a way that seems completely obvious in retrospect.”<br /><br />— <a href="https://twitter.com/glucasroe">Lucas Roe</a>, Design Lead, Vertex</blockquote>

<blockquote><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64cfbe7f-107a-4503-8a84-6e867b91783f/mudassir-azeemi-opt.png" />“We live in a world of touch devices, and even those that don’t have user interfaces are sure to be activated with touch. Reading Steven’s book feels like you are taking a grand tour, full of wisdom and practical advice – and what to look for when designing and developing a real-world experience. And mind you, this book is not just for the creatives. If you are in the C-suite, do yourself a favor and read. It will boost your strategy to bring a good experience to your customers.”<br /><br />— <a href="https://twitter.com/maxeemi">Mudassir Azeemi</a>, Design systems, Ring Central</blockquote>


Technical Details
<ul>
<li>ISBN: 978-3-945749-97-5 (print)</li>
<li><strong>Quality hardcover</strong>, stitched binding, ribbon page marker.</li>
<li>Free worldwide airmail <strong>shipping from Germany starting in mid-January 2022</strong>.</li>
<li><a href="/ebooks/touch-design-for-mobile-interfaces-ebook/">eBook is already available</a> as PDF, ePUB, and Amazon Kindle.</li>
<li><a href="/printed-books/touch-design-for-mobile-interfaces/">Get the book right away.</a></li>
</ul>


Community Matters ❤️
<p>Producing a book takes quite a bit of time, and we couldn’t pull it off without the support of our wonderful <strong>community</strong>. A huge shout-out to Smashing Members for the kind, ongoing support. The eBook is and always will be <a href="https://www.smashingmagazine.com/membership">free for <em>Smashing Members</em></a>. Plus, Members get a friendly discount when purchasing their printed copy. Just sayin’! ;-)</p>

<p><em>Stay smashing, and thank you for your ongoing support, everyone!</em></p>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b13b5c09-702e-4ab3-a6e5-0390d5c26fbc/touch-design-thanks-opt.png">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b13b5c09-702e-4ab3-a6e5-0390d5c26fbc/touch-design-thanks-opt.png" />
    </a>




More Smashing Books &amp; Goodies
<p>Promoting best practices and providing you with practical tips to master your daily coding and design challenges has always been (and will be) at the <strong>core of everything we do</strong> at Smashing.</p>

<p>In the past few years, we were very lucky to have worked together with some talented, caring people from the web community to publish their wealth of experience as <a href="/printed-books/">printed books that stand the test of time</a>. Stefan and Adam are some of these people. Have you checked out their books already?</p>

<div>
<div><a href="/printed-books/typescript-in-50-lessons/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2f2c6d6-4e85-449a-99f5-58bd053bc846/typescript-shop-cover-opt.png" /></a></div><h4><a href="/printed-books/typescript-in-50-lessons/">TypeScript In 50 Lessons</a></h4><p>Everything you need to know about TypeScript, its type system, generics and its benefits.</p><p><a href="/printed-books/typescript-in-50-lessons/">Add to cart $44</a></p>

<div><a href="/ebooks/checklist-cards-digital/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efffa8a0-82a0-415a-8aa5-8684a32083eb/checklist-cards-box-opt.png" /></a></div><h4><a href="/ebooks/checklist-cards-digital/">Interface Design Checklists (PDF)</a></h4><p>100 practical cards for common interface design challenges.</p>
<p><a href="/ebooks/checklist-cards-digital/">Add to cart $15</a></p>

<div><a href="/printed-books/form-design-patterns/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dfedd736-f4dd-467b-aed5-7f3cb5af7dd9/form-design-patterns-shop-image-opt.png" /></a></div><h4><a href="/printed-books/form-design-patterns/">Form Design Patterns</a></h4><p>A practical guide to designing and coding simple and inclusive forms.</p><p><a href="/printed-books/form-design-patterns/">Add to cart $44</a></p>
</div>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:22;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:73:"Powerful Terminal And Command-Line (CLI) Tools For Modern Web Development";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:96:"https://smashingmagazine.com/2021/11/powerful-terminal-commandline-tools-modern-web-development/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:96:"https://smashingmagazine.com/2021/11/powerful-terminal-commandline-tools-modern-web-development/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 15 Nov 2021 13:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:309:"What’s your favorite command-line tool? In this post, Louis Lazaris shares a collection of relevant command-line apps and utilities that he has personally come across in the past few years. If there’s a useful one that hasn’t been mentioned and one you use regularly, please do share it in the comments.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Louis Lazaris)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:179:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2d3081a-5a36-4763-9b94-13bf7d1cb5d6/powerful-terminal-commandline-tools-modern-web-development.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:20858:"<p>Many modern programmers, including front-end and full-stack developers, work daily with the command line. Even those who are relatively new to web development are picking up command-line skills early and finding practical tools and utilities to enhance their productivity in the terminal.</p>
<p>This post presents a categorized list of many command-line apps I’ve personally discovered over the past few years. Some of them are relatively new, others have been around for a while. So I hope something in this roundup will interest you and help you get stuff done when working in the terminal.</p>
<p>You can jump to a category using the navigation below:</p>
<ul>
<li><a href="#terminal-apps">Terminal Apps</a></li>
<li><a href="#terminal-utilities-and-enhancements">Terminal Utilities and Enhancements</a></li>
<li><a href="#command-line-scripting-and-frameworks">Command-line Scripting and Frameworks</a></li>
<li><a href="#productivity-tools-for-the-terminal">Productivity Tools for the Terminal</a></li>
</ul>
Terminal Apps
<p>This section features terminals, multiplexers, console emulators, mobile terminals, and command-line workspaces that you can use to replace the default terminal app on your system.</p>
<h3><code>tmux</code></h3>
<p><a href="https://github.com/tmux/tmux"><code>tmux</code></a> is a popular terminal multiplexer for Unix-like operating systems that lets you easily switch among several programs in a single terminal, with the ability to “detach” a session (while still running in the background) or “reattach” it to a different terminal.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e5982e51-254c-4834-8f4f-4afd3663cf5c/1-terminal-and-cli-tools.png" /></p>
<h3><code>iTerm2</code></h3>
<p><a href="https://iterm2.com/"><code>iTerm2</code></a>, the successor to iTerm, is a replacement for your Terminal on macOS that includes features like split panes, robust search, autocomplete, instant replay, along with a whole slew of configuration options.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/49202387-c48e-452a-8cbd-a053540528d0/2-terminal-and-cli-tools.png" /></p>
<h3>Mosh</h3>
<p><a href="https://mosh.org/">Mosh</a> is a remote terminal app (or mobile shell) for interactive SSH usage that includes several useful features for those who need to do terminal-based tasks over weak WiFi, cellular networks, or other less-reliable connections.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a09da513-8d82-44a6-9d0b-8e15eebf00ba/3-terminal-and-cli-tools.png" /></p>
<h3>Zellij</h3>
<p><a href="https://zellij.dev/">Zellij</a> is a terminal workspace that has the base functionality of a terminal multiplexer (similar to tmux) but includes features that allow users to extend it and create a personalized environment via panes/tabs and plugins.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55161bed-d69a-435e-ab95-7e147631314a/4-terminal-and-cli-tools.png" /></p>
<h3>Hyper</h3>
<p><a href="https://hyper.is/">Hyper</a> is an Electron-based terminal app for Mac, Windows, or Linux that’s built with web technologies (HTML/CSS/JS). Includes dozens of themes and plugins and is built on speed and stability.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21c74aa7-e4b6-4b8c-b655-ff95c0fbbc78/5-terminal-and-cli-tools.png" /></p>
<h3><code>cmder</code></h3>
<p><a href="https://cmder.net/"><code>cmder</code></a> is a portable console emulator for Windows that was built due to the lack of a good option in this area for Windows users.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfd043f0-ffcf-4668-bb46-3a104830b3d5/6-terminal-and-cli-tools.png" /></p>
<h3>a-Shell</h3>
<p><a href="https://holzschu.github.io/a-Shell_iOS/">a-Shell</a> is an iOS app that offers a ‘terminal in your pocket’ with files/directory control, compatibility with Apple Shortcuts, multiple windows, and lots more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e95b053-f85f-4cf1-9476-0404fa36799d/7-terminal-and-cli-tools.png" /></p>
<h3>Eternal Terminal</h3>
<p><a href="https://eternalterminal.dev/">Eternal Terminal</a> is another remote terminal app inspired by other similar, popular projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/077f5b6d-bd3a-44e3-9590-30e185e02c11/8-terminal-and-cli-tools.png" /></p>
<h3>Ten Hands</h3>
<p><a href="https://tenhands.app/">Ten Hands</a> is a terminal app for Mac, Linux, and Windows that is billed as the simplest way to organize and run command-line tasks, useful for those who run similar daily tasks on multiple projects.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/216d5520-62ad-4a4e-9172-602d067bcf5b/9-terminal-and-cli-tools.png" /></p>
<h3>eDEX-UI</h3>
<p><a href="https://github.com/GitSquared/edex-ui">eDEX-UI</a> is a fullscreen, cross-platform terminal emulator and system monitor heavily inspired by science fiction movie UIs, in particular, the Tron: Legacy film.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/651c07c0-12eb-427c-a39b-6602254acd4c/10-terminal-and-cli-tools.png" /></p>
<h3>Tabby</h3>
<p><a href="https://tabby.sh/">Tabby</a>, formerly “Terminus”, is a customizable cross-platform terminal app for local shells, SSH, serial, and Telnet connections that includes support for features like split panes, smart tabs, customizable hotkeys, and lots more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ae3a0cd-8c4a-4c24-8b40-b7ac10cc5c6a/11-terminal-and-cli-tools.png" /></p>
<h3>Fish Shell</h3>
<p><a href="https://fishshell.com/">Fish Shell</a> is another option for a command-line shell for Linux, macOS, and Windows that includes auto-suggest, tab completions, 24-bit color, web-based configuration, syntax highlighting, among other practical features.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4813717a-16e1-4e11-bd2c-9383de050dfd/12-terminal-and-cli-tools.png" /></p>
Terminal Utilities And Enhancements
<p>Once you’ve got your primary workspace, you’ll want to enhance it with various tools, utilities, themes, and so forth. This section includes some useful tools to make your terminal experience more enjoyable.</p>
<h3>Oh My Zsh</h3>
<p><a href="https://ohmyz.sh/">Oh My Zsh</a> is an open-source, community-driven framework for managing your configuration for Z Shell (or Zsh, a popular Unix shell). It comes bundled with thousands of helpful functions, helpers, 300+ plugins, 140+ themes, and more. Works best on macOS or Linux, but can also be used on Windows using something like Cygwin or WSL2.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fcfae738-6a51-471e-847d-d99a3fd87c88/13-terminal-and-cli-tools.png" /></p>
<h3>Fig</h3>
<p><a href="https://github.com/withfig/autocomplete">Fig</a> adds VSCode-style autocomplete to your existing terminal and includes support for existing CLI tools like Git, npm, Kubernetes, Docker, AWS, Google Cloud, and more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4f0596e-9e3b-4326-822b-c02e7282e475/14-terminal-and-cli-tools.png" /></p>
<h3><code>fzf</code></h3>
<p><a href="https://github.com/junegunn/fzf"><code>fzf</code></a> is a fast, portable, fuzzy finder for the command line that lets you run fuzzy search queries with a comprehensive feature set.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9faeaec-4be8-4381-8e14-cdc719ad4c44/15-terminal-and-cli-tools.png" /></p>
<h3>Shell History</h3>
<p><a href="https://loshadki.app/shellhistory/">Shell History</a> (not free) is a macOS app that integrates with Bash, Zsh, or Fish and allows you to easily backup and sync via iCloud and organize your shell history in “notebooks”.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a53bdef8-bf63-4ab7-b5fd-661fb2497e71/16-terminal-and-cli-tools.png" /></p>
<h3><code>htop</code></h3>
<p><a href="https://htop.dev/"><code>htop</code></a> is an interactive process viewer, originally Linux-only but now cross-platform, that aims to improve on the Linux <code>top</code> command by providing extra features when viewing running processes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16fa5760-3e28-4a53-9f02-4b03bcb704f0/17-terminal-and-cli-tools.png" /></p>
<h3>GitHub CLI</h3>
<p><a href="https://cli.github.com/">GitHub CLI</a>, in case you missed it, is the official cross-platform command-line interface for GitHub, bringing pull requests, issues, and other GitHub-related tasks to your terminal.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6541476-c15d-4b56-ae1f-28cf859393df/18-terminal-and-cli-tools.png" /></p>
<h3>Streamhut</h3>
<p><a href="https://streamhut.io/">Streamhut</a> lets you share your terminal in real-time without installing anything. Simply run one of two commands (depending on your setup), useful for live terminal sessions in team collabs, interviews, or teaching.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e9af5ba0-109b-458a-8c7e-f9376652625a/19-terminal-and-cli-tools.png" /></p>
<h3><code>icdiff</code></h3>
<p><a href="https://www.jefftk.com/icdiff"><code>icdiff</code></a> is a terminal-based file diff tool that makes good use of colors to present diffs in a more practical, visual manner.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f22dff93-6b69-4893-83ee-b97fb9c084fd/20-terminal-and-cli-tools.png" /></p>
<h3><code>&gt;\_TerminalSplash</code></h3>
<p><a href="https://terminalsplash.com/"><code>TerminalSplash</code></a>, as the name suggests, is like Unsplash, but for terminal themes. Choose from more than 200 user-submitted themes or submit your own.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca2a2088-c92b-4ff7-a6bb-d2c9c4013457/21-terminal-and-cli-tools.png" /></p>
<h3>Terminalizer</h3>
<p><a href="https://terminalizer.com/">Terminalizer</a> is a customizable and cross-platform terminal recorder that lets you record terminal sessions then share them as animated GIFs or via a web player.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a417129-efee-4e61-9641-201c77374dcb/22-terminal-and-cli-tools.png" /></p>
<h3>Asciinema</h3>
<p><a href="https://asciinema.org/">Asciinema</a> is another popular option for terminal recording and sharing, but not available for Windows. The cool thing about this one is that the recorded output is not a video but a plain text animation of the terminal session, meaning you can select and copy/paste items from recordings.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/889299ec-c998-47c6-b1d6-59350637cfee/23-terminal-and-cli-tools.png" /></p>
<h3><code>gtop</code></h3>
<p><a href="https://github.com/aksakalli/gtop"><code>gtop</code></a> is another enhancement on the <code>top</code> command that provides a system monitoring dashboard for your terminal. Require Node.js and includes partial support on Windows.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d325fba4-8a92-4751-a43e-ec5a8d53e4c7/24-terminal-and-cli-tools.png" /></p>
<h3><code>DevDash</code></h3>
<p><a href="https://thedevdash.com/"><code>DevDash</code></a> is a highly configurable terminal dashboard for developers and creators. You can customize it to display information from sources like Google Analytics, GitHub, Feedly, shell command output, and more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/81d01ac2-f073-45a0-9301-20b835645ef9/25-terminal-and-cli-tools.jpg" /></p>
<h3>Honorable mentions:</h3>
<ul>
<li><a href="https://github.com/sindresorhus/ora"><code>ora</code></a><br />An elegant terminal spinner.</li>
<li><a href="https://github.com/notwaldorf/tiny-care-terminal"><code>tiny-care-terminal</code></a><br />A little dashboard that tries to take care of you when you’re using your terminal.</li>
<li><a href="https://github.com/lemnos/theme.sh"><code>theme.sh</code></a><br />A shell script that lets you set your terminal theme that includes 270+ preloaded themes.</li>
</ul>
Command-Line Scripting And Frameworks
<p>Some numerous libraries and frameworks allow you to build and maintain your own command-line apps and utilities. Below you’ll find a few of those for Bash, JavaScript, and more.</p>
<h3>Command And Conquer (cac)</h3>
<p><a href="https://github.com/cacjs/cac">Command And Conquer</a>, also called cac, is a lightweight JavaScript framework for building command-line apps. For example, it’s been used to build several Node.js-based scaffolding tools.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b96e436-e427-4f30-99b1-ade2b68548d9/26-terminal-and-cli-tools.png" /></p>
<h3><code>zx</code></h3>
<p><a href="https://github.com/google/zx"><code>zx</code></a> is a popular alternative to Bash from engineers at Google that allows you to write command-line apps using JavaScript with an easy-to-use API that allows you to call executables and get their output, handle errors, and more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/530b52be-d2d4-48ff-be28-6ab717d76dbc/27-terminal-and-cli-tools.png" /></p>
<h3><code>present</code></h3>
<p><a href="https://github.com/vinayak-mehta/present"><code>present</code></a> is a Markdown-based presentation tool for the terminal that includes colors and effects and allows you to play pre-recorded playable code blocks as slides.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f605c062-bae2-42a0-bbdb-00cda134658b/28-terminal-and-cli-tools.png" /></p>
<h3>Bach</h3>
<p><a href="https://bach.sh/">Bach</a> is a Bash testing framework that can be used to test scripts that contain dangerous commands like <code>rm -rf /</code> and also includes APIs (e.g. <code>@mock</code>, <code>@ignore</code>, <code>@mockallto</code>, etc.) to mock commands.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3de1f9af-b086-4c21-8a30-2685ef9ec88a/29-terminal-and-cli-tools.png" /></p>
<h3><code>CLUI</code></h3>
<p><a href="https://github.com/replit/clui"><code>CLUI</code></a> is a JavaScript API with utilities to allow you to build command-line interfaces with context-aware autocomplete into your apps (i.e. terminal-like applications that users interact with).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e2fa228-42ad-4ca6-9d54-06ccabf2ec62/30-terminal-and-cli-tools.png" /></p>
<h3><code>ShellCheck</code></h3>
<p><a href="https://www.shellcheck.net/"><code>ShellCheck</code></a> is a shell extension to help you find bugs in your shell scripts.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84155770-bd84-48b0-be43-8b7945b11cce/31-terminal-and-cli-tools.png" /></p>
<h3>Honorable Mentions</h3>
<ul>
<li><a href="https://bashojs.org/"><code>Bashō</code></a><br />Lets you write complex shell tasks using plain JavaScript and it mixes well with shell commands and scripts.</li>
<li><a href="https://import.sh/"><code>import</code></a><br />A fast and easy-to-use module system for Bash and other Unix shells.</li>
<li><a href="https://github.com/niieani/bash-oo-framework"><code>Bash Infinity</code></a><br />A modular and lightweight library and boilerplate framework for writing tools using Bash.</li>
</ul>
Productivity Tools For The Terminal
<p>Finally, this category puts together a small sampling of command-line utilities and programs that help with various productivity-related tasks like keeping stuff organized, sharing files, and more.</p>
<h3>Dash Dash</h3>
<p><a href="https://dashdash.io/">Dash Dash</a> is an online documentation site that presents the Unix man pages (i.e. manual pages) in a more palatable format, to help those less familiar with the terminal learn to use the command line.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a433284c-00cd-47cb-8cc9-057290fed6c2/32-terminal-and-cli-tools.png" /></p>
<h3><code>nb</code></h3>
<p><a href="https://xwmx.github.io/nb/"><code>nb</code></a> is a command-line tool with features that include local web note‑taking, bookmarking, archiving, and encryption. Storage is in plain text, includes Git-based versioning, wiki-style linking, color themes, and lots more.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91afb66b-dee3-495d-8edf-5556cf4659f7/33-terminal-and-cli-tools.png" /></p>
<h3><code>Rclone</code></h3>
<p><a href="https://rclone.org/"><code>Rclone</code></a> is an open-source command-line program that allows you to manage files on 40+ cloud storage services (Amazon S3, Dropbox, Google Drive, Azure, etc.). It includes cloud equivalents for familiar Unix commands and other features.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7d74416-924f-46c4-907a-3dd5e75ab063/34-terminal-and-cli-tools.png" /></p>
<h3><code>navi</code></h3>
<p><a href="https://github.com/denisidoro/navi"><code>navi</code></a> is an interactive cheatsheet tool for your terminal. In addition to other features, you can browse through cheatsheet repositories, import cheatsheets, or add your own.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a208d63b-aea2-42ad-994c-f1cd26b47fda/35-terminal-and-cli-tools.png" /></p>
<h3>Taskbook</h3>
<p><a href="https://github.com/klaussinani/taskbook">Taskbook</a> is a fast command-line tool that lets you organize tasks, boards, and notes in your terminal, with features like search/filter, custom storage location, and a simple and user-friendly syntax.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57dd369b-4097-432f-8bf4-4f81fdf196d5/36-terminal-and-cli-tools.png" /></p>
<h3>Project Explorer</h3>
<p><a href="https://github.com/sdras/project-explorer">Project Explorer</a> is a CLI tool that lets you build a tree visualization of any project. This would come in handy when bringing on new team members or when inheriting a new project.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0190fb8-9613-4af8-937f-6fe2a50cfc24/37-terminal-and-cli-tools.png" /></p>
<h3><code>transfer.sh</code></h3>
<p><a href="https://transfer.sh/"><code>transfer.sh</code></a> is a fast and easy-to-use app for sharing files via the command line. Includes support for services like Amazon S3, Google Drive, Storj, and the local file system.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5f27e50-7c8b-4107-8179-a04abe5568b7/38-terminal-and-cli-tools.png" /></p>
<h3>Honorable Mentions</h3>
<ul>
<li><a href="https://beyondgrep.com/"><code>ack</code></a><br />A code-searching tool, similar to grep but optimized for programmers searching large trees of source code.</li>
<li><a href="https://github.com/iridakos/goto"><code>goto</code></a><br />A shell utility with auto-complete support to navigate to aliased directories.</li>
<li><a href="https://bashupload.com/"><code>bashupload</code></a><br />Upload files (up to 50GB) via the command line to easily share between servers, desktops, and mobile devices.</li>
<li><a href="https://github.com/calvinmetcalf/copyfiles"><code>copyfiles</code></a><br />A command-line utility that adds extra features to copying files in your terminal.</li>
</ul>
What’s Your Favourite Command-Line Tool?
<p>As mentioned, this wasn’t meant to be an exhaustive list, but merely a big collection of relevant command-line apps and utilities that I’ve personally come across in the past few years.</p>
<p>If you’ve built something yourself or if there’s one you use regularly that supercharges your terminal experience, feel free to drop it in the comments!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:23;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:52:"Useful React Hooks That You Can Use In Your Projects";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:56:"https://smashingmagazine.com/2021/11/useful-react-hooks/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:56:"https://smashingmagazine.com/2021/11/useful-react-hooks/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 12 Nov 2021 10:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:257:"The React team introduced several hooks in React 16.8 which you can use from third-party providers in your application, or even create your own custom hook. In this tutorial, we’ll take a look at some of the most useful hooks in React and how to use them.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:41:"hello@smashingmagazine.com (Ifeanyi Dike)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:139:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad5f8d5b-6da6-4441-a6f7-466c79e7fb0d/useful-react-hooks.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:77751:"<p>Hooks are simply functions that allow you to <strong>hook into</strong> or <strong>make use of</strong> React features. They were introduced at the <a href="https://www.youtube.com/watch?v=dpw9EHDh2bM">React Conf 2018</a> to address three major problems of class components: wrapper hell, huge components, and confusing classes. Hooks give power to React functional components, making it possible to develop an entire application with it.</p>
<p>The aforementioned problems of class components are connected and solving one without the other could introduce further problems. Thankfully, hooks solved all the problems simply and efficiently while creating room for more interesting features in React. Hooks do not replace already existing React concepts and classes, they merely provide an API to access them directly.</p>
<p>The React team introduced several hooks in React 16.8. However, you could also use hooks from third-party providers in your application or even create a custom hook. In this tutorial, we’ll take a look at some useful hooks in React and how to use them. We’ll go through several code examples of each hook and also explore how you’d create a custom hook.</p>
<p><strong>Note:</strong> <em>This tutorial requires a basic understanding of Javascript (ES6+) and React.</em></p>
Motivation Behind Hooks
<p>As stated earlier, hooks were created to solve three problems: wrapper hell, huge components, and confusing classes. Let’s take a look at each of these in more detail.</p>
<h3>Wrapper Hell</h3>
<p>Complex applications built with class components easily run into wrapper hell. If you examine the application in the React Dev Tools, you will notice deeply nested components. This makes it very difficult to work with the components or debug them. While these problems could be solved with <strong>higher-order components</strong> and <strong>render props</strong>, they require you to modify your code a bit. This could lead to confusion in a complex application. </p>
<p>Hooks are easy to share, you don’t have to modify your components before reusing the logic.</p>
<p>A good example of this is the use of the Redux <code>connect</code> Higher Order Component (HOC) to subscribe to the Redux store. Like all HOCs, to use the connect HOC, you have to export the component alongside the defined higher-order functions. In the case of <code>connect</code>, we’ll have something of this form.</p>
<pre><code>export default connect(mapStateToProps, mapDispatchToProps)(MyComponent)</code></pre>

<p>Where <code>mapStateToProps</code> and <code>mapDispatchToProps</code> are functions to be defined. </p>
<p>Whereas in the Hooks era, one can easily achieve the same result neatly and succinctly by using the Redux <code>useSelector</code> and <code>useDispatch</code> hooks.</p>
<h3>Huge Components</h3>
<p>Class components usually contain side effects and stateful logic. As the application grows in complexity, it is common for the component to become messy and confusing. This is because the side effects are expected to be organized by <strong>lifecycle methods</strong> rather than functionality. While it is possible to split the components and make them simpler, this often introduces a higher level of abstraction.</p>
<p>Hooks organize side effects by functionality and it is possible to split a component into pieces based on the functionality.</p>
<h3>Confusing Classes</h3>
<p>Classes are generally a more difficult concept than functions. React class-based components are verbose and a bit difficult for beginners. If you are new to Javascript, you could find functions easier to get started with because of their lightweight syntax as compared to classes. The syntax could be confusing; sometimes, it is possible to forget binding an event handler which could break the code.</p>
<p>React solves this problem with functional components and hooks, allowing developers to focus on the project rather than code syntax.</p>
<p>For instance, the following two React components will yield exactly the same result.</p>
<pre><code>import React, { Component } from "react";
export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      num: 0
    };
    this.incrementNumber = this.incrementNumber.bind(this);
  }
  incrementNumber() {
    this.setState({ num: this.state.num + 1 });
  }
  render() {
    return (
      &lt;div&gt;
        &lt;h1&gt;{this.state.num}&lt;/h1&gt;
        &lt;button onClick={this.incrementNumber}&gt;Increment&lt;/button&gt;
      &lt;/div&gt;
    );
  }
}</code></pre>

<pre><code>import React, { useState } from "react";
export default function App() {
  const [num, setNum] = useState(0);
  function incrementNumber() {
    setNum(num + 1);
  }
  return (
    &lt;div&gt;
      &lt;h1&gt;{num}&lt;/h1&gt;
      &lt;button onClick={incrementNumber}&gt;Increment&lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>The first example is a class-based component while the second is a functional component. Although this is a simple example, notice how bogus the first example is compared to the second.</p>
The Hooks Convention And Rules
<p>Before delving into the various hooks, it could be helpful to take a look at the convention and rules that apply to them. Here are some of the rules that apply to hooks.</p>
<ol>
<li>The naming convention of hooks should start with the prefix <code>use</code>. So, we can have <code>useState</code>, <code>useEffect</code>, etc. If you are using modern code editors like Atom and VSCode, the ESLint plugin could be a very useful feature for React hooks. The plugin provides useful warnings and hints on the best practices.</li>
<li>Hooks must be called at the top level of a component, before the return statement. They can't be called inside a conditional statement, loop, or nested functions.</li>
<li>Hooks must be called from a React function (inside a React component or another hook). It shouldn’t be called from a Vanilla JS function.</li>
</ol>
The <code>useState</code> Hook
<p>The <code>useState</code> hook is the most basic and useful React hook. Like other built-in hooks, this hook must be imported from <code>react</code> to be used in our application.</p>
<pre><code>import {useState} from 'react'</code></pre>

<p>To initialize the state, we must declare both the state and its updater function and pass an initial value.</p>
<pre><code>const [state, updaterFn] = useState('')</code></pre>

<p>We are free to call our state and updater function whatever we want but by convention, the first element of the array will be our state while the second element will be the updater function. It is a common practice to prefix our updater function with the prefix <strong>set</strong> followed by the name of our state in camel case form.</p>
<p>For instance, let’s set a state to hold count values.</p>
<pre><code>const [count, setCount] = useState(0)</code></pre>

<p>Notice that the initial value of our <code>count</code> state is set to <code>0</code> and not an empty string. In other words, we can initialize our state to any kind of JavaScript variables, namely number, string, boolean, array, object, and even BigInt. There is a clear difference between setting states with the <code>useState</code> hook and class-based component states. It is noteworthy that the <code>useState</code> hook returns an array, also known as state variables and in the example above, we destructured the array into <code>state</code> and the <code>updater</code> function.</p>
<h3>Rerendering Components</h3>
<p>Setting states with the <code>useState</code> hook causes the corresponding component to rerender. However, this only happens if React detects a difference between the previous or old state and the new state. React does the state comparison using the Javascript <code>Object.is</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#description">algorithm</a>. </p>
<h3>Setting States With <code>useState</code></h3>
<p>Our <code>count</code> state can be set to new state values by simply passing the new value to the <code>setCount</code> updater function as follows <code>setCount(newValue)</code>. </p>
<p>This method works when we don't want to reference the previous state value. If we wish to do that, we need to pass a function to the <code>setCount</code> function.</p>
<p>Assuming we want to add 5 to our <code>count</code> variable anytime a button is clicked, we could do the following.</p>
<pre><code>import {useState} from 'react'

const CountExample = () =&gt; {
  // initialize our count state
  const [count, setCount] = useState(0)

  // add 5 to to the count previous state
  const handleClick = () =&gt;{
    setCount(prevCount =&gt; prevCount + 5)
  } 
  return(
    &lt;div&gt;
      &lt;h1&gt;{count} &lt;/h1&gt;
      &lt;button onClick={handleClick}&gt;Add Five&lt;/button&gt;
    &lt;/div&gt;
  )
}

export default CountExample</code></pre>

<p>In the code above, we first imported the <code>useState</code> hook from <code>react</code> and then initialized the <code>count</code> state with a default value of 0. We created an <code>onClick</code> handler to increment the value of <code>count</code> by 5 whenever the button is clicked. Then we displayed the result in an <code>h1</code> tag.</p>
<h3>Setting Arrays And Object States</h3>
<p>States for arrays and objects can be set in much the same way as other data types. However, if we wish to retain already existing values, we need to use the ES6 spread operator when setting states.</p>
<p>The spread operator in Javascript is used to create a new object from an already existing object. This is useful here because <code>React</code> compares the states with the <code>Object.is</code> operation and then rerender accordingly.</p>
<p>Let’s consider the code below for setting states on button click.</p>
<pre><code>import {useState} from 'react'

const StateExample = () =&gt; {
  //initialize our array and object states
  const [arr, setArr] = useState([2, 4])
  const [obj, setObj] = useState({num: 1, name: 'Desmond'})

  // set arr to the new array values
  const handleArrClick = () =&gt;{
    const newArr = [1, 5, 7]
    setArr([...arr, ...newArr])
  } 

  // set obj to the new object values
  const handleObjClick = () =&gt;{
    const newObj = {name: 'Ifeanyi', age: 25}
    setObj({...obj, ...newObj})
  } 

  return(
    &lt;div&gt;
      &lt;button onClick ={handleArrClick}&gt;Set Array State&lt;/button&gt;
      &lt;button onClick ={handleObjClick}&gt;Set Object State&lt;/button&gt;
    &lt;/div&gt;
  )
}

export default StateExample</code></pre>

<p>In the above code, we created two states <code>arr</code> and <code>obj</code>, and initialized them to some array and object values respectively. We then created <code>onClick</code> handlers called <code>handleArrClick</code> and <code>handleObjClick</code> to set the states of the array and object respectively. When <code>handleArrClick</code> fires, we call <code>setArr</code> and use the ES6 spread operator to spread already existing array values and add <code>newArr</code> to it.</p>
<p>We did the same thing for <code>handleObjClick</code> handler. Here we called <code>setObj</code>, spread the existing object values using the ES6 spread operator, and updated the values of <code>name</code> and <code>age</code>.</p>
<h3>Async Nature Of <code>useState</code></h3>
<p>As we have already seen, we set states with <code>useState</code> by passing a new value to the updater function. If the updater is called multiple times, the new values will be added to a queue and re-rendering is done accordingly using the JavaScript <code>Object.is</code> comparison.</p>
<p>The states are updated asynchronously. This means that the new state is first added to a pending state and thereafter, the state is updated. So, you may still get the old state value if you access the state immediately it is set.</p>
<p>Let’s consider the following example to observe this behavior.</p>


<p>In the code above, we created a <code>count</code> state using the <code>useState</code> hook. We then created an <code>onClick</code> handler to increment the <code>count</code> state whenever the button is clicked.
Observe that although the <code>count</code> state increased, as displayed in the <code>h2</code> tag, the previous state is still logged in the console. This is due to the async nature of the hook.</p>
<p>If we wish to get the new state, we can handle it in a similar way we would handle async functions. Here is one way to do that.</p>


<p>Here, we stored created <code>newCountValue</code> to store the updated count value and then set the <code>count</code> state with the updated value. Then, we logged the updated count value in the console.</p>
The <code>useEffect</code> Hook
<p><code>useEffect</code> is another important React hook used in most projects. It does a similar thing to the class-based component’s <code>componentDidMount</code>, <code>componentWillUnmount</code>, and <code>componentDidUpdate</code> lifecycle methods. <code>useEffect</code> provides us an opportunity to write imperative codes that may have side effects on the application. Examples of such effects include logging, subscriptions, mutations, etc.</p>
<p>The user can decide when the <code>useEffect</code> will run, however, if it is not set, the side effects will run on every rendering or rerendering.</p>
<p>Consider the example below.</p>
<pre><code>import {useState, useEffect} from 'react'

const App = () =&gt;{
  const [count, setCount] = useState(0)
  useEffect(() =&gt;{
    console.log(count)
  })

  return(
    &lt;div&gt;
      ...
    &lt;/div&gt;
  )
}</code></pre>

<p>In the code above, we simply logged <code>count</code> in the <code>useEffect</code>. This will run after every render of the component.</p>
<p>Sometimes, we may want to run the hook once (on the mount) in our component. We can achieve this by providing a second parameter to <code>useEffect</code> hook.</p>
<pre><code>import {useState, useEffect} from 'react'

const App = () =&gt;{
  const [count, setCount] = useState(0)
  useEffect(() =&gt;{
    setCount(count + 1)
  }, [])

  return(
    &lt;div&gt;
      &lt;h1&gt;{count}&lt;/h1&gt;
      ...
    &lt;/div&gt;
  )
}</code></pre>

<p>The <code>useEffect</code> hook has two parameters, the first parameter is the function we want to run while the second parameter is an array of dependencies. If the second parameter is not provided, the hook will run continuously.</p>
<p>By passing an empty square bracket to the hook’s second parameter, we instruct React to run the <code>useEffect</code> hook only once, on the mount. This will display the value <code>1</code> in the <code>h1</code> tag because the count will be updated once, from 0 to 1, when the component mounts.</p>
<p>We could also make our side effect run whenever some dependent values change. This can be done by passing these values in the list of dependencies.</p>
<p>For instance, we could make the <code>useEffect</code> to run whenever <code>count</code> changes as follows.</p>
<pre><code>import { useState, useEffect } from "react";
const App = () =&gt; {
  const [count, setCount] = useState(0);
  useEffect(() =&gt; {
    console.log(count);
  }, [count]);
  return (
    &lt;div&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;
    &lt;/div&gt;
  );
};
export default App;</code></pre>

<p>The <code>useEffect</code> above will run when either of these two conditions is met.</p>
<ol>
<li>On mount — after the component is rendered. </li>
<li>When the value of <code>count</code> changes.</li>
</ol>
<p>On mount, the <code>console.log</code> expression will run and log <code>count</code> to 0. Once the <code>count</code> is updated, the second condition is met, so the <code>useEffect</code> runs again, this will continue whenever the button is clicked.</p>
<p>Once we provide the second argument to <code>useEffect</code>, it is expected that we pass all the dependencies to it. If you have <code>ESLINT</code> installed, it will show a lint error if any dependency is not passed to the parameter list. This could also make the side effect behave unexpectedly, especially if it depends on the parameters that are not passed.</p>
<h3>Cleaning Up The Effect</h3>
<p><code>useEffect</code> also allows us to clean up resources before the component unmounts. This may be necessary to prevent memory leaks and make the application more efficient. To do this, we’d return the clean-up function at the end of the hook.</p>
<pre><code>useEffect(() =&gt; {
  console.log('mounted')

  return () =&gt; console.log('unmounting... clean up here')
})</code></pre>

<p>The <code>useEffect</code> hook above will log <code>mounted</code> when the component is mounted. <em>Unmounting… clean up here</em> will be logged when the component unmounts. This can happen when the component is removed from the UI.</p>
<p>The clean-up process typically follows the form below.</p>
<pre><code>useEffect(() =&gt; {
  //The effect we intend to make
  effect

  //We then return the clean up
  return () =&gt; the cleanup/unsubscription
})</code></pre>

<p>While you may not find so many use cases for <code>useEffect</code> subscriptions, it is useful when dealing with subscriptions and timers. Particularly, when dealing with web sockets, you may need to unsubscribe from the network to save resources and improve performance when the component unmounts.</p>
<h3>Fetching And Refetching Data With <code>useEffect</code></h3>
<p>One of the commonest use cases of the <code>useEffect</code> hook is fetching and prefetching data from an API.</p>
<p>To illustrate this, we’ll use fake user data I created from <code>JSONPlaceholder</code> to fetch data with the <code>useEffect</code> hook.</p>
<pre><code>import { useEffect, useState } from "react";
import axios from "axios";

export default function App() {
  const [users, setUsers] = useState([]);
  const endPoint =
    "https://my-json-server.typicode.com/ifeanyidike/jsondata/users";

  useEffect(() =&gt; {
    const fetchUsers = async () =&gt; {
      const { data } = await axios.get(endPoint);
      setUsers(data);
    };
    fetchUsers();
  }, []);

  return (
    &lt;div className="App"&gt;
      {users.map((user) =&gt; (
            &lt;div&gt;
              &lt;h2&gt;{user.name}&lt;/h2&gt;
              &lt;p&gt;Occupation: {user.job}&lt;/p&gt;
              &lt;p&gt;Sex: {user.sex}&lt;/p&gt;
            &lt;/div&gt;
          ))}
    &lt;/div&gt;
  );
}</code></pre>

<p>In the code above, we created a <code>users</code> state using the <code>useState</code> hook. Then we fetched data from an API using Axios. This is an asynchronous process, and so we used the async/await function, we could have also used the dot then the syntax. Since we fetched a list of users, we simply mapped through it to display the data.</p>
<p>Notice that we passed an empty parameter to the hook. This ensures that it is called just once when the component mounts.</p>
<p>We can also <strong>refetch</strong> the data when some conditions change. We’ll show this in the code below.</p>
<pre><code>import { useEffect, useState } from "react";
import axios from "axios";

export default function App() {
  const [userIDs, setUserIDs] = useState([]);
  const [user, setUser] = useState({});
  const [currentID, setCurrentID] = useState(1);

  const endPoint =
    "https://my-json-server.typicode.com/ifeanyidike/userdata/users";

  useEffect(() =&gt; {
    axios.get(endPoint).then(({ data }) =&gt; setUserIDs(data));
  }, []);

  useEffect(() =&gt; {
    const fetchUserIDs = async () =&gt; {
      const { data } = await axios.get(`${endPoint}/${currentID}`});
      setUser(data);
    };

    fetchUserIDs();
  }, [currentID]);

  const moveToNextUser = () =&gt; {
    setCurrentID((prevId) =&gt; (prevId &lt; userIDs.length ? prevId + 1 : prevId));
  };
  const moveToPrevUser = () =&gt; {
    setCurrentID((prevId) =&gt; (prevId === 1 ? prevId : prevId - 1));
  };
  return (
    &lt;div className="App"&gt;
        &lt;div&gt;
          &lt;h2&gt;{user.name}&lt;/h2&gt;
          &lt;p&gt;Occupation: {user.job}&lt;/p&gt;
          &lt;p&gt;Sex: {user.sex}&lt;/p&gt;
        &lt;/div&gt;

      &lt;button onClick={moveToPrevUser}&gt;Prev&lt;/button&gt;
      &lt;button onClick={moveToNextUser}&gt;Next&lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>Here we created two <code>useEffect</code> hooks. In the first one, we used the dot then syntax to get all users from our API. This is necessary to determine the number of users.</p>
<p>We then created another <code>useEffect</code> hook to get a user based on the <code>id</code>. This <code>useEffect</code> will refetch the data whenever the id changes. To ensure this, we passed the <code>id</code> in the dependency list.</p>
<p>Next, we created functions to update the value of our <code>id</code> whenever the buttons are clicked. Once the value of the <code>id</code> changes, the <code>useEffect</code> will run again and refetch the data.</p>
<p>If we want, we can even clean up or cancel the promise-based token in Axios, we could do that with the clean-up method discussed above.</p>
<pre><code>useEffect(() =&gt; {
    const source = axios.CancelToken.source();
    const fetchUsers = async () =&gt; {
      const { data } = await axios.get(`${endPoint}/${num}`, {
        cancelToken: source.token
      });
      setUser(data);
    };
    fetchUsers();

    return () =&gt; source.cancel();
  }, [num]);</code></pre>

<p>Here, we passed the Axios’ token as a second parameter to <code>axios.get</code>. When the component unmounts we then canceled the subscription by calling the cancel method of the source object.</p>
The <code>useReducer</code> Hook
<p>The <code>useReducer</code> hook is a very useful React hook that does a similar thing to the <code>useState</code> hook. According to the <a href="https://reactjs.org/docs/hooks-reference.html#usereducer">React documentation</a>, this hook should be used to handle more complex logic than the <code>useState</code> hook. It’s worthy of note that the <code>useState</code> hook is internally implemented with the useReducer hook.</p>
<p>The hook takes a reducer as an argument and can optionally take the initial state and an init function as arguments. </p>
<pre><code>const [state, dispatch] = useReducer(reducer, initialState, init)</code></pre>

<p>Here, <code>init</code> is a function and it is used whenever we want to create the initial state lazily. </p>
<p>Let’s look at how to implement the <code>useReducer</code> hook by creating a simple to-do app as shown in the sandbox below.</p>


<p>First off, we should create our reducer to hold the states.</p>
<pre><code>export const ADD_TODO = "ADD_TODO";
export const REMOVE_TODO = "REMOVE_TODO";
export const COMPLETE_TODO = "COMPLETE_TODO";

const reducer = (state, action) =&gt; {
  switch (action.type) {
    case ADD_TODO:
      const newTodo = {
        id: action.id,
        text: action.text,
        completed: false
      };
      return [...state, newTodo];
    case REMOVE_TODO:
      return state.filter((todo) =&gt; todo.id !== action.id);
    case COMPLETE_TODO:
      const completeTodo = state.map((todo) =&gt; {
        if (todo.id === action.id) {
          return {
            ...todo,
            completed: !todo.completed
          };
        } else {
          return todo;
        }
      });
      return completeTodo;
    default:
      return state;
  }
};
export default reducer;</code></pre>

<p>We created three constants corresponding to our action types. We could have used strings directly but this method is preferable to avoid typos.</p>
<p>Then we created our reducer function. Like in <code>Redux</code>, the reducer must take the state and the action object. But unlike Redux, we don't need to initialize our reducer here. </p>
<p>Furthermore, for a lot of state management use-cases, a <code>useReducer</code> along with the <code>dispatch</code> exposed via context can enable a larger application to fire actions, update <code>state</code> and listen to it.</p>
<p>Then we used the <code>switch</code> statements to check the action type passed by the user. If the action type is <code>ADD_TODO</code>, we want to pass a new to-do and if it is <code>REMOVE_TODO</code>, we want to filter the to-dos and remove the one that corresponds to the <code>id</code> passed by the user. If it is <code>COMPLETE_TODO</code>, we want to map through the to-dos and toggle the one with the <code>id</code> passed by the user.</p>
<p>Here is the <code>App.js</code> file where we implemented the <code>reducer</code>.</p>
<pre><code>import { useReducer, useState } from "react";
import "./styles.css";
import reducer, { ADD_TODO, REMOVE_TODO, COMPLETE_TODO } from "./reducer";
export default function App() {
  const [id, setId] = useState(0);
  const [text, setText] = useState("");
  const initialState = [
    {
      id: id,
      text: "First Item",
      completed: false
    }
  ];

  //We could also pass an empty array as the initial state
  //const initialState = []

  const [state, dispatch] = useReducer(reducer, initialState);
  const addTodoItem = (e) =&gt; {
    e.preventDefault();
    const newId = id + 1;
    setId(newId);
    dispatch({
      type: ADD_TODO,
      id: newId,
      text: text
    });
    setText("");
  };
  const removeTodo = (id) =&gt; {
    dispatch({ type: REMOVE_TODO, id });
  };
  const completeTodo = (id) =&gt; {
    dispatch({ type: COMPLETE_TODO, id });
  };
  return (
    &lt;div className="App"&gt;
      &lt;h1&gt;Todo Example&lt;/h1&gt;
      &lt;form className="input" onSubmit={addTodoItem}&gt;
        &lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;
        &lt;button disabled={text.length === 0} type="submit"&gt;+&lt;/button&gt;
      &lt;/form&gt;
      &lt;div className="todos"&gt;
        {state.map((todo) =&gt; (
          &lt;div key={todo.id} className="todoItem"&gt;
            &lt;p className={todo.completed &amp;&amp; "strikethrough"}&gt;{todo.text}&lt;/p&gt;
            &lt;span onClick={() =&gt; removeTodo(todo.id)}&gt;✕&lt;/span&gt;
            &lt;span onClick={() =&gt; completeTodo(todo.id)}&gt;✓&lt;/span&gt;
          &lt;/div&gt;
        ))}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>Here, we created a form containing an input element, to collect the user’s input, and a button to trigger the action. When the form is submitted, we dispatched an action of type <code>ADD_TODO</code>, passing a new id and to-do text. We created a new id by incrementing the previous id value by 1. We then cleared the input text box. To delete and complete to-do, we simply dispatched the appropriate actions. These have already been implemented in the reducer as shown above.</p>
<p>However, the magic happens because we are using the <code>useReducer</code> hook. This hook accepts the reducer and the initial state and returns the state and the dispatch function. Here, the dispatch function serves the same purpose as the setter function for the <code>useState</code> hook and we can call it anything we want instead of <code>dispatch</code>.</p>
<p>To display the to-do items, we simply mapped through the list of to-dos returned in our state object as shown in the code above.</p>
<p>This shows the power of the <code>useReducer</code> hook. We could also achieve this functionality with the <code>useState</code> hook but as you can see from the example above, the <code>useReducer</code> hook helped us to keep things neater. <code>useReducer</code> is often beneficial when the state object is a complex structure and is updated in different ways as against a simple value-replace. Also, once these update functions get more complicated, <code>useReducer</code> makes it easy to hold all that complexity in a reducer function (which is a pure JS function) making it very easy to write tests for the reducer function alone.</p>
<p>We could have also passed the third argument to the <code>useReducer</code> hook to create the initial state lazily. This means that we could calculate the initial state in an <code>init</code> function.</p>
<p>For instance, we could create an <code>init</code> function as follows:</p>
<pre><code>const initFunc = () =&gt; [
  {
      id: id,
      text: "First Item",
      completed: false
    }
]</code></pre>

<p>and then pass it to our <code>useReducer</code> hook.</p>
<pre><code>const [state, dispatch] = useReducer(reducer, initialState, initFunc)</code></pre>

<p>If we do this, the <code>initFunc</code> will override the <code>initialState</code> we provided and the initial state will be calculated lazily.</p>
The <code>useContext</code> Hook
<p>The React Context API provides a way to share states or data throughout the React component tree. The API has been available in React, as an experimental feature, for a while but it became safe to use in React 16.3.0. The API makes data sharing between components easy while eliminating prop drilling.</p>
<p>While you can apply the React Context to your entire application, it is also possible to apply it to part of the application.</p>
<p>To use the hook, you need to first create a context using <code>React.createContext</code> and this context can then be passed to the hook.</p>
<p>To demonstrate the use of the <code>useContext</code> hook, let’s create a simple app that will increase font size throughout our application.</p>
<p>Let’s create our context in <code>context.js</code> file.</p>
<pre><code>import { createContext } from "react";

//Here, we set the initial fontSize as 16.
const fontSizeContext = createContext(16);
export default fontSizeContext;</code></pre>

<p>Here, we created a context and passed an initial value of <code>16</code> to it, and then exported the context. Next, let’s connect our context to our application.</p>
<pre><code>import FontSizeContext from "./context";
import { useState } from "react";
import PageOne from "./PageOne";
import PageTwo from "./PageTwo";
const App = () =&gt; {
  const [size, setSize] = useState(16);
  return (
    &lt;FontSizeContext.Provider value={size}&gt;
      &lt;PageOne /&gt;
      &lt;PageTwo /&gt;
      &lt;button onClick={() =&gt; setSize(size + 5)}&gt;Increase font&lt;/button&gt;
      &lt;button
        onClick={() =&gt;
          setSize((prevSize) =&gt; Math.min(11, prevSize - 5))
        }
      &gt;
        Decrease font
      &lt;/button&gt;
    &lt;/FontSizeContext.Provider&gt;
  );
};
export default App;</code></pre>

<p>In the above code, we wrapped our entire component tree with <code>FontSizeContext.Provider</code> and passed <code>size</code> to its value prop. Here, <code>size</code> is a state-created with the <code>useState</code> hook. This allows us to change the value prop whenever the <code>size</code> state changes. By wrapping the entire component with the <code>Provider</code>, we can access the context anywhere in our application.</p>
<p>For instance, we accessed the context in <code>&lt;PageOne /&gt;</code> and <code>&lt;PageTwo /&gt;</code>. As a result of this, the font size will increase across these two components when we increase it from the <code>App.js</code> file. We can increase or decrease the font size from the buttons as shown above and once we do, the font size changes throughout the application.</p>
<pre><code>import { useContext } from "react";
import context from "./context";
const PageOne = () =&gt; {
  const size = useContext(context);
  return &lt;p style={{ fontSize: `${size}px` }}&gt;Content from the first page&lt;/p&gt;;
};
export default PageOne;</code></pre>

<p>Here, we accessed the context using the <code>useContext</code> hook from our <code>PageOne</code> component. We then used this context to set our font-size property. A similar procedure applies to the <code>PageTwo.js</code> file.</p>
<p>Themes or other higher-order app-level configurations are good candidates for contexts.</p>
<h3>Using <code>useContext</code> And <code>useReducer</code></h3>
<p>When used with the <code>useReducer</code> hook, <code>useContext</code> allows us to create our own state management system. We can create global states and easily manage them in our application.</p>
<p>Let’s improve our to-do application using the context API.</p>
<p>As usual, we need to create a <code>todoContext</code> in the <code>todoContext.js</code> file.</p>
<pre><code>import { createContext } from "react";
const initialState = [];
export default createContext(initialState);</code></pre>

<p>Here we created the context, passing an initial value of an empty array. Then we exported the context.</p>
<p>Let’s refactor our <code>App.js</code> file by separating the to-do list and items.</p>
<pre><code>import { useReducer, useState } from "react";
import "./styles.css";
import todoReducer, { ADD_TODO } from "./todoReducer";
import TodoContext from "./todoContext";
import TodoList from "./TodoList";

export default function App() {
  const [id, setId] = useState(0);
  const [text, setText] = useState("");
  const initialState = [];
  const [todoState, todoDispatch] = useReducer(todoReducer, initialState);

  const addTodoItem = (e) =&gt; {
    e.preventDefault();
    const newId = id + 1;
    setId(newId);
    todoDispatch({
      type: ADD_TODO,
      id: newId,
      text: text
    });
    setText("");
  };
  return (
    &lt;TodoContext.Provider value={[todoState, todoDispatch]}&gt;
        &lt;div className="app"&gt;
          &lt;h1&gt;Todo Example&lt;/h1&gt;
          &lt;form className="input" onSubmit={addTodoItem}&gt;
            &lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;
            &lt;button disabled={text.length === 0} type="submit"&gt;
              +
            &lt;/button&gt;
          &lt;/form&gt;
          &lt;TodoList /&gt;
        &lt;/div&gt;
    &lt;/TodoContext.Provider&gt;
  );
}</code></pre>

<p>Here, we wrapped our <code>App.js</code> file with the <code>TodoContext.Provider</code> then we passed the return values of our <code>todoReducer</code> to it. This makes the reducer’s state and <code>dispatch</code> function to be accessible throughout our application.</p>
<p>We then separated the to-do display into a component <code>TodoList</code>. We did this without prop drilling, thanks to the Context API. Let’s take a look at the <code>TodoList.js</code> file.</p>
<pre><code>import React, { useContext } from "react";
import TodoContext from "./todoContext";
import Todo from "./Todo";
const TodoList = () =&gt; {
  const [state] = useContext(TodoContext);
  return (
    &lt;div className="todos"&gt;
      {state.map((todo) =&gt; (
        &lt;Todo key={todo.id} todo={todo} /&gt;
      ))}
    &lt;/div&gt;
  );
};
export default TodoList;</code></pre>

<p>Using array destructuring, we can access the state (leaving the dispatch function) from the context using the <code>useContext</code> hook. We can then map through the state and display the to-do items. We still extracted this in a <code>Todo</code> component. The ES6+ map function requires us to pass a unique key and since we need the specific to-do, we pass it alongside as well.</p>
<p>Let’s take a look at the <code>Todo</code> component.</p>
<pre><code>import React, { useContext } from "react";
import TodoContext from "./todoContext";
import { REMOVE_TODO, COMPLETE_TODO } from "./todoReducer";
const Todo = ({ todo }) =&gt; {
  const [, dispatch] = useContext(TodoContext);
  const removeTodo = (id) =&gt; {
    dispatch({ type: REMOVE_TODO, id });
  };
  const completeTodo = (id) =&gt; {
    dispatch({ type: COMPLETE_TODO, id });
  };
  return (
    &lt;div className="todoItem"&gt;
      &lt;p className={todo.completed ? "strikethrough" : "nostrikes"}&gt;
        {todo.text}
      &lt;/p&gt;
      &lt;span onClick={() =&gt; removeTodo(todo.id)}&gt;✕&lt;/span&gt;
      &lt;span onClick={() =&gt; completeTodo(todo.id)}&gt;✓&lt;/span&gt;
    &lt;/div&gt;
  );
};
export default Todo;</code></pre>

<p>Again using array destructuring, we accessed the dispatch function from the context. This allows us to define the <code>completeTodo</code> and <code>removeTodo</code> function as already discussed in the <code>useReducer</code> section. With the <code>todo</code> prop passed from <code>todoList.js</code> we can display a to-do item. We can also mark it as completed and remove the to-do as we deem fit.</p>
<p>It is also possible to nest more than one context provider in the root of our application. This means that we can use more than one context to perform different functions in an application.</p>
<p>To demonstrate this, let’s add theming to the to-do example.</p>
<p>Here’s what we’ll be building.</p>


<p>Again, we have to create <code>themeContext</code>. To do this, create a <code>themeContext.js</code> file and add the following codes.</p>
<pre><code>import { createContext } from "react";
import colors from "./colors";
export default createContext(colors.light);</code></pre>

<p>Here, we created a context and passed <code>colors.light</code> as the initial value. Let’s define the colors with this property in the <code>colors.js</code> file.</p>
<pre><code>const colors = {
  light: {
    backgroundColor: "#fff",
    color: "#000"
  },
  dark: {
    backgroundColor: "#000",
    color: "#fff"
  }
};
export default colors;</code></pre>

<p>In the code above, we created a <code>colors</code> object containing light and dark properties. Each property has <code>backgroundColor</code> and <code>color</code> object.</p>
<p>Next, we create the <code>themeReducer</code> to handle the theme states.</p>
<pre><code>import Colors from "./colors";
export const LIGHT = "LIGHT";
export const DARK = "DARK";
const themeReducer = (state, action) =&gt; {
  switch (action.type) {
    case LIGHT:
      return {
        ...Colors.light
      };
    case DARK:
      return {
        ...Colors.dark
      };
    default:
      return state;
  }
};
export default themeReducer;</code></pre>

<p>Like all reducers, the <code>themeReducer</code> takes the state and the action. It then uses the <code>switch</code> statement to determine the current action. If it’s of type <code>LIGHT</code>, we simply assign <code>Colors.light</code> props and if it’s of type <code>DARK</code>, we display <code>Colors.dark</code> props. We could have easily done this with the <code>useState</code> hook but we choose <code>useReducer</code> to drive the point home.</p>
<p>Having set up the <code>themeReducer</code>, we can then integrate it in our <code>App.js</code> file.</p>
<pre><code>import { useReducer, useState, useCallback } from "react";
import "./styles.css";
import todoReducer, { ADD_TODO } from "./todoReducer";
import TodoContext from "./todoContext";
import ThemeContext from "./themeContext";
import TodoList from "./TodoList";
import themeReducer, { DARK, LIGHT } from "./themeReducer";
import Colors from "./colors";
import ThemeToggler from "./ThemeToggler";

const themeSetter = useCallback(
      theme =&gt; themeDispatch({type: theme}, 
    [themeDispatch]);

export default function App() {
  const [id, setId] = useState(0);
  const [text, setText] = useState("");
  const initialState = [];
  const [todoState, todoDispatch] = useReducer(todoReducer, initialState);
  const [themeState, themeDispatch] = useReducer(themeReducer, Colors.light);
  const themeSetter = useCallback(
    (theme) =&gt; {
      themeDispatch({ type: theme });
    },
    [themeDispatch]
  );
  const addTodoItem = (e) =&gt; {
    e.preventDefault();
    const newId = id + 1;
    setId(newId);
    todoDispatch({
      type: ADD_TODO,
      id: newId,
      text: text
    });
    setText("");
  };

  return (
    &lt;TodoContext.Provider value={[todoState, todoDispatch]}&gt;
      &lt;ThemeContext.Provider
        value={[
          themeState,
          themeSetter
        ]}
      &gt;
        &lt;div className="app" style={{ ...themeState }}&gt;
          &lt;ThemeToggler /&gt;
          &lt;h1&gt;Todo Example&lt;/h1&gt;
          &lt;form className="input" onSubmit={addTodoItem}&gt;
            &lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;
            &lt;button disabled={text.length === 0} type="submit"&gt;
              +
            &lt;/button&gt;
          &lt;/form&gt;
          &lt;TodoList /&gt;
        &lt;/div&gt;
      &lt;/ThemeContext.Provider&gt;
    &lt;/TodoContext.Provider&gt;
  );
}</code></pre>

<p>In the above code, we added a few things to our already existing to-do application. We began by importing the <code>ThemeContext</code>, <code>themeReducer</code>, <code>ThemeToggler</code>, and <code>Colors</code>. We created a reducer using the <code>useReducer</code> hook, passing the <code>themeReducer</code> and an initial value of <code>Colors.light</code> to it. This returned the <code>themeState</code> and <code>themeDispatch</code> to us.</p>
<p>We then nested our component with the provider function from the <code>ThemeContext</code>, passing the <code>themeState</code> and the <code>dispatch</code> functions to it. We also added theme styles to it by spreading out the <code>themeStates</code>. This works because the <code>colors</code> object already defined properties similar to what the JSX styles will accept.</p>
<p>However, the actual theme toggling happens in the <code>ThemeToggler</code> component. Let’s take a look at it.</p>
<pre><code>import ThemeContext from "./themeContext";
import { useContext, useState } from "react";
import { DARK, LIGHT } from "./themeReducer";
const ThemeToggler = () =&gt; {
  const [showLight, setShowLight] = useState(true);
  const [themeState, themeSetter] = useContext(ThemeContext);
  const dispatchDarkTheme = () =&gt; themeSetter(DARK);
  const dispatchLightTheme = () =&gt; themeSetter(LIGHT);
  const toggleTheme = () =&gt; {
    showLight ? dispatchDarkTheme() : dispatchLightTheme();
    setShowLight(!showLight);
  };
  console.log(themeState);
  return (
    &lt;div&gt;
      &lt;button onClick={toggleTheme}&gt;
        {showLight ? "Change to Dark Theme" : "Change to Light Theme"}
      &lt;/button&gt;
    &lt;/div&gt;
  );
};
export default ThemeToggler;</code></pre>

<p>In this component, we used the <code>useContext</code> hook to retrieve the values we passed to the <code>ThemeContext.Provider</code> from our <code>App.js</code> file. As shown above, these values include the <code>ThemeState</code>, dispatch function for the light theme, and dispatch function for the dark theme. Thereafter, we simply called the dispatch functions to toggle the themes. We also created a state <code>showLight</code> to determine the current theme. This allows us to easily change the button text depending on the current theme.</p>
The <code>useMemo</code> Hook
<p>The <code>useMemo</code> hook is designed to memoize expensive computations. Memoization simply means caching. It caches the computation result with respect to the dependency values so that when the same values are passed, <code>useMemo</code> will just spit out the already computed value without recomputing it again. This can significantly improve performance when done correctly. </p>
<p>The hook can be used as follows:</p>
<pre><code>const memoizedResult = useMemo(() =&gt; expensiveComputation(a, b), [a, b])</code></pre>

<p>Let’s consider three cases of the <code>useMemo</code> hook.</p>
<ol>
<li><strong>When the dependency values, a and b remain the same.</strong><br />The <code>useMemo</code> hook will return the already computed memoized value without recomputation.</li>
<li><strong>When the dependency values, a and b change.</strong><br />The hook will recompute the value.</li>
<li><strong>When no dependency value is passed.</strong><br />The hook will recompute the value.</li>
</ol>
<p>Let’s take a look at an example to demonstrate this concept.</p>
<p>In the example below, we’ll be computing the <strong>PAYE</strong> and <strong>Income after PAYE</strong> of a company’s employees with fake data from JSONPlaceholder.</p>
<p>The calculation will be based on the personal income tax calculation procedure for Nigeria providers by PricewaterhouseCoopers available <a href="https://taxsummaries.pwc.com/nigeria/individual/sample-personal-income-tax-calculation">here</a>.</p>
<p>This is shown in the sandbox below.</p>


<p>First, we queried the API to get the employees’ data. We also get data for each employee (with respect to their employee id).</p>
<pre><code>const [employee, setEmployee] = useState({});
  const [employees, setEmployees] = useState([]);
  const [num, setNum] = useState(1);
  const endPoint =
    "https://my-json-server.typicode.com/ifeanyidike/jsondata/employees";
  useEffect(() =&gt; {
    const getEmployee = async () =&gt; {
      const { data } = await axios.get(`${endPoint}/${num}`);
      setEmployee(data);
    };
    getEmployee();
  }, [num]);
  useEffect(() =&gt; {
    axios.get(endPoint).then(({ data }) =&gt; setEmployees(data));
  }, [num]);</code></pre>

<p>We used <code>axios</code> and the <code>async/await</code> method in the first <code>useEffect</code> and then the dot then syntax in the second. These two approaches work in the same way.</p>
<p>Next, using the employee data we got from above, let’s calculate the relief variables:</p>
<pre><code>const taxVariablesCompute = useMemo(() =&gt; {
    const { income, noOfChildren, noOfDependentRelatives } = employee;

    //supposedly complex calculation
    //tax relief computations for relief Allowance, children relief, 
    // relatives relief and pension relief

    const reliefs =
      reliefAllowance1 +
      reliefAllowance2 +
      childrenRelief +
      relativesRelief +
      pensionRelief;
    return reliefs;
  }, [employee]);</code></pre>

<p>This is a fairly complex calculation and so we had to wrap it in a <code>useMemo</code> hook to memoize or optimize it. Memoizing it this way will ensure that the calculation will not be recomputed if we tried to access the same employee again. </p>
<p>Furthermore, using the tax relief values obtained above, we’d like to calculate the PAYE and income after PAYE.</p>
<pre><code>const taxCalculation = useMemo(() =&gt; {
    const { income } = employee;
    let taxableIncome = income - taxVariablesCompute;
    let PAYE = 0;

    //supposedly complex calculation
    //computation to compute the PAYE based on the taxable income and tax endpoints

    const netIncome = income - PAYE;
    return { PAYE, netIncome };
  }, [employee, taxVariablesCompute]);</code></pre>

<p>We performed tax calculation (a fairly complex calculation) using the above-computed tax variables and then memoized it with the <code>useMemo</code> hook.</p>
<p>The complete code is available on <a href="https://gist.github.com/ifeanyidike/bc008cf6a28140199aeb74d7ecd90261">here</a>.</p>
<p>This follows the tax calculation procedure given <a href="https://taxsummaries.pwc.com/nigeria/individual/sample-personal-income-tax-calculation">here</a>. We first computed the tax relief considering income, number of children, and number of dependent relatives. Then, we multiplied the taxable income by the PIT rates in steps. While the calculation in question is not entirely necessary for this tutorial, it is provided to show us why <code>useMemo</code> may be necessary. This is also a fairly complex calculation and so we may need to memorize it with <code>useMemo</code> as shown above.</p>
<p>After calculating the values, we simply displayed the result.</p>
<p>Note the following about the <code>useMemo</code> hook.</p>
<ul>
<li><code>useMemo</code> should be used only when it is necessary to optimize the computation. In other words, when recomputation is expensive.</li>
<li>It is advisable to first write the calculation without memorization and only memorize it if it is causing performance issues.</li>
<li>Unnecessary and irrelevant use of the <code>useMemo</code> hook may even compound the performance issues.</li>
<li>Sometimes, too much memoization can also cause performance issues.</li>
</ul>
The <code>useCallback</code> Hook
<p><code>useCallback</code> serves the same purpose as <code>useMemo</code> but it returns a memoized callback instead of a memoized value. In other words, <code>useCallback</code> is the same as passing <code>useMemo</code> without a function call.</p>
<p>For instance, consider the following codes below.</p>
<pre><code>import React, {useCallback, useMemo} from 'react'

const MemoizationExample = () =&gt; {
  const a = 5
  const b = 7

  const memoResult = useMemo(() =&gt; a + b, [a, b])
  const callbackResult = useCallback(a + b, [a, b])

  console.log(memoResult)
  console.log(callbackResult)

  return(
    &lt;div&gt;
      ...
    &lt;/div&gt;
  ) 
}

export default MemoizationExample</code></pre>

<p>In the above example, both <code>memoResult</code> and <code>callbackResult</code> will give the same value of <code>12</code>. Here, <code>useCallback</code> will return a memoized value. However, we could also make it return a memoized callback by passing it as a function.</p>
<p>The <code>useCallback</code> below will return a memoized callback.</p>
<pre><code>...
  const callbackResult = useCallback(() =&gt; a + b, [a, b])
...</code></pre>

<p>We can then trigger the callback when an action is performed or in a <code>useEffect</code> hook.</p>
<pre><code>import {useCallback, useEffect} from 'react'
const memoizationExample = () =&gt; {
  const a = 5
  const b = 7
  const callbackResult = useCallback(() =&gt; a + b, [a, b])
  useEffect(() =&gt; {
    const callback = callbackResult()
    console.log(callback)   
  })

  return (
    &lt;div&gt;
      &lt;button onClick= {() =&gt; console.log(callbackResult())}&gt;
        Trigger Callback
      &lt;/button&gt;
    &lt;/div&gt;
  )
} 
export default memoizationExample</code></pre>

<p>In the above code, we defined a callback function using the <code>useCallback</code> hook. We then called the callback in a <code>useEffect</code> hook when the component mounts and also when a button is clicked.</p>
<p>Both the <code>useEffect</code> and the button click yield the same result.</p>
<p>Note that the concepts, do’s, and don’ts that apply to the <code>useMemo</code> hook also apply to the <code>useCallback</code> hook. We can recreate the <code>useMemo</code> example with <code>useCallback</code>. </p>
The <code>useRef</code> Hook
<p><code>useRef</code> returns an object that can persist in an application. The hook has only one property, <code>current</code>, and we can easily pass an argument to it.</p>
<p>It serves the same purpose a <code>createRef</code> used in class-based components. We can create a reference with this hook as follows:</p>
<pre><code>const newRef = useRef('')</code></pre>

<p>Here we created a new ref called <code>newRef</code> and passed an empty string to it.</p>
<p>This hook is used mainly for two purposes:</p>
<ol>
<li>Accessing or manipulating the DOM, and</li>
<li>Storing mutable states — this is useful when we don’t want the component to rerender when a value change.</li>
</ol>
<h3>Manipulating the DOM</h3>
<p>When passed to a DOM element, the ref object points to that element and can be used to access its DOM attributes and properties.</p>
<p>Here is a very simple example to demonstrate this concept.</p>
<pre><code>import React, {useRef, useEffect} from 'react'

const RefExample = () =&gt; {
  const headingRef = useRef('')
  console.log(headingRef)
  return(
    &lt;div&gt;
      &lt;h1 className='topheading' ref={headingRef}&gt;This is a h1 element&lt;/h1&gt;
    &lt;/div&gt;
  )
}
export default RefExample</code></pre>

<p>In the example above, we defined <code>headingRef</code> using the <code>useRef</code> hook passing an empty string. We then set the ref in the <code>h1</code> tag by passing <code>ref  = {headingRef}</code>. By setting this ref, we have asked the <code>headingRef</code> to point to our <code>h1</code> element. This means that we can access the properties of our <code>h1</code> element from the ref.</p>
<p>To see this, if we check the value of <code>console.log(headingRef)</code>, we’ll get <code>{current: HTMLHeadingElement}</code> or <code>{current: h1}</code> and we can assess all the properties or attributes of the element. A similar thing applies to any other HTML element.</p>
<p>For instance, we could make the text italic when the component mounts.</p>
<pre><code>useEffect(() =&gt; {
  headingRef.current.style.fontStyle = "italic";
}, []);</code></pre>

<p>We can even change the text to something else.</p>
<pre><code>...
    headingRef.current.innerHTML = "A Changed H1 Element";
...</code></pre>

<p>We can even change the background color of the parent container as well.</p>
<pre><code>...
    headingRef.current.parentNode.style.backgroundColor = "red";
...</code></pre>

<p>Any kind of DOM manipulation can be done here. Observe that <code>headingRef.current</code> can be read in the same way as  <code>document.querySelector('.topheading')</code>. </p>
<p>One interesting use case of the <code>useRef</code> hook in manipulating the DOM element is to focus the cursor on the input element. Let’s quickly run through it.</p>
<pre><code>import {useRef, useEffect} from 'react'

const inputRefExample = () =&gt; {
  const inputRef = useRef(null)
  useEffect(() =&gt; {
    inputRef.current.focus()
  }, [])

  return(
    &lt;div&gt;
      &lt;input ref={inputRef} /&gt;
      &lt;button onClick = {() =&gt; inputRef.current.focus()}&gt;Focus on Input &lt;/button&gt;
    &lt;/div&gt;
  )
}
export default inputRefExample</code></pre>

<p>In the above code, we created <code>inputRef</code> using the <code>useRef</code> hook and then asked it to point to the input element. We then made the cursor focus on the input ref when the component loads and when the button is clicked using <code>inputRef.current.focus()</code>. This is possible because <code>focus()</code> is an attribute of input elements and so the ref will be able to assess the methods.</p>
<p>Refs created in a parent component can be assessed at the child component by forwarding it using <code>React.forwardRef()</code>. Let’s take a look at it.</p>
<p>Let’s first create another component <code>NewInput.js</code> and add the following codes to it.</p>
<pre><code>import { useRef, forwardRef } from "react";
const NewInput = forwardRef((props, ref) =&gt; {
  return &lt;input placeholder={props.val} ref={ref} /&gt;;
});
export default NewInput;</code></pre>

<p>This component accepts <code>props</code> and <code>ref</code>. We passed the ref to its ref prop and <code>props.val</code> to its placeholder prop. Regular React components do not take a <code>ref</code> attribute. This attribute is available only when we wrap it with <code>React.forwardRef</code> as shown above.</p>
<p>We can then easily call this in the parent component.</p>
<pre><code>...
&lt;NewInput val="Just an example" ref={inputRef} /&gt;
...</code></pre>

<h3>Storing The Mutable States</h3>
<p>Refs are not just used to manipulate DOM elements, they can also be used to store mutable values without re-rendering the entire component.</p>
<p>The following example will detect the number of times a button is clicked without re-rendering the component.</p>
<pre><code>import { useRef } from "react";

export default function App() {
  const countRef = useRef(0);
  const increment = () =&gt; {
    countRef.current++;
    console.log(countRef);
  };
  return (
    &lt;div className="App"&gt;
      &lt;button onClick={increment}&gt;Increment &lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>In the code above, we incremented the <code>countRef</code> when the button is clicked and then logged it to the console. Although the value is incremented as shown in the console, we won’t be able to see any change if we try to assess it directly in our component. It will only update in the component when it re-renders.</p>
<p>Note that while <code>useState</code> is asynchronous, <code>useRef</code> is synchronous. In other words, the value is available immediately after it is updated.</p>
The <code>useLayoutEffect</code> Hook
<p>Like the <code>useEffect</code> hook, <code>useLayoutEffect</code> is called after the component is mounted and rendered. This hook fires after DOM mutation and it does so synchronously. Apart from getting called synchronously after DOM mutation, <code>useLayoutEffect</code> does the same thing as <code>useEffect</code>. </p>
<p><code>useLayoutEffect</code> should only be used for performing DOM mutation or DOM-related measurement, otherwise, you should use the <code>useEffect</code> hook. Using the <code>useEffect</code> hook for DOM mutation functions may cause some performance issues such as flickering but <code>useLayoutEffect</code> handles them perfectly as it runs after the mutations have occurred.</p>
<p>Let’s take a look at some examples to demonstrate this concept.</p>
<ol>
<li>We’ll be getting the width and height of the window on resize.</li>
</ol>
<pre><code>import {useState, useLayoutEffect} from 'react'

const ResizeExample = () =&gt;{
  const [windowSize, setWindowSize] = useState({width: 0, height: 0})
  useLayoutEffect(() =&gt; {
    const resizeWindow = () =&gt; setWindowSize({
      width: window.innerWidth,
      height: window.innerHeight
    })
    window.addEventListener('resize', resizeWindow)
    return () =&gt; window.removeEventListener('resize', resizeWindow)
  }, [])

  return (
    &lt;div&gt;
      &lt;p&gt;width: {windowSize.width}&lt;/p&gt;
      &lt;p&gt;height: {windowSize.height}&lt;/p&gt;
    &lt;/div&gt;
  )
}
export default ResizeExample</code></pre>

<p>In the above code, we created a state <code>windowSize</code> with width and height properties. Then we set the state to the current window’s width and height respectively when the window is resized. We also cleaned up the code when it unmounts. The clean-up process is essential in <code>useLayoutEffect</code> to clean up the DOM manipulation and improve efficiency.</p>
<ol>
<li>Let’s blur a text with <code>useLayoutEffect</code>.</li>
</ol>
<pre><code>import { useRef, useState, useLayoutEffect } from "react";

export default function App() {
  const paragraphRef = useRef("");

  useLayoutEffect(() =&gt; {
    const { current } = paragraphRef;
    const blurredEffect = () =&gt; {
      current.style.color = "transparent";
      current.style.textShadow = "0 0 5px rgba(0,0,0,0.5)";
    };
    current.addEventListener("click", blurredEffect);
    return () =&gt; current.removeEventListener("click", blurredEffect);
  }, []);

  return (
    &lt;div className="App"&gt;
      &lt;p ref={paragraphRef}&gt;This is the text to blur&lt;/p&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>We used <code>useRef</code> and <code>useLayoutEffect</code> together in the above code. We first created a ref, <code>paragraphRef</code> to point to our paragraph. Then we created an on-click event listener to monitor when the paragraph is clicked and then blurred it using the style properties we defined. Finally, we cleaned up the event listener using <code>removeEventListener</code>.</p>
The <code>useDispatch</code> And <code>useSelector</code> Hooks
<p><code>useDispatch</code> is a Redux hook for dispatching (triggering) actions in an application. It takes an action object as an argument and invokes the action. <code>useDispatch</code> is the hook’s equivalence to <code>mapDispatchToProps</code>. </p>
<p>On the other hand, <code>useSelector</code> is a Redux hook for assessing Redux states. It takes a function to select the exact Redux reducer from the store and then returns the corresponding states.</p>
<p>Once our Redux store is connected to a React application through the Redux provider, we can invoke the actions with <code>useDispatch</code> and access the states with <code>useSelector</code>. Every Redux action and state can be assessed with these two hooks. </p>
<p>Note that these states ship with React Redux (a package that makes assessing the Redux store easy in a React application). They are not available in the core Redux library.</p>
<p>These hooks are very simple to use. First, we have to declare the dispatch function and then trigger it.</p>
<pre><code>import {useDispatch, useSelector} from 'react-redux'
import {useEffect} from 'react'
const myaction from '...'

const ReduxHooksExample = () =&gt;{
  const dispatch = useDispatch()
  useEffect(() =&gt; {
    dispatch(myaction());
    //alternatively, we can do this
    dispatch({type: 'MY_ACTION_TYPE'})
  }, [])       

  const mystate = useSelector(state =&gt; state.myReducerstate)

  return(
    ...
  )
}
export default ReduxHooksExample</code></pre>

<p>In the above code, we imported <code>useDispatch</code> and <code>useSelector</code> from <code>react-redux</code>. Then, in a <code>useEffect</code> hook, we dispatched the action. We could define the action in another file and then call it here or we could define it directly as shown in the <code>useEffect</code> call. </p>
<p>Once we have dispatched the actions, our states will be available. We can then retrieve the state using the <code>useSelector</code> hook as shown. The states can be used in the same way we would use states from the <code>useState</code> hook.</p>
<p>Let’s take a look at an example to demonstrate these two hooks.</p>
<p>To demonstrate this concept, we have to create a Redux store, reducer, and actions. To simplify things here, we’ll be using the Redux Toolkit library with our fake database from JSONPlaceholder.</p>
<p>We need to install the following packages to get started. Run the following bash commands.</p>
<pre><code>npm i redux @reduxjs/toolkit react-redux axios</code></pre>

<p>First, let’s create the <code>employeesSlice.js</code> to handle the reducer and action for our employees’ API.</p>
<pre><code>import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
const endPoint = "https://my-json-server.typicode.com/ifeanyidike/jsondata/employees";

export const fetchEmployees = createAsyncThunk("employees/fetchAll", async () =&gt; {
    const { data } = await axios.get(endPoint);
    return data;
});

const employeesSlice = createSlice({
  name: "employees",
  initialState: { employees: [], loading: false, error: "" },
  reducers: {},
  extraReducers: {
    [fetchEmployees.pending]: (state, action) =&gt; {
      state.status = "loading";
    },
    [fetchEmployees.fulfilled]: (state, action) =&gt; {
      state.status = "success";
      state.employees = action.payload;
    },
    [fetchEmployees.rejected]: (state, action) =&gt; {
      state.status = "error";
      state.error = action.error.message;
    }
  }
});
export default employeesSlice.reducer;</code></pre>

<p>This is the standard setup for the Redux toolkit. We used the <code>createAsyncThunk</code> to access the <code>Thunk</code> middleware to perform async actions. This allowed us to fetch the list of employees from the API. We then created the <code>employeesSlice</code> and returned, “loading”, “error”, and the employees’ data depending on the action types.</p>
<p>Redux toolkit also makes setting up the store easy. Here is the store.</p>
<pre><code>import { configureStore } from "@reduxjs/toolkit";
import { combineReducers } from "redux";
import employeesReducer from "./employeesSlice";

const reducer = combineReducers({
  employees: employeesReducer
});

export default configureStore({ reducer });;</code></pre>

<p>Here, we used <code>combineReducers</code> to bundle the reducers and the <code>configureStore</code> function provided by Redux toolkit to set up the store.</p>
<p>Let’s proceed to use this in our application.</p>
<p>First, we need to connect Redux to our React application. Ideally, this should be done at the root of our application. I like to do it in the <code>index.js</code> file.</p>
<pre><code>import React, { StrictMode } from "react";
import ReactDOM from "react-dom";
import store from "./redux/store";
import { Provider } from "react-redux";
import App from "./App";
const rootElement = document.getElementById("root");
ReactDOM.render(
  &lt;Provider store={store}&gt;
    &lt;StrictMode&gt;
      &lt;App /&gt;
    &lt;/StrictMode&gt;
  &lt;/Provider&gt;,
  rootElement
);</code></pre>

<p>Here, I’ve imported the store I created above and also <code>Provider</code> from <code>react-redux</code>.</p>
<p>Then, I wrapped the entire application with the <code>Provider</code> function, passing the store to it. This makes the store accessible throughout our application.</p>
<p>We can then proceed to use the <code>useDispatch</code> and <code>useSelector</code> hooks to fetch the data.</p>
<p>Let’s do this in our <code>App.js</code> file.</p>
<pre><code>import { useDispatch, useSelector } from "react-redux";
import { fetchEmployees } from "./redux/employeesSlice";
import { useEffect } from "react";

export default function App() {
  const dispatch = useDispatch();
  useEffect(() =&gt; {
    dispatch(fetchEmployees());
  }, [dispatch]);
  const employeesState = useSelector((state) =&gt; state.employees);
  const { employees, loading, error } = employeesState;

  return (
    &lt;div className="App"&gt;
      {loading ? (
        "Loading..."
      ) : error ? (
        &lt;div&gt;{error}&lt;/div&gt;
      ) : (
        &lt;&gt;
          &lt;h1&gt;List of Employees&lt;/h1&gt;
          {employees.map((employee) =&gt; (
            &lt;div key={employee.id}&gt;
              &lt;h3&gt;{`${employee.firstName} ${employee.lastName}`}&lt;/h3&gt;
            &lt;/div&gt;
          ))}
        &lt;/&gt;
      )}
    &lt;/div&gt;
  );
}</code></pre>

<p>In the above code, we used the <code>useDispatch</code> hook to invoke the <code>fetchEmployees</code> action created in the <code>employeesSlice.js</code> file. This makes the employees state to be available in our application. Then, we used the <code>useSelector</code> hook to get the states. Thereafter, we displayed the results by mapping through the <code>employees</code>.</p>
The <code>useHistory</code> Hook
<p>Navigation is very important in a React application. While you could achieve this in a couple of ways, React Router provides a simple, efficient and popular way to achieve dynamic routing in a React application. Furthermore, React Router provides a couple of hooks for assessing the state of the router and performing navigation on the browser but to use them, you need to first set up your application properly.</p>
<p>To use any React Router hook, we should first wrap our application with <code>BrowserRouter</code>. We can then nest the routes with <code>Switch</code> and <code>Route</code>.</p>
<p>But first, we have to install the package by running the following commands.</p>
<pre><code>npm install react-router-dom</code></pre>

<p>Then, we need to set up our application as follows. I like to do this in my <code>App.js</code> file.</p>
<pre><code>import { BrowserRouter as Router, Switch, Route } from "react-router-dom";
import Employees from "./components/Employees";
export default function App() {
  return (
    &lt;div className="App"&gt;
      &lt;Router&gt;
        &lt;Switch&gt;
          &lt;Route path='/'&gt;
            &lt;Employees /&gt;
          &lt;/Route&gt;
          ...
        &lt;/Switch&gt;
      &lt;/Router&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>We could have as many Routes as possible depending on the number of components we wish to render. Here, we have rendered only the <code>Employees</code> component. The <code>path</code> attribute tells React Router DOM the path of the component and can be assessed with query string or various other methods.</p>
<p>The order matters here. The root route should be placed below the child route and so forth. To override this order, you need to include the <code>exact</code> keyword on the root route.</p>
<pre><code>&lt;Route path='/' exact &gt;
  &lt;Employees /&gt;
&lt;/Route&gt;</code></pre>

<p>Now that we have set up the router, we can then use the <code>useHistory</code> hook and other React Router hooks in our application.</p>
<p>To use the <code>useHistory</code> hook, we need to first declare it as follows.</p>
<pre><code>import {useHistory} from 'history'
import {useHistory} from 'react-router-dom'

const Employees = () =&gt;{
  const history = useHistory()
  ...
}</code></pre>

<p>If we log history to the console, we’ll see several properties associated with it. These include <code>block</code>, <code>createHref</code>, <code>go</code>, <code>goBack</code>, <code>goForward</code>, <code>length</code>, <code>listen</code>, <code>location</code>, <code>push</code>, <code>replace</code>. While all these properties are useful, you will most likely use <code>history.push</code> and <code>history.replace</code> more often than other properties.</p>
<p>Let’s use this property to move from one page to another.</p>
<p>Assuming we want to fetch data about a particular employee when we click on their names. We can use the <code>useHistory</code> hook to navigate to the new page where the employee’s information will be displayed.</p>
<pre><code>function moveToPage = (id) =&gt;{
  history.push(`/employees/${id}`)
}</code></pre>

<p>We can implement this in our <code>Employee.js</code> file by adding the following.</p>
<pre><code>import { useEffect } from "react";
import { Link, useHistory, useLocation } from "react-router-dom";

export default function Employees() {
  const history = useHistory();

  function pushToPage = (id) =&gt; {
    history.push(`/employees/${id}`)
  }
  ...
  return (
    &lt;div&gt;
     ...
        &lt;h1&gt;List of Employees&lt;/h1&gt;
        {employees.map((employee) =&gt; (
          &lt;div key={employee.id}&gt;
            &lt;span&gt;{`${employee.firstName} ${employee.lastName} `}&lt;/span&gt;
            &lt;button onClick={pushToPage(employee.id)}&gt; » &lt;/button&gt;
          &lt;/div&gt;
        ))}
  &lt;/div&gt;
  );
}</code></pre>

<p>In the <code>pushToPage</code> function, we used <code>history</code> from the <code>useHistory</code> hook to navigate to the employee’s page and pass the employee id alongside.</p>
The <code>useLocation</code> Hook
<p>This hook also ships with React Router DOM. It is a very popular hook used to work with the query string parameter. This hook is similar to the <code>window.location</code> in the browser.</p>
<pre><code>import {useLocation} from 'react'

const LocationExample = () =&gt;{
  const location = useLocation()
  return (
    ...
  )
}
export default LocationExample</code></pre>

<p>The <code>useLocation</code> hook returns the <code>pathname</code>, <code>search</code> parameter, <code>hash</code> and <code>state</code>. The most commonly used parameters include the <code>pathname</code> and <code>search</code> but you could equally use <code>hash</code>, and <code>state</code> a lot in your application.</p>
<p>The location <code>pathname</code> property will return the path we set in our <code>Route</code> set up. While <code>search</code> will return the query search parameter if any. For instance, if we pass <code>'http://mywebsite.com/employee/?id=1'</code> to our query, the <code>pathname</code> would be <code>/employee</code> and the <code>search</code> would be <code>?id=1</code>.</p>
<p>We can then retrieve the various search parameters using packages like query-string or by coding them.</p>
The <code>useParams</code> Hook
<p>If we set up our Route with a URL parameter in its path attribute, we can assess those parameters as key/value pairs with the <code>useParams</code> hook.</p>
<p>For instance, let’s assume that we have the following Route.</p>
<pre><code>&lt;Route path='/employees/:id' &gt;
  &lt;Employees /&gt;
&lt;/Route&gt;</code></pre>

<p>The Route will be expecting a dynamic id in place of <code>:id</code>.</p>
<p>With the <code>useParams</code> hook, we can assess the id passed by the user, if any.</p>
<p>For instance, assuming the user passes the following in function with <code>history.push</code>, </p>
<pre><code>function goToPage = () =&gt; {
  history.push(`/employee/3`)
}</code></pre>

<p>We can use the <code>useParams</code> hook to access this URL parameter as follows.</p>
<pre><code>import {useParams} from 'react-router-dom'

const ParamsExample = () =&gt;{
  const params = useParams()
  console.log(params)  

  return(
    &lt;div&gt;
      ...
    &lt;/div&gt;
  )
}
export default ParamsExample</code></pre>

<p>If we log <code>params</code> to the console, we’ll get the following object <code>{id: "3"}</code>. </p>
The <code>useRouteMatch</code> Hook
<p>This hook provides access to the match object. It returns the closest match to a component if no argument is supplied to it.</p>
<p>The match object returns several parameters including the <code>path</code> (the same as the path specified in Route), the <code>URL</code>, <code>params</code> object, and <code>isExact</code>.</p>
<p>For instance, we can use <code>useRouteMatch</code> to return components based on the route.</p>
<pre><code>import { useRouteMatch } from "react-router-dom";
import Employees from "...";
import Admin from "..."

const CustomRoute = () =&gt; {
  const match = useRouteMatch("/employees/:id");
  return match ? (
    &lt;Employee /&gt; 
  ) : (
    &lt;Admin /&gt;
  );
};
export default CustomRoute;</code></pre>

<p>In the above code, we set a route’s path with <code>useRouteMatch</code> and then rendered the <code>&lt;Employee /&gt;</code> or <code>&lt;Admin /&gt;</code> component depending on the route selected by the user.</p>
<p>For this to work, we still need to add the route to our <code>App.js</code> file.</p>
<pre><code>...
  &lt;Route&gt;
    &lt;CustomRoute /&gt;
  &lt;/Route&gt;
...</code></pre>

Building A Custom Hook
<p>According to the React documentation, <a href="https://reactjs.org/docs/hooks-custom.html">building a custom hook allows us to extract a logic into a reusable function</a>. However, you need to make sure that all the rules that apply to React hooks apply to your custom hook. Check the rules of React hook at the top of this tutorial and ensure that your custom hook complies with each of them.</p>
<p>Custom hooks allow us to write functions once and reuse them whenever they are needed and hence obeying the DRY principle. </p>
<p>For instance, we could create a custom hook to get the scroll position on our page as follows.</p>
<pre><code>import { useLayoutEffect, useState } from "react";

export const useScrollPos = () =&gt; {
  const [scrollPos, setScrollPos] = useState({
    x: 0,
    y: 0
  });
  useLayoutEffect(() =&gt; {
    const getScrollPos = () =&gt;
      setScrollPos({
        x: window.pageXOffset,
        y: window.pageYOffset
      });
    window.addEventListener("scroll", getScrollPos);
    return () =&gt; window.removeEventListener("scroll", getScrollPos);
  }, []);
  return scrollPos;
};
</code></pre>

<p>Here, we defined a custom hook to determine the scroll position on a page. To achieve this, we first created a state, <code>scrollPos</code>, to store the scroll position. Since this will be modifying the DOM, we need to use <code>useLayoutEffect</code> instead of <code>useEffect</code>. We added a scroll event listener to capture the x and y scroll positions and then cleaned up the event listener. Finally, we returned to the scroll position.</p>
<p>We can use this custom hook anywhere in our application by calling it and using it just as we would use any other state.</p>
<pre><code>import {useScrollPos} from './Scroll'

const App = () =&gt;{
  const scrollPos = useScrollPos()
  console.log(scrollPos.x, scrollPos.y)
  return (
    ...
  )
}
export default App</code></pre>

<p>Here, we imported the custom hook <code>useScrollPos</code> we created above. Then we initialized it and then logged the value to our console. If we scroll on the page, the hook will show us the scroll position at every step of the scroll.</p>
<p>We can create custom hooks to do just about anything we can imagine in our app. As you can see, we simply need to use the inbuilt React hook to perform some functions. We can also use third-party libraries to create custom hooks but if we do so, we will have to install that library to be able to use the hook.</p>
Conclusion
<p>In this tutorial, we took a good look at some useful React hooks you will be using in most of your applications. We examined what they present and how to use them in your application. We also looked at several code examples to help you understand these hooks and apply them to your application.</p>
<p>I encourage you to try these hooks in your own application to understand them more.</p>
<h3>Resources From The React Docs</h3>
<ul>
<li><a href="https://reactjs.org/docs/hooks-faq.html">Hooks FAQ</a></li>
<li><a href="https://redux-toolkit.js.org/api/createAsyncThunk">Redux Toolkit</a></li>
<li><a href="https://reactjs.org/docs/hooks-state.html">Using the State Hook</a></li>
<li><a href="https://reactjs.org/docs/hooks-effect.html">Using the Effect Hook</a></li>
<li><a href="https://reactjs.org/docs/hooks-reference.html">Hooks API Reference</a></li>
<li><a href="https://react-redux.js.org/api/hooks">React Redux Hooks</a></li>
<li><a href="https://reactrouter.com/web/api/Hooks">React Router Hooks</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:24;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:75:"From Good To Great In Dashboard Design: Research, Decluttering And Data Viz";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:85:"https://smashingmagazine.com/2021/11/dashboard-design-research-decluttering-data-viz/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:85:"https://smashingmagazine.com/2021/11/dashboard-design-research-decluttering-data-viz/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 11 Nov 2021 14:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:277:"Dribbbleshots just might be the hotbed of questionable dashboards. Striking visuals, little context, and no research: all recipes for mediocrity. Mediocrity won’t do. We’ll pursue greatness. And in that pursuit, we’ll cover research, decluttering, and data visualization.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:38:"hello@smashingmagazine.com (Adam Fard)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:168:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/835f0cba-e214-437a-a025-e69ba7691997/dashboard-design-research-decluttering-data-viz.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:31275:"<p>Even if it’s a blessing in disguise, discarding elements of your work is no fun. Tossing out suboptimal parts of our design can be a daunting task, especially after you’ve invested hours of work into it. But make no mistake, this is a bias most designers are prone to. We can get too attached to things we’ve created, despite them not providing any real value to our users. Here lies the difference between <em>okay</em> and <em>great</em> dashboard design. The former is fairly easy to achieve. The latter isn’t.</p>
<p>I’ve compiled a few things that I’ve learned throughout my career with regard to dashboard design. In this article, we’ll talk about research, decluttering, and data visualization, as well as how these things can make your dashboard design better.</p>
Definition
<p>A dashboard is a part of an application that displays global information about the app’s usage or any other external data. They come in different kinds, from relatively simplistic one-layered dashboards like this one:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a846211d-35b3-44b0-97b0-1dc98854332b/image-1-one-layered-dashboard.png" /></p>
<p>While others are more complex and multilayered ones like the one below:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0918f69-3d8b-4b02-a153-792ff50b7541/image-2-a-more-complex-dashboard.png" /></p>
<p>The recommendations we will provide in this article apply to a wide range of dashboards, regardless of their complexity.</p>
<p>Before diving into our arguments, first, let’s sort out what I mean by “mediocre” and “great”. These terms imply a value system that isn’t exactly conventional, so I owe you an explanation.</p>
Mediocre vs Great Dashboard Design
<p>The difference between “mediocre” and “great”, I believe, lies in the process. There’s also a continuum involved between these two categories. In the context of this article, the axes of this continuum are as follows:</p>
<ul>
<li>Sourcing inspiration (copying),</li>
<li>Research (referred to in the next section as “homework”),</li>
<li>Design Validation (substantiating design decisions with data),</li>
<li>Data Visualization,</li>
<li>Color Palette.</li>
</ul>
<table>
    <thead>
        <tr>
            <th></th>
      <th>Mediocre</th>
            <th>Great</th>
        </tr>
    </thead>
    <tbody>
        <tr>
      <td><strong>Sourcing inspiration</strong></td>
            <td>✅</td>
      <td>✅</td>
        </tr>
    <tr>
            <td><strong>Research</strong></td>
            <td>Limited and fragmented</td>
      <td>Consistent and purposeful</td>
        </tr>
    <tr>
            <td><strong>Design Validation</strong></td>
            <td>Limited to internal stakeholders</td>
      <td>Inclusive of both internal and end-users</td>
        </tr>
    <tr>
            <td><strong>Data Visualization</strong></td>
            <td>Heavily focused on aesthetics and trends</td>
      <td>Data viz solutions are consistent with its purpose; a good balance between efficiency and complexity;</td>
        </tr>
    <tr>
            <td><strong>Color palette</strong></td>
            <td>Arbitrary / trend-based</td>
      <td>Utilizable of color connotations, and alignment with brand values</td>
        </tr>
    </tbody>
</table>

<p><em>(Throughout this article, all references to mediocrity are based on these distinctions)</em></p>
<p>Now that we’ve sorted out the definitions, let’s quickly give an overview of my arguments. In this article, I suggest that, as opposed to mediocre dashboards, great ones require:</p>
<ul>
<li>Research,</li>
<li>A healthy dose of cluttering &amp; decluttering,</li>
<li>A thought-through color palette.</li>
</ul>
<p>First, let’s break down research, or “homework” as I like to call it. How do you even do “homework” as a designer? Is it ok to copy someone else’s work as long as you don’t make it obvious? Or do you start from scratch every time? — Let’s think this through.</p>
Doing Your Own Homework VS Copying Your Peers
<p>Sure, there’s always the option of copying and tweaking what your competitors already offer. Or, if there are no close equivalents, you can just “Frankenstein” the elements together from similar dashboards. This indeed sounds easier than “reinventing the wheel”. “<em>Good artists copy, great artists steal,</em>” as Picasso’s quote goes — but, unfortunately, this approach is likely to doom your design to mediocrity. Let me elaborate.</p>
<p>A quick disclaimer: if what you’re looking for is to learn, then by all means copy great designs and try to learn from them. However, if you’re working on commercial / “real” projects, then copying alone doesn’t do.</p>
<p>First of all, theoretically speaking, you could strike gold by copying great dashboards. There’s a catch, however. What is the likelihood that your source of inspiration is well-researched, practical, and most importantly <em>applicable to your particular situation</em>? Are the dashboards you’ve found worth stealing? Who knows. If you ask me, however, I wouldn’t bet on it. This ties in well with the ideas Austin Kleon outlined in his book <em>Steal like an artist</em>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8649c90-1a4d-44b8-ae3b-c913091364f3/image-3-is-it-worth-stealing.png" /></p>
<p>Secondly, when you’re sourcing inspiration, all you see is the end product: a colorful nice-looking dashboard. Rarely can you find inspiration accompanied by a thorough analysis of the process, research, and decision-making involved. This leads to something akin to a cargo cult, i.e. replicating the patterns you see without understanding why. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d3f7ed5-688a-4b44-809d-b9228f05825b/image-4-dashboard-cargo-cult.png" /></p>
<p>Finally, another unfortunate side effect of merely copying is that it’s not consistent. You can’t play the odds and win every time. That’s not to say that a “proper” <a href="https://adamfard.com/ux-design-process">design process</a> is foolproof. I believe that following the principles I outline in this article will make your designs consistently better, so you can “strike gold” with a higher degree of reliability and replicability.</p>
<p> Simply put, following a proper process and having a command of design principles, as opposed to mindlessly copying, gives you a better chance of coming up with usable designs with fewer iterations and useability testing sessions.</p>
<p>So how do you strike a balance between “copying” and “doing your own homework”? Here’s what I think. On top of “stealing” (ahem.. looking for inspiration), also <strong>talk to your users</strong>.</p>
<p>I 👏 can’t 👏 stress 👏 this 👏enough.</p>
<p>I bet we’re all (myself included) tired of hearing this mantra. “Talking to users” is like exercising or eating healthy — everyone knows they should do more of it, but few actually do it.</p>
<blockquote>“People ignore design that ignores people”.<br /><br />— <a href="https://frankchimero.com/">Frank Chimero</a></blockquote>

<p>Is there a worse way to ignore users than excluding them from the conversation altogether?</p>
<p>Alright, talking to users is important. That much is clear. What isn’t self-explanatory though is how exactly this communication should take place — let’s go over a couple of activities to examine a couple of ways.</p>
<h3>User interviews:</h3>
<p>Here are a few questions worth looking into when designing a dashboard. </p>
<ul>
<li>What information do users need the most?</li>
<li>What is the purpose of this dashboard?</li>
<li>What do users consult this dashboard for?</li>
<li>How do they go about looking for this information currently?</li>
</ul>
<p><a href="https://www.toptal.com/designers/data-visualization/dashboard-design-best-practices">In this piece</a>, Stelian Suboti, a UI &amp; UX designer with more than 7 years of experience, the author claims that:</p>
<p> Truly valuable insight can come out of a short user research phase with just five users — and it will save an enormous amount of time down the line.</p>
<p>Doing research (user interviews in this case) is the first step of the design thinking process (empathy), as well as the UX process in general. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e48d7b20-fe13-427e-8e91-4cbdd9d29ebd/image-5-usability-testing.png" /></p>
<h3>Card-Sorting</h3>
<blockquote>“Card sorting by its very nature, is a method you would use when you want to discover categories, groups, or interrelationships. Use this method when you want to know how users respond to visual cues and you want to capture the similarities and differences.”<br /><br />— <a href="https://think.design/user-design-research/card-sorting/">Think Design</a></blockquote>

<p>As we’ve just learned, card sorting helps us understand how users group and categorize information. In practical terms, card sorting looks something like this 👇  </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04b68278-5886-4e2e-8880-55d5c56963ba/18-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>You generally want to split your dashboard into “atoms”, bits of information of the smallest size, so that the participants can establish the relationships among these elements. This is how you could build the information hierarchy within the dashboard that’s consistent with users’ mental models. </p>
<h3>Usability Testing</h3>
<p><a href="https://adamfard.com/blog/usability-testing">Usability testing</a> is arguably the most important and insightful research activity you can conduct with regard to dashboard design. Playing by ear and skipping this step altogether just might be the biggest cardinal sin of UX design.</p>
<p>Here’s what Nielsen Norman Group, the world’s leading product design authority, <a href="https://www.nngroup.com/articles/usability-testing-101/">has to say</a> about usability testing: </p>
<blockquote>“Even the best UX designers can’t design a perfect — or even good enough — user experience without <a href="https://www.nngroup.com/articles/parallel-and-iterative-design/">iterative design</a> driven by observations of real users and of their interactions with the design.”</blockquote>

<p>In practical terms, you would want to conduct usability testing sessions after card sorting and user interviews. The latter two activities blended with your own assumptions should result in early dashboard versions. These rough ideas will then need to be tested and iterated on from sketches, and low-fi wireframes all the way to a high-fidelity prototype.</p>
<p>Now that we discussed the research methods, we can safely move on to my second argument, which is all about decluttering. How do you know if your dashboard is cluttered? Does the “less is more” principle work every time? — These are the topics we’re tackling next.</p>
To Declutter Or Not To Declutter
<p>In a conventional sense, decluttering is nearly synonymous with simplifying. Moreover, the practice of “keep it simple stupid” (KISS) has become somewhat of a design truism. The simpler the better, right? I wish it was that simple (no pun intended). </p>
<p>A cluttered design, by definition, overwhelms its users. That’s not to say that an app can’t have a learning curve. Adobe products are probably a textbook definition of what “overwhelming a first-time user” means. </p>
<p>Let’s take a look at the following dashboard:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39a2f2a8-1da7-4ecb-a963-37be2ecb978e/10-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>This is an excellent example of what might be considered “cluttered”. A closer look at the dashboard will tell you that it has to do with stock (index) price movement, trading volume, economic events, etc. If you think that this looks intimidating — you’re right. For an average user, it probably is. I’d wager, though, that the people qualified to use this kind of software actually benefit from this complexity — it allows them to work efficiently. Obscuring much of the information presented in this dashboard will only result in unnecessary clicks and excessive friction.</p>
<p>Now let’s try to take a look at something seemingly decluttered and “clean”. By the way, this particular dashboard, designed by <a href="https://www.uplabs.com/bhojendra">Bhojendra Rauniyar</a>, won in the minimal dashboard challenge by UpLabs. Congrats to Bhojendra!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f8f2fa3-e0a3-4582-9737-f0a304b22455/26-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>Before I start critiquing the dashboard above, here’s a disclaimer. First of all, this is a dribbble shot, so we can’t be certain whether it’s an isolated piece of design or a part of a product. Secondly, I don’t have access to the designer to ask for his rationale behind certain design decisions. Thirdly, I do not know whether this design has been tested and the full context of its usage. As such, all I have left is to speculate and assume. I hope, for educational purposes, that will do.</p>
<p>Let’s start with the chart. It compares client ratings with earnings. I’m left to wonder though what values define these two categories? The values have to be the same since both curves are on the same graph. So do we measure earnings in average rating or rating in dollars? Additionally, there are no labels for the scale, so I can’t even be sure of the units of measurement. What would probably be more useful is having separate graphs for key metrics with clear labels, i.e. to introduce “extra complexity”.</p>
<p>Additionally, the stats alone are not very valuable. Is earning “5k” in “1.8k” hours a good result? How does that compare to my peers? What are my dynamics?</p>
<p>That’s not to say that the dashboard I mentioned first is perfect and the second one is bad. You could argue that both of these require further work. My point is that decluttering for the sake of decluttering is a poor design maxim. </p>
<p>Cluttered apps are unnecessarily overwhelming and hard to navigate. How do you know if an app is all of the above? Presto! That’s right, you talk to the users and have usability testing sessions with them. Other than usability testings, there are a few other practices that will help ensure that your interface is not cluttered:</p>
<ul>
<li>Clear information hierarchy;</li>
<li>The use of modals or panels;</li>
<li>On-hover interactions;</li>
<li>Two to three colors;</li>
<li>White space, plenty of it.</li>
</ul>
<p>Now that we went through research and cluttering, we can move on to data visualization. Data visualization is irreplaceable for many reasons. It allows you to:</p>
<ul>
<li>See patterns,</li>
<li>Compare data,</li>
<li>Articulate the information visually,</li>
<li>Track data dynamics.</li>
</ul>
<p>Does this ring a bell? Exactly — this is pretty much everything that a dashboard should do. It’s no coincidence that almost all dashboards feature graphs and charts. Therefore, being competent at data visualization directly translates into being a competent dashboard designer. Let’s zoom in on that.</p>
Step Up Your Data Visualization Game
<p>There are multiple types of charts available, thus we need to choose wisely. The sunburst chart does look awesome, but is it as clear and transparent as the pie chart? Perhaps. That really does depend on your users. Types of charts aside, there are also colors, their semantics and so many other things that add to the complexity of data visualization in dashboard design. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/92f9d4a7-02cb-4f94-be65-cca9d7b75605/image-9-types-of-charts.png" /></p>
<p>In this section, I will do my best to outline some of the data visualization best practices and their application in dashboard design. Let’s start with colors. </p>
<p>This section is largely based on the research of <a href="https://clauswilke.com/">Claus O. Wilke</a>, Professor in Molecular Evolution at The University of Texas at Austin, and the author of <em>Fundamentals of Data Visualization</em>.</p>
<h3>Color In Dashboard Design</h3>
<p>Let’s address the issue with numbers first. How many colors should you use in UI design and dashboard design in particular? — Frankly, there’s no magic number of colors that works no matter what. However, if I were to recommend you a number, it would be 5. That doesn’t include shades if the intensity of the color represents a value or semantic colors if you need them (e.g. red for error messages or green for success messages). </p>
<p>Why 5? Well, there’s a 6:3:1 “golden” rule of visual design. These numbers represent the proportion among three brand colors: main, secondary, and accent. However, you should remember that on top of these three colors, you’re likely going to need some variation of white and black for text and its background.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/866b7b67-1262-4d5d-850c-10ca99fce0c4/20-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>Another thing to use colors for is to distinguish among different entities. Here are a few common color palettes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef47a0c3-e8aa-4475-91a3-461106d4e492/16-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>Use monochromatic color palettes if showing information within a single category. That way you can introduce another dimension to your chart that’s easy to read. For example, the more intense the colors, the higher the value and vice versa.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6477891-29e7-4be2-ac35-57fbfc5d32e4/2-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>Here’s an example:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad00201d-4bce-49e2-9b76-0e7692cf58bd/23-dashboard-design-research-decluttering-data-viz.png" /></p>
<p>What you can also do is pick two colors to represent the opposite ends of a spectrum. That way you can easily tell apart values that belong to different extremes. Here’s an example:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3057ebfc-5285-400b-adfa-e1b10cbf4ae3/image-13-map-of-the-us.png" /></p>
<p>Here are a few color palettes for this approach you can choose:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23451848-6f12-4ead-8fae-ca3fd4349a55/image-14-diverging-color-schemes.png" /></p>
<h3>Beware Of Colors Semantics</h3>
<p>Now that we went through the approaches you can take with using colors, it should also be noted that colors elicit subconscious reactions. These reactions are often referred to as “color semantics”.</p>
<p>When comparing 2 groups, using colors like red and green (because of the semantics associated with these colors) might lead to misrepresentation. Red, for instance, is often associated with danger, failure, and poor performance.</p>
<p>Take a look at the graphs below, which illustrate the math performance of two classes. We might automatically assume that students on the graph on the left in Class A are performing poorly, due to the fact that the values are represented with red. Red, especially in combination with green, often elicits such an interpretation.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5f0c0dbe-e0cf-4b89-8f25-d3f404bf0492/image-15-semantics.png" /></p>
<p>However, there are cases where this semantic difference can be used to our advantage like in the example below, i.e. using red to display performance that’s below average, and green for above. Also, note that it’s more natural for people to instinctively associate values on top as greater than those below. The graph below illustrates the last point.  </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/76741025-e3f0-429b-84c7-b57ebcbb84ad/image-16-semantics.png" /></p>
<p>As you can see, green represents students who perform above average, while red is reserved for those who underperform. Semantic color cues make this chart a lot more readable than it would otherwise be with another color scheme.</p>
<h3>On Which Charts To Use</h3>
<p>Data visualization can induce a fair amount of friction when done incorrectly. Make sure to choose the most suitable type of chart to deliver the right kind of data. Below, you’ll find a more or less comprehensive list of charts you can use to represent the information featured in your dashboard, depending on the roles they fulfill.</p>
<p><strong>NB:</strong> <em>Most charts serve more than one purpose. For instance, a pie chart is used to compare values, show composition, and data distribution. As such, I will mention these charts multiple times depending on the use case. However, I will only give a brief explanation for each chart once.</em></p>
<h4>Compare</h4>
<ul>
<li><strong>Pie</strong><br />Typically used to represent fractions of a whole. Pie charts work great whenever you need to compare a relatively low number of segments that are comparable in terms of their size. Conversely, having too many segments or tiny segments makes the chart too hard to read. A major con of pie charts is their inability to show changes over time.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b08e220-e727-4a8f-b0f9-e50711798fa6/image-17-piechart-example.png" /></p>
<ul>
<li><strong>Stacked Bar</strong><br />Especially useful when comparing categories. Just like the pie charts, the more complex they get (more series &amp; categories), the harder they are to read. An advantage that stacked bar charts have over pie charts is the ability to see changes over time. Another thing to look out for is that when you have series that vary in their value, it gets harder to compare them visually. For example, take a look at the example below, it’s not obvious whether the orange series for “Eyebrow pencil” is larger or smaller than that of “Foundation”.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3125451a-b8a8-42c6-b937-9f8ca5f855f4/image-18-stacked-bar.png" /></p>
<ul>
<li><strong>Mekko</strong><br />Perfect for visualizing the differences of certain categories within multiple dimensions. Just like the rest of the charts we’ve gone over so far, they’re easy to read but get increasingly harder to grasp once the categories and dimensions start to pile up. Additionally, you should avoid using Mekko charts if the differences among elements are too drastic.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df8b988-de1d-4b29-9cc7-954c081ecd98/image-19-mekko-chart.png" /></p>
<ul>
<li><strong>Stacked Column</strong><br />A great way to show comparisons between categories. You might have noticed that this chart type bears a strong resemblance to a stacked bar chart. Though there are differences in naming, you should know that horizontal bars usually go from highest to lowest value (or vice versa), while vertical ones imply another order rationale.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38d4f80a-afab-4f75-b73f-4b60bda6fbfb/image-20-stacked-bar.png" /></p>
<ul>
<li><strong>Area</strong><br />A really common way of representing quantitative data. Often used to show the increase or decrease of various data series over time. The major con of this type of visualization is that it’s hard to connect a specific point of the graph to a value on both axes. And, as always, the more information you cram in, the less readable it becomes. Finally, if the graphs overlap, then one area will go over another and vice versa. Therefore, area charts are good for helping see the big picture without too much regard for being extremely precise.<br />You might also notice a similarity between area and line charts. The former should be used when there’s an emphasis on a part-to-whole relationship.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/54deac20-0e74-4b63-9e99-e6e2d0a1220b/image-21-area-chart.png" /></p>
<ul>
<li><strong>Waterfall</strong><br />This kind of chart is often used in the financial industry to display the movement of value and its incremental path towards an endpoint. These charts, not being all too common, might not be the most intuitive to read, so they should better be reserved for professionals who deal with waterfall charts often.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e860a8f-aadb-40c8-b97b-48b6ed1ee3fe/image-22-waterfall.png" /></p>
<ul>
<li><strong>Line</strong><br />A good choice when you’re looking to present a series of values. These values (also called markers) are typically connected by straight line segments. The line chart mimics the disadvantages of the area chart, except for the color overlapping problem.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bc2ce2da-354d-4b9e-a6cc-3ad9b20018d0/image-23-line-chart.png" /></p>
<p><strong>Showcase the composition:</strong></p>
<ul>
<li>Pie,</li>
<li>Stacked Bar,</li>
<li>Mekko,</li>
<li>Stacked Column,</li>
<li>Waterfall.</li>
</ul>
<p><strong>Distribution of Data:</strong></p>
<ul>
<li><strong>Scatter Plot</strong><br />A great way to emphasize the relationships between one or multiple numeric variables and/or their distribution across two axes. The major problem with using scatter plots for UX purposes, it’s that this type of chart is considerably harder to read than all of the other ones we’ve discussed so far. As such, scatter plots should be reserved for experienced users only.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4245128b-06f6-4b21-9725-7c3488983be3/image-24-scatter-plot.png" /></p>
<ul>
<li><strong>Mekko</strong></li>
<li><strong>Column</strong></li>
<li><strong>Bubble</strong><br />Commonly used to present financial data. Bubble charts are similar to scatter plots, however, they provide a more in-depth understanding of the data, since they have 3 axes. </li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c031f0a5-dabd-4f19-b419-83687814287d/image-25-bubble.png" /></p>
<p><strong>Correlation and relationship between values:</strong></p>
<ul>
<li>Scatter Plot,</li>
<li>Bubble,</li>
<li>Line.</li>
</ul>
<p>If we were to summarize the charts above in a matrix, it would look something like this.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34049c21-7972-4c93-bca9-1eefc3065797/image-26-types-of-chart-usage.png" /></p>
<p>It is only fitting that we summarized the types of charts and their usage as an infographic. 😄</p>
<p>Be advised though, that I’ve indicated what these charts are <strong>generally</strong> used for. Theoretically, if you wanted to, you could do a bubble chart, where each bubble is a pie chart. Voila, your bubble chart can now also show the composition of each bubble. Of course, it’s easier said than done, because usually, bubbles vary in their size drastically. Anyhow, you get the idea: the matrix is a general guideline, but you can get more creative with charts if you want to at your own discretion.</p>
<h3>Balancing Between The Complexity And Efficiency</h3>
<p>So here’s a thing. As you might have noticed, lots of charts can be used for similar purposes. That doesn’t mean, however, that these charts are equally good for a certain task.</p>
<p>Generally, once you narrow down your choice to a few charts that seem to work best, you then want to make sure that they’re the least complex they could be. Below, I’ve outlined some of the charts we’ve mentioned by the degree of their complexity and efficiency.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84eb4f9a-d22d-4512-bf06-4158e20c6299/image-27-complexity-vs-efficiency.png" /></p>
<p>In a nutshell, you want to maximize efficiency and minimize complexity. This is the top-left quadrant. These charts are easy enough to be understood by middle school students. You should stick to those for the “consumer” persona, i.e. an average Joe. The more you move toward the right, the more reasons you should have to believe your users would be comfortable with reading them.</p>
What’s Next?
<p>In case you’d like to continue learning about dashboards and the aspects of their design, here are some resources my team and I have found helpful (to an increasing degree of complexity):</p>
<h3>Articles</h3>
<ul>
<li><a href="https://uxplanet.org/data-heavy-applications-how-to-design-perfect-charts-c0c893fef6de">Data-heavy applications: How to design perfect charts</a></li>
<li><a href="https://towardsdatascience.com/top-16-types-of-chart-in-data-visualization-196a76b54b62">Top 16 Types of Chart in Data Visualization</a></li>
<li><a href="https://www.justinmind.com/blog/dashboard-design-best-practices-ux-ui/">Dashboard Design: best practices and examples</a></li>
<li><a href="https://www.geckoboard.com/best-practice/dashboard-design/">How to design and build a great dashboard</a></li>
<li><a href="https://adamfard.com/blog/dashboard-ui">Dashboard UI Design: 14 Best Practices for Stakeholders</a></li>
</ul>
<h3>Books</h3>
<ul>
<li><a href="https://www.refactoringui.com/book">Refactoring UI</a></li>
<li><a href="https://www.amazon.com/Beautiful-Visualization-Looking-through-Practice/dp/1449379869#customerReviews">Beautiful Visualization: Looking at Data through the Eyes of Experts (Theory in Practice)</a></li>
<li><a href="https://www.amazon.com/Functional-Art-introduction-information-visualization/dp/0321834739">Functional Art, The: An introduction to information graphics and visualization (Voices That Matter)</a></li>
</ul>
<h3>Scientific papers</h3>
<ul>
<li><a href="https://ieeexplore.ieee.org/document/4272046">Visualization Criticism - The Missing Link Between Information Visualization and Art</a></li>
<li><a href="https://www.sciencedirect.com/science/article/pii/S2666389920301896">Principles of Effective Data Visualization</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:25;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:27:"Localizing Your Next.js App";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:64:"https://smashingmagazine.com/2021/11/localizing-your-nextjs-app/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:64:"https://smashingmagazine.com/2021/11/localizing-your-nextjs-app/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 09 Nov 2021 13:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:264:"Internationalized routing is not exactly a new feature on Next.js. In this article, we are not only checking what we get from this feature, but also how to leverage such functionalities to achieve the best user experience and a smooth developer experience as well.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:43:"hello@smashingmagazine.com (Átila Fassina)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:147:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/12e7620f-0e7b-4b95-a1b6-cd2f25ccac52/localizing-your-nextjs-app.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:10339:"<p>Instructing Next.js your app intends to have routes for different locales (or countries, or both) could not be more smooth. On the root of your project, create a <code>next.config.js</code> if you have not had the need for one. You can copy from this snippet.</p>
<pre><code>/** @type {import('next').NextConfig} */

module.exports = {
  reactStrictMode: true,
  i18n: {
    locales: ['en', 'gc'],
    defaultLocale: 'en',
  }
}</code></pre>

<p><strong>Note</strong>: <em>The first line is letting the TS Server (if you are on a TypeScript project, or if you are using VSCode) which are the properties supported in the configuration object. It is not mandatory but definitely a nice feature.</em></p>
<p>You will note two property keys inside the <code>i18n</code> object:</p>
<ul>
<li><code>locales</code><br />A list of all locales supported by your app. It is an <code>array</code> of <code>strings</code>.</li>
<li><code>defaultLocale</code><br />The locale of your main root. That is the default setting when either no preference is found or you forcing to the root.</li>
</ul>
<p>Those property values will determine the routes, so do not go too fancy on them. Create valid ones using <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">locale code</a> and/or <a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes">country codes</a> and stick with lower-case because they will generate a <code>url</code> soon.</p>
<p>Now your app has multiple locales supported there is one last thing you must be aware of in Next.js. Every route now exists on every locale, and the framework is aware they are the same. If you want to navigate to a specific locale,  we must provide a <code>locale</code> prop to our <code>Link</code> component, otherwise, it will fall back based on the browser’s <code>Accept-Language</code> header.</p>
<pre><code>&lt;Link href="/" locale="de"&gt;&lt;a&gt;Home page in German&lt;/a&gt;&lt;/Link&gt;</code></pre>

<p>Eventually, you will want to write an anchor which will just obey the selected locale for the user and send them to the appropriate route. That can easily be achieved with the <code>useRouter</code> custom hook from Next.js, it will return you an <code>object</code> and the selected <code>locale</code> will be a <code>key</code> in there.</p>
<pre><code>import type { FC } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'

const Anchor: FC&lt;{ href: string }&gt; = ({ href, children }) =&gt; {
  const { locale } = useRouter()

  return (
    &lt;Link href={href} locale={locale}&gt;
      &lt;a&gt;{children}&lt;/a&gt;
    &lt;/Link&gt;
  )
}</code></pre>

<p>Your Next.js is now fully prepared for internationalization. It will:</p>
<ul>
<li>Pick up the user’s preferred locale from the <code>Accepted-Languages</code> header in our request: courtesy of Next.js;</li>
<li>Send the user always to a route obeying the user’s preference: using our <code>Anchor</code> component created above;</li>
<li>Fall back to the default language when necessary.</li>
</ul>
<p>The last thing we need to do is make sure we can handle translations. At the moment, routing is working perfectly, but there is no way to adjust the content of each page.</p>
Creating A Dictionary
<p>Regardless if you are using a Translation Management Service or getting your texts some other way, what we want in the end is a JSON object for our JavaScript to consume during runtime. Next.js offers three different runtimes:</p>
<ul>
<li>client-side,</li>
<li>server-side,</li>
<li>compile-time.</li>
</ul>
<p>But keep that at the back of your head for now. We’ll first need to structure our data.</p>
<p>Data for translation can vary in shape depending on the tooling around it, but ultimately it eventually boils down to locales, keys, and values. So that is what we are going to get started with. My locales will be <code>en</code> for English and <code>pt</code> for Portuguese.</p>
<pre><code>module.exports = {
  en: {
    hello: 'hello world'
  },
  pt: {
    hello: 'oi mundo'
  }
}</code></pre>

Translation Custom Hook
<p>With that at hand, we can now create our translation custom hook. </p>
<pre><code>import { useRouter } from 'next/router'
import dictionary from './dictionary'

export const useTranslation = () =&gt; {
  const { locales = [], defaultLocale, ...nextRouter} = useRouter()
  const locale = locales.includes(nextRouter.locale || '')
    ? nextRouter.locale
    : defaultLocale

  return {
    translate: (term) =&gt; {
      const translation = dictionary[locale][term]

      return Boolean(translation) ? translation : term
    }
  }
}</code></pre>

<p>Let’s breakdown what is happening upstairs:</p>
<ol>
<li>We use <code>useRouter</code> to get all available locales, the default one, and the current;</li>
<li>Once we have that, we check if we have a valid locale with us, if we do not: fallback to the default locale;</li>
<li>Now we return the <code>translate</code> method. It takes a <code>term</code> and fetches from the dictionary to that specified locale. If there is no value, it returns the translation <code>term</code> again.</li>
</ol>
<p>Now our Next.js app is ready to translate at least the more common and rudimentary cases. Please note, this is not a dunk on translation libraries. There are <strong>tons of important features</strong> our custom hook over there is missing: interpolation, pluralization, genders, and so on.</p>
Time To Scale
<p>The lack of features to our custom hook is acceptable if we do not need them right now; it is always possible (and arguably better) to implement things when you actually need them. But there is one fundamental issue with our current strategy that is worrisome: it is not leveraging the isomorphic aspect of Next.js.</p>
<p>The worst part of scaling localized apps is not managing the translation actions themselves. That bit has been done quite a few times and is somewhat predictable. The problem is dealing with the bloat of shipping endless dictionaries down the wire to the browser — and they only multiply as your app requires more and more languages. That is data that very often becomes useless to the end-user, or it affects performance if we need to fetch new keys and values when they switch language. If there is one big truth about user experience, it’s this: your users will surprise you. </p>
<p>We cannot predict <em>when</em> or <em>if</em> users will switch languages or need that additional key. So, ideally, our apps will have all translations for a specific route at hand when such a route is loaded. For now, we need to split chunks of our dictionary based on what the page renders, and what permutations of state it can have. This rabbit hole goes deep.</p>
Server-Side Pre-Rendering
<p>Time to recap our new requirements for scalability:</p>
<ol>
<li>Ship as little as possible to the client-side;</li>
<li>Avoid extra requests based on user interaction;</li>
<li>Send the first render already translated down to the user.</li>
</ol>
<p>Thanks to the <code>getStaticProps</code> method of Next.js pages, we can achieve that without needing to dive at all into compiler configuration. We will import our entire dictionary to this special Serverless Function, and we will send to our page a list of special objects carrying the translations of each key.</p>
Setting Up SSR Translations
<p>Back to our app, we will create a new method. Set a directory like <code>/utils</code> or <code>/helpers</code> and somewhere inside we will have the following:</p>
<pre><code>export function ssrI18n(key, dictionary) {
  return Object.keys(dictionary)
    .reduce((keySet, locale) =&gt; {
      keySet[locale] = (dictionary[locale as keyof typeof dictionary][key])
      return keySet
    , {})
}</code></pre>

<p>Breaking down what we are doing:</p>
<ol>
<li>Take the translation <code>key</code> or <code>term</code> and the <code>dictionary</code>;</li>
<li>Turn the <code>dictionary</code> object into an array of its <code>keys</code>;</li>
<li>Each key from the dictionary is a <code>locale</code>, so we create an object with the <code>key</code> name and each <code>locale</code> will be the value for that specific language.</li>
</ol>
<p>An example output of that method will have the following shape:</p>
<pre><code>{
  'hello': {
    'en': 'Hello World',
    'pt': 'Oi Mundo',
    'de': 'Hallo Welt'
  }
}</code></pre>

<p>Now we can move to our Next.js page.</p>
<pre><code>import { ssrI18n } from '../utils/ssrI18n'
import { DICTIONARY } from '../dictionary'
import { useRouter } from 'next/router'

const Home = ({ hello }) =&gt; {
  const router = useRouter()
  const i18nLocale = getLocale(router)

  return (
    &lt;h1 className={styles.title}&gt;
      {hello[i18nLocale]}
    &lt;/h1&gt;
  )
}

export const getStaticProps = async () =&gt; ({
  props: {
    hello: ssrI18n('hello', DICTIONARY),
    // add another entry to each translation key
  }
})</code></pre>

<p>And with that, we are done! Our pages are only receiving exactly the translations they will need in every language. No external requests if they switch languages midway, on the contrary: the experience will be super quick.</p>
Skipping All Setup
<p>All that is great, but we can still do better for ourselves. The developer could take some attention; there is a lot of bootstrapping in it, and we are still relying on not making any typos. If you ever worked on translated apps, you’ll know that there will be a mistyped key somewhere, somehow. So, we can bring the type-safety of TypeScript to our translation methods.</p>
<p>To skip this setup <em>and</em> get the TypeScript safety and autocompletion, we can use <a href="https://github.com/atilafassina/next-g11n"><code>next-g11n</code></a>. This is a tiny library that does exactly what we have done above, but adds types and a few extra bells and whistles.</p>
Wrapping Up
<p>I hope this article has given you a larger insight into what <a href="https://nextjs.org/docs/advanced-features/i18n-routing">Next.js Internationalized Routing</a> can do for your app to achieve Globalization, and what it means to provide a top-notch user experience in localized apps in today’s web. Let hear what you think in the comments below, or send a <a href="https://atila.io/twitter">tweet</a> my way.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:26;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:85:"Automatically Transforming And Optimizing Images And Videos On Your WordPress Website";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:93:"https://smashingmagazine.com/2021/11/transforming-optimizing-images-videos-wordpress-website/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:93:"https://smashingmagazine.com/2021/11/transforming-optimizing-images-videos-wordpress-website/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 09 Nov 2021 09:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:152:"In this article, Leonardo Losoviz explains how Cloudinary’s integration can be used with WordPress to produce and deliver optimal digital experiences.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:45:"hello@smashingmagazine.com (Leonardo Losoviz)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:176:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8aaa9d52-375d-4e64-bdaa-151ef40a3f3c/transforming-optimizing-images-videos-wordpress-website.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:24400:"<p>So, you want to give personality to your site by making it stand out from all other websites out there. To do that, you develop a personalized design style, including a certain combination of colors, typography, spacing, animations, and others, and apply the style consistently throughout your site.</p>
<p>An example in case is this same website, Smashing Magazine. One of the objectives of <a href="https://www.smashingmagazine.com/2017/03/a-little-surprise-is-waiting-for-you-here/">its big redesign</a> was to infuse the site with a uniquely distinctive personality. That’s why all avatars, the arrow button, and many other elements are all tilted, at the same angle as the Smashing logo is:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13b433e7-9c0e-4ee9-a907-04259176eb8f/1-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>What about images? They can also take part in the unique design so that visitors browsing your site will immediately recognize it simply by looking at the content. For instance, I remember The Verge’s old bold design, which placed striking colors over its images:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/013a1286-fa8c-4010-8ccd-d61013e5abab/2-transforming-optimizing-images-videos-wordpress-website.jpg" /></p>
<p>Applying style to the images can be achieved with CSS. However, then the style will not be present when referencing the image directly (such as the image shared in social media via the <code>&lt;meta property="og:image" content="{image-url}"&gt;</code> tag), making the image devoid of personality.</p>
<p>The images embedded in social media when sharing our content are of particular interest. These <strong>images should carry the personality of the site</strong>, for which the style must be embedded in the image itself, instead of being applied via CSS. For instance, in <a href="https://twitter.com/smashingmag">SmashingMag’s Twitter account</a>, the article’s featured image has a customized and consistent style, giving it a unique personality:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52d641b0-b877-47c4-a3ef-f5b90f3c1827/3-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>Adding the style to the images on our site can be done manually (with Photoshop or some other image editing tool), but editing images is effort-intensive. The images need to be manipulated and re-uploaded to the site, for all the possible sizes (such as the featured image and each of the thumbnails) and all defined sets of styles (for instance, a page for the Black Friday sales could have its own style).</p>
<p>It makes more sense to automate this task. <strong>Automation</strong> is doable when the design is based on a series of transformations, to be applied one after the other, such as:</p>
<ul>
<li>Adding a watermark;</li>
<li>Making the image round;</li>
<li>Rotating the image to a certain angle;</li>
<li>Adding a border, with a specific thickness and color;</li>
<li>Adding a shadow;</li>
<li>Cropping the image to a certain aspect ratio or fixed dimensions;</li>
<li>Cropping the image around the face of the person;</li>
<li>Converting the image to grayscale, or adding hue;</li>
<li>Sharpening the image.</li>
</ul>
<p>By defining a list of transformations, <strong>the task to apply the desired style to our images can be automated</strong>. As a result, the effort to produce a consistent style throughout the website, and change it at any time down the road, is greatly reduced.</p>
<p>Applying styles throughout the website now becomes:</p>
<ul>
<li>We preselect the styles to be applied to the images, for the whole site or a custom section, via configuration on the website’s back-end;</li>
<li>We upload the original images.</li>
</ul>
<p>Then, the images will be automatically applied transformations to produce the desired styles, and readily available to be inserted into the page via the website’s media manager.</p>
<p>We can do exactly this via <a href="https://cloudinary.com">Cloudinary</a>, a service that helps produce and deliver optimal digital experiences. Being based on the cloud, Cloudinary can be integrated with any site, based on any stack or technology. For this article, I’ll be using its integration with WordPress to demonstrate its transformation capabilities.</p>
<p>Specifically, I’ll be using <a href="https://wordpress.org/plugins/cloudinary-image-management-and-manipulation-in-the-cloud-cdn/">Cloudinary’s plugin for WordPress v3.0</a>, which is set to release this week. Let’s start!</p>
Adding Transformations To The Images
<p>Cloudinary offers an extensive <a href="https://cloudinary.com/documentation/transformation_reference">list of transformations</a>, including all the ones I mentioned earlier on and many more, to manipulate not only images but also videos. Adding the desired transformations to an image’s URL, <strong>the image can be modified in myriad ways</strong>. I’ll demonstrate this by creating a thumbnail for an image.</p>
<p>In this pic, I’m with a couple of friends in sunny Barcelona:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e21faee5-c745-4d7e-a8a1-759bf2394a1c/4-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e21faee5-c745-4d7e-a8a1-759bf2394a1c/4-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>A picture of me and two friends in sunny Barcelona (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e21faee5-c745-4d7e-a8a1-759bf2394a1c/4-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>This picture in full size will be my post’s featured image. For the homepage, I want to link to the post using a thumbnail 300 pixels wide. To scale the image down, I attach transformation <code>w_300</code> to the image’s URL:</p>
<table>
  <thead>
    <tr>
      <th>Image</th>
      <th>URL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Original</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
    <tr>
      <td>Resized</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/w_300/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/<code>w_300</code>/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
  </tbody>
</table>

<p>The result is this one:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c9a66f3-a34b-4725-b45c-6db7b9ad393a/5-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c9a66f3-a34b-4725-b45c-6db7b9ad393a/5-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Image resized to 300px wide (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c9a66f3-a34b-4725-b45c-6db7b9ad393a/5-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>Being a scaled-down version of the original image, the people inside this thumbnail look small. Let’s make them bigger, by cropping the image. For that, we attach transformation <code>c_crop</code> after the previous transformation:</p>
<table>
  <thead>
    <tr>
      <th>Transformation</th>
      <th>URL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Resized + cropped</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/w_300,<code>c_crop</code>/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
  </tbody>
</table>

<p>The result is this one:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72f37d76-4c98-46c3-bf92-d246e033ef30/6-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72f37d76-4c98-46c3-bf92-d246e033ef30/6-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Image resized and cropped (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72f37d76-4c98-46c3-bf92-d246e033ef30/6-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>Yikes! What happened? One of my friends has been cropped out of the image! Let’s put him back in by applying the cropping around the south-west section of the image via the gravity transformation <code>g_south_west</code>:</p>
<table>
  <thead>
    <tr>
      <th>Transformation</th>
      <th>URL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Resized + cropped + focused</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,g_south_west/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,<code>g_south_west</code>/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
  </tbody>
</table>

<p>The result is this one:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2aca48a-39f5-4050-83d8-07bf205e7b84/7-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2aca48a-39f5-4050-83d8-07bf205e7b84/7-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Image resized, cropped and focused (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2aca48a-39f5-4050-83d8-07bf205e7b84/7-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>Ok, my friend is back, but now the heads of my two friends have been chopped off! To fix this, Cloudinary offers a better option: using transformation <code>g_faces</code> will have an AI identify the faces in the image, and perform the cropping around these:</p>
<table>
  <thead>
    <tr>
      <th>Transformation</th>
      <th>URL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Resized + cropped + focused around faces</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,g_faces/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,<code>g_faces</code>/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
  </tbody>
</table>

<p>The result is this one:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/80d9355b-1770-4170-8ed1-8eb47caf55e8/8-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/80d9355b-1770-4170-8ed1-8eb47caf55e8/8-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Image resized, cropped and focused around faces (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/80d9355b-1770-4170-8ed1-8eb47caf55e8/8-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>This looks much better! Now, what would happen if there were no people in the picture, so we can’t use <code>g_faces</code>? Cloudinary offers a still better option: using <code>g_auto</code>, an AI will automatically decide which is the most interesting section of the image, and perform the cropping around it:</p>
<table>
  <thead>
    <tr>
      <th>Transformation</th>
      <th>URL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Resized + cropped + focused around the most interesting content</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,g_auto/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,<code>g_auto</code>/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
  </tbody>
</table>

<p>The result is this one:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e22e63fe-8362-4e0d-b420-3148b8b0019f/9-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e22e63fe-8362-4e0d-b420-3148b8b0019f/9-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Image resized, cropped and focused around the most interesting content (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e22e63fe-8362-4e0d-b420-3148b8b0019f/9-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>Now the thumbnail looks perfect.</p>
<p>Finally, I want to apply some distinctive style that makes my site unique. I’ve decided to apply the hue level to <code>40</code>, via transformation <code>e_hue:40</code>:</p>
<table>
  <thead>
    <tr>
      <th>Transformation</th>
      <th>URL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Resized + cropped + focused + custom hue</td>
      <td><a href="https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,g_auto,e_hue:40/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg">https://res.cloudinary.com/dpelr4pk9/images/w_300,c_crop,g_auto,<code>e_hue:40</code>/v1636082490/wpPlayground/me-and-friends/me-and-friends.jpg</a></td>
    </tr>
  </tbody>
</table>

<p>The result is this one:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ce824c-8f5b-46c4-bbc2-834d6a99cd80/10-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ce824c-8f5b-46c4-bbc2-834d6a99cd80/10-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Image resized, cropped, focused and with distinctive hue level (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ce824c-8f5b-46c4-bbc2-834d6a99cd80/10-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>I finally got it: the transformation I want to apply to my images, to obtain the thumbnails for the homepage, is <code>w_300,c_crop,g_auto,e_hue:40</code>.</p>
Serving The Most Optimal Images
<p>In addition to using image transformations for styling, we can use them to compress images in order to load them faster. Indeed, <strong>reducing the size of the images is exceptionally important</strong> in order to <a href="https://www.smashingmagazine.com/2021/01/front-end-performance-quick-wins/">improve the performance of the site</a>.</p>
<p>Cloudinary is ideal to optimize performance, for two main reasons:</p>
<ol>
<li>The images are served via a CDN, located near the user browsing the site, greatly reducing the latency of the request;</li>
<li>The service automatically compresses the images to the most optimal version, sparing this effort to the team.</li>
</ol>
<p>In order to deliver the most optimal version of the image, Cloudinary offers a couple of handy transformations:</p>
<ul>
<li><code>f_auto</code>: Automatically uses the most suitable image format, including AVIF, WebP, PNG and JPG.</li>
<li><code>q_auto</code>: Automatically calculates and serves the best tradeoff between visual quality and file size.</li>
</ul>
<p>For instance, if the browser supports the <a href="https://www.smashingmagazine.com/2021/09/modern-image-formats-avif-webp/">new AVIF format</a>, then the served image will be of type <code>image/avif</code>, producing significant savings in file size while not decreasing the visual quality. Otherwise, it will serve <code>image/webp</code> if supported, or fall back to <code>image/png</code> or <code>image/jpg</code> (or some other format).</p>
<p>In the screenshot below, I have appended transformation <code>f_auto,q_auto</code> to the image from earlier on, and loaded it in Firefox and Safari. While in Safari the image is retrieved as <code>image/jp2</code>, in Firefox it is served as <code>image/webp</code>, thus transferring fewer bytes:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d7bfd8d-db37-41a5-bc8b-d9b9702990f1/11-transforming-optimizing-images-videos-wordpress-website.png" /></p>
Transforming Images In WordPress
<p>Cloudinary has recently released v3.0 of its WordPress plugin, with <a href="https://wordpress.org/plugins/cloudinary-image-management-and-manipulation-in-the-cloud-cdn/">several handy new features</a>. Let’s use this plugin to automatically apply transformations to the images on a WordPress site.</p>
<p>If we are not Cloudinary users yet, we can <a href="https://cloudinary.com/users/register/free">create an account for free</a>. When installing the plugin, we will need to provide the connection information of our Cloudinary account:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ea5b040-791b-453a-8370-054e5595c931/12-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>Once installed, the plugin’s dashboard will provide statistics of the transformations, bandwidth and storage the website is using:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/47b690d4-faf5-4d1a-9ce9-d0bcbaa73adc/13-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>In the "General settings" page we can configure if to synchronize the uploaded images to Cloudinary automatically or manually, under what folder to save the images for the site (which is particularly useful if we’re using Cloudinary for more than one site), and where to host the images.</p>
<p>By default, images are hosted in both the Cloudinary cloud and the WordPress server, giving us the chance to disable the Cloudinary plugin at any time <strong>without any data loss</strong>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ba21ac9-23a0-410a-974d-b2a7526e7aaf/14-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>In the "Image Settings" page, we can define global transformations to apply to all images. By default, all images have properties "Image format" and "Image quality" set to "Auto", which (as explained earlier on) will produce the most optimal version of the image according to the specific device and browser:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d74fe89e-e994-4916-8407-ee2c74bb2901/15-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>On this page, we can also define "Additional image transformations", to be applied to all images. For instance, I can define here transformation <code>e_hue:40</code> to apply a hue level of 40 to all the images on my site.</p>
<p>We can also be more <strong>selective when applying the style</strong>. We can define transformations for a specific tag or category, which will be applied to the media elements added to the post with that tag or category:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6207c22e-2337-4138-868d-d81ead77fee8/16-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>The other pages under the "Cloudinary" menu enable us to <strong>configure the general options of the plugin</strong>, so that we can do all of the following:</p>
<ul>
<li>Define transformations for videos (in addition to images);</li>
<li>Use lazy loading, which improves performance by loading an image only when it appears within the viewport;</li>
<li>Define breakpoints for responsive images, which improves performance by allowing the browser to load the smallest image that fits within the device’s screen;</li>
<li>Configure Cloudinary’s Gallery block for the WordPress editor.</li>
</ul>
Applying Transformations To Individual Images
<p>In addition to defining transformations to be applied across the site, or for a specific tag or category, we can also apply transformations individually to a certain image, right when inserting the image into the post.</p>
<p>When opening the Media Manager, there will be a new tab "Cloudinary". Clicking there we can browse all the images hosted in our account, and <strong>apply custom transformations</strong> to them. As a result, a new image will be created on the WordPress site, to be added to the post as usual:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc04b4ec-9222-4fca-b839-cb57fc42c216/17-transforming-optimizing-images-videos-wordpress-website.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc04b4ec-9222-4fca-b839-cb57fc42c216/17-transforming-optimizing-images-videos-wordpress-website.gif" /></a>Applying an individual transformation (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc04b4ec-9222-4fca-b839-cb57fc42c216/17-transforming-optimizing-images-videos-wordpress-website.gif">Large preview</a>)

<p>I also want to add an overlay caption "Me and my friends in sunny Barcelona" on the image. To achieve this, the transformation <code>l_text:Arial_25:Me and my friends in sunny Barcelona,g_north_west,y_70,x_25</code> will add an overlay text and position it on a specific place on top of the image:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ceb6f64-1601-4add-8df5-99f99ab43e5f/18-transforming-optimizing-images-videos-wordpress-website.jpeg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ceb6f64-1601-4add-8df5-99f99ab43e5f/18-transforming-optimizing-images-videos-wordpress-website.jpeg" /></a>Placing an overlay text on the image (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ceb6f64-1601-4add-8df5-99f99ab43e5f/18-transforming-optimizing-images-videos-wordpress-website.jpeg">Large preview</a>)

<p>Now, since the transformed image is yet another image on the WordPress site, we can also use the WordPress editor to add the overlay text. For this, we can transform the image into a Cover block and add a caption:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46d32732-e6bc-43d4-9152-dcde173138c8/19-transforming-optimizing-images-videos-wordpress-website.png" /></p>
<p>In addition to the WordPress editor, Cloudinary’s plugin is also fully compatible with all popular page builders, including Elementor and Divi.</p>
Conclusion
<p>If we want to make our websites successful, we need to pay special attention to two concerns:</p>
<ol>
<li><strong>Design</strong><br />You need to have the website stand out from all other websites out there by giving it a unique personality.</li>
<li><strong>Speed</strong><br />Make sure that the website is as fast as possible for an optimal user experience, and to score the highest Core Web Vitals so that it can index higher in Google.</li>
</ol>
<p>In both accounts, Cloudinary can help us out. All it takes to add a custom design for our images is to select the desired transformations, and the image (optimized to the specific browser and device) will be served from a CDN with data centers all over the world — delivering a super-fast experience.</p>
<p>If you have a WordPress site, the <a href="https://wordpress.org/plugins/cloudinary-image-management-and-manipulation-in-the-cloud-cdn/">latest version of the plugin</a> provides an enhanced experience, including seamless integration with the WordPress editor, full compatibility with the major page builders, a new dashboard providing stats on the usage of the service, and improved features to optimize your site. Check it out!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:27;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:84:"Meet Hydrogen: A React Framework For Dynamic, Contextual And Personalized E-Commerce";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:104:"https://smashingmagazine.com/2021/11/hydrogen-react-framework-dynamic-contextual-personalized-ecommerce/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:104:"https://smashingmagazine.com/2021/11/hydrogen-react-framework-dynamic-contextual-personalized-ecommerce/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 08 Nov 2021 14:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:304:"A great commerce experience is not a Lighthouse score or a set of Core Web Vitals figures (although both are important inputs), but it’s also a trilemma that carefully balances competing needs of delivering a great customer experience, dynamic storefront capabilities and long-term business objectives.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Ilya Grigorik)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:187:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee33395f-684a-40e5-bf72-56d9e9e4d975/hydrogen-react-framework-dynamic-contextual-personalized-ecommerce.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:9445:"<p>As developers, we rightfully obsess about the customer experience, relentlessly working to squeeze every millisecond out of the critical rendering path, optimize input latency, and eliminate jank. At the limit, statically generated, edge delivered, and HTML-first pages look like the optimal strategy. That is until you are confronted with the realization that the next step function in <strong>improving conversion rates and business objectives</strong> requires leaning into heavy personalization of your storefront. </p>
<p>The journey, often, starts “simple” with localization. But then, quickly advances to contextual pricing, juggling complexity of large and frequently updated product catalog, managing continuously running multivariate tests and promotion campaigns, and serving customer-tailored dynamic recommendations. Eventually, you reach a realization that every page is similar to an open Tetris board where each “slot” can and should be dynamically tailored by dynamic visitor preferences, all powered by an ever-growing set of dynamic business rules.</p>
Hydrogen Is Purpose-Built To Power Dynamic Commerce
<p>I work at Shopify, an all-in-one commerce platform to start, run, and grow a business. We work with millions of merchants, and as many companies, we <a href="https://www.shopify.ca/plus/guides/ultimate-guide-to-site-speed">obsess</a> <a href="https://shopify.engineering/how-shopify-reduced-storefront-response-times-rewrite">about</a> <a href="https://www.shopify.ca/blog/dawn-shopify-theme">storefront</a> <a href="https://www.shopify.ca/blog/shopify-site-speed">performance</a>.</p>
<p>We obsess <a href="https://www.youtube.com/watch?v=zsyKQ9lT8tQ">even more</a> about finding the optimal balance between performance, capabilities, and merchants’ business objectives. A key insight that we’ve learned from all the merchants on this quest is that at the core, <strong>commerce needs to be dynamic</strong>.</p>
<p>From connecting back-office operations to front-of-the-house A/B testing and dynamic personalization for each customer, the shared foundation is fast server-side rendering powered by fast storefront data access. On top of this foundation, we add layers of caching, prerendering and edge delivery optimizations — not the other way around. </p>
<p>Surveying the existing landscape of available developer tools and runtimes, <strong>we felt that there is a gap</strong>. Enabling dynamic commerce requires close integration between server and client, an optimized streaming and data fetch strategy, and a production platform that operates at scale.</p>
<p>These are hard technical problems that Shopify can help solve and this is why we’ve been hard at work on the <a href="https://github.com/Shopify/hydrogen">Hydrogen framework</a>. It’s a React-based framework optimized for commerce and specialized to be powered by Shopify APIs and infrastructure:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b995898d-bc04-4353-bc30-3a80c482977e/in-line-product-snapshot-cart.png" /></p>
<p>The future of commerce is <strong>dynamic and personalized</strong>. At Shopify, we believe such shopping experiences can be fast no matter where shoppers are located and built without the restrictions imposed by static site generation. Paired with a set of Shopify-optimized commerce components and a Vite-powered developer environment, it’s the fast framework for developers and customers.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1b47845-e8bd-43d1-9731-1762bf503453/hero-800px.png" /></p>
<p>Today, we are <a href="https://www.shopify.com/partners/blog/hydrogen-developer-preview">launching the public developer preview</a>: dive into the <a href="https://shopify.dev/custom-storefronts/hydrogen">docs</a>, spin up a <a href="https://hydrogen.new/">test instance on Stackblitz</a>, drop your <a href="https://github.com/Shopify/hydrogen">feedback and comments on GitHub</a>.</p>
<p>Getting fast initial render with streaming server-side rendering, efficient component-level updates and state transitions, while also setting up a performant loading and bundling strategy for all the assets is hard and time-consuming technical work. And, of course, the result needs to be seamless and delightful — dare we say, <a href="https://youtu.be/a2YSgfwXc9c?t=715">even fun</a> — to develop and maintain. </p>
<p>Regardless of whether you’re setting up a storefront for a new merchant, or building a customer experience that will be visited by millions, the goal for Hydrogen is to eliminate undifferentiated and gnarly technical plumbing and enable you to <strong>start fast and focus on delivering merchant value</strong>.</p>
<p>For example, a few critical pieces that Hydrogen solves:</p>
<ul>
<li><a href="https://shopify.engineering/high-performance-hydrogen-powered-storefronts#streaming-server-side-rendering">Streaming server-side rendering</a> for fast first render powered by React’s Suspense;</li>
<li><a href="https://shopify.engineering/high-performance-hydrogen-powered-storefronts#react-server-components">React Server Components</a> for efficient, post-render component-level state updates;</li>
<li><a href="https://shopify.engineering/high-performance-hydrogen-powered-storefronts#data-fetching-caching">Efficient server and client data fetching</a> primitives with smart cache defaults;</li>
<li><a href="https://shopify.engineering/high-performance-hydrogen-powered-storefronts#response-caching">Flexible page and subrequest caching controls</a> for dynamic and edge delivery.</li>
</ul>
<p>Unlocking such features and making them all work nicely together required that we work <strong>hands-on with React core team</strong> on helping define and prototype server components; Vite ecosystem on server-side streaming; Google’s <a href="https://web.dev/introducing-aurora/">Aurora</a> team on integrating conformance and CLI tools that will keep you on track with modern best practices:</p>
<blockquote>“The Chrome team at Google is excited to see Shopify continue to improve web performance at scale. Through our collaborations to improve perf out of the box, such as smarter image optimization, we believe that it’s possible to achieve an excellent user experience that benefits Shopify’s merchants and their customers.”<br /><br />— Addy Osmani, Chrome Engineering Manager</blockquote>

<p>Of course, Hydrogen also comes with a set of pre-built and optimized components that know how to speak to the Shopify Storefront API and allow you to focus on presentation — the differentiated merchant value — instead of plumbing.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a0ad56f-e307-432a-bc38-cb2bc076b52a/in-line-product-snapshot-pdp.png" /></p>
<p>Curious to give it a try? Our developer preview is live at <a href="https://shopify.dev/custom-storefronts/hydrogen">shopify.dev/custom-storefronts/hydrogen</a>. Take it for a spin, <a href="https://github.com/Shopify/hydrogen">let us know</a> what you think!</p>
Commerce At Shopify Scale: Hydrogen Powered By Oxygen
<p>As any seasoned team will know, building the storefront capabilities is one thing, and running it at a production scale that is able to absorb large waves of traffic, driven by flash sales or breakout social campaigns, is a whole other and massive operational challenge.</p>
<blockquote>“It runs fast, and I don’t see any errors on my machine [...]”<br /><br />— said every developer.</blockquote>

<p>This is where Oxygen comes into play. Oxygen is a new Shopify hosted <strong>V8 Isolate-powered JavaScript worker runtime</strong> that leverages all of the platform, operations and security knowledge capabilities that we’ve developed over a decade+ of scaling millions of storefronts. Our existing merchants never have to think about the complexity of scaling infrastructure for a record-setting flash sale, and Hydrogen storefronts won’t have to either.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0cccdef1-f399-4f31-9c02-89c0f9e334c6/in-line-hydrogen-on-oxygen.png" /></p>
<p>Under the hood, Oxygen runtime runs on geo-distributed clusters with colocated Shopify data that is milliseconds away; <strong>fast data access is integral</strong> in enabling fast dynamic commerce and colocating data and rendering is our (not so secret) weapon. One network hop up, Shopify’s CDN adds optimized edge-delivery with commerce specialized protection against malicious actors and shopping bots that now often operate at a scale that is able to DDoS many storefronts.</p>
<p>Oxygen is in early access preview with select merchants. Stay tuned for more in 2022!</p>
Hydrogen And Oxygen Are The Building Blocks For Modern Commerce
<p>The experience of our merchants shows that commerce is dynamic, contextual and personalized. This does not mean that some, or perhaps even substantial parts of some storefronts, cannot be cached and served from the edge. This is not a debate about dynamic vs. static. You need both.</p>
<p>Our vision with Hydrogen and Oxygen is to <strong>unlock the best of both worlds</strong> and make building and running the next million of modern — dynamic, contextual, and personalized — storefronts easier, more cost-effective, and fun.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:28;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:54:"The Value Of Concept Testing As Part Of Product Design";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:76:"https://smashingmagazine.com/2021/11/concept-testing-part-of-product-design/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:76:"https://smashingmagazine.com/2021/11/concept-testing-part-of-product-design/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 05 Nov 2021 11:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:269:"Concept testing ideas before moving into a detailed design is good UX practice. In this article, Victor Yocco presents details on how and when to engage in concept testing, as well as case studies providing details on the insights gained in two very different settings.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:41:"hello@smashingmagazine.com (Victor Yocco)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:159:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca39dbc3-101c-4973-9dce-debb1ab283ff/concept-testing-part-of-product-design.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:36448:"<p>UX design teams are passionate about our approach to solving problems and providing users with experiences that lead to their desired outcomes. Without some type of user input guiding our process, we are left being directed by the same high-level stakeholder assumptions we often rally against as being the antithesis to UX: those holding the purse strings have the loudest voice in the room.</p>
<p><strong>Concept testing is a research method</strong> that involves getting user feedback during the upfront part of the design process to give feedback on potential solutions. Concept testing at the beginning phase of product development allows users to share in the initial shaping of an idea to solve a problem.</p>
<p>For example, let’s say a large bank wants to make it easier for customers to enroll in direct deposit, you would be fairly safe to assume that allowing customers to complete the enrollment process online from start to finish would be an easy win to solve this problem. However, with limited resources including time, money, and available labor, decisions need to be made:</p>
<blockquote>Should the enrollment be mobile friendly? Can/should enrollment happen in a native app and online? Should banks have computer kiosks set up for in-person customers to enroll? How aligned are customers’ goals with the goals of the business as it relates to the idea of enrolling in direct deposit?</blockquote>

<p>These are only a few questions of many that you can immediately come up with based on the concept of enrolling in direct deposit online — a relatively simple idea.</p>
<p>Concept testing allows you to <strong>reduce risk while increasing focus on user input</strong> on building out a product to meet user needs. Concept testing does not take the place of being visionary, however, being visionary without insight from others might be analogous to throwing spaghetti at a moving target and getting lucky every now and then — concept testing will help slow down that target or increase your spaghetti-throwing accuracy.</p>
What Is Concept Testing?
<p>Concept testing, as I’m describing in this article, is the process of getting <strong>feedback from stakeholders and users</strong> on a solution that has yet to come to life through detailed design. Concept testing as I’m describing here is a hybrid of market research and UX research in that we are examining if the idea or solution has a potential market and if it does, just how we might best execute delivering the experience. </p>
<p>I believe concept testing is a pivotal part of the up-front UX process. UX teams should consider it a mandatory step in designing a product. We sometimes run into projects where the upfront discovery with users is rushed or overlooked as unnecessary. Concept testing allows you to justify engaging or re-engaging with users before building out the product in a detailed design.</p>
<p>For example, if you are hired at Big Bank X and they want to build a new financial service they can offer online, they might have already completely defined the service from the business perspective and expect detailed design to commence immediately (not a UX approach, but one that is often followed by large businesses). Your UX team can ask for some space to <strong>get the general concept in front of users</strong> by saying concept testing is a standard part of any request for work you accept. You can take the argument from there; I’m aware these things don’t always end the ideal way.</p>
<p>Concept testing allows you to validate an idea before you invest resources in building something that misses the mark. You’ll identify potential roadblocks to implementing your idea that you may have missed if you ask the right questions during testing. Concept testing does not serve as a replacement for usability testing when you have more refined design wireframes or prototypes with detailed design.</p>
<p>Concept testing is a great next step once you’ve done basic discovery work <strong>identifying the problem and building empathy with users</strong> through user research. You might hold workshops or working sessions with key stakeholders and users as the idea is grown from a seed in order to generate the artifacts we will discuss below, but I suggest waiting to build out the requirements of the product until you’ve done testing.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d59b74c-dd98-4bd7-a8b4-facda9e2be03/2-concept-testing-part-of-product-design.png" /></p>
<p>There is such a thing as too early to concept test. If you have a complex idea or one that is too abstract to be relatable I suggest doing a little more work to refine the use cases and realistic scenarios in which you might present users with the product. If you haven’t reached a critical mass of which testing is a valuable use of the resources required, you should hold off until the concept becomes more thought out or you have additional concepts to include in testing to <strong>make it worthwhile</strong>.</p>
<p>You can test concepts in a number of ways, I’ll cover a few in this article, but each way includes getting feedback from potential end-users on the validity and execution of the idea. You can engage in concept testing as part of an interview with a participant in which they provide feedback on the concept. You might execute concept testing in person, remote, asynchronous-unmoderated depending on your goals and testing artifacts. I’ll discuss this all in detail, but first I want to cover the importance of testing.</p>
<h3>Explore Novel Ideas To Beyond What Your Team Already Has</h3>
<p>Concept testing can help you identify a viable idea for the present and also identify ideas you might implement in the future when technology or society is ready. For example, you might add an aspect of augmented reality to your concept testing and get some <strong>ideas around the expectations and challenges</strong> for implementation while knowing this isn’t the main focus or immediate outcome of the concept testing. You can explore ideas that are out of your typical comfort zone without giving the impression you will create the product or invest in resources to build a more authentic experience to test.</p>
Who To Involve In Concept Testing?
<p>You should involve as many members of the product team as possible in concept testing. Your full design team should be a part of creating and executing concept testing. You’ll need researchers to actively engage in creating the protocol, designers to help with any relevant artifacts, information architects and content strategists to help apply their knowledge as needed and to learn from the findings.</p>
<p>The value in concept testing extends beyond UX and you should <strong>include members beyond the UX team</strong> in the process of carrying out testing. This includes:</p>
<ul>
<li>Marketing team members,</li>
<li>Tech/Dev team members,</li>
<li>Business analysts,</li>
<li>Key internal stakeholders from outside the core product team.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95b6f346-5077-4b77-91cb-ec744a7cbb71/1-concept-testing-part-of-product-design.jpg" /></p>
<p>You can invite these team members to join planning sessions or leave it as simple as inviting them to view a testing session so they see how users respond to the idea. I’ll caution that sometimes only viewing one testing session (or one research session) will leave a key stakeholder with an impression based on what was discussed during that session, and it might make it more difficult to convey conflicting information from other sessions if that stakeholder has formed a full opinion based on what they saw with their own eyes.</p>
<p>Another tactic for getting key stakeholder buy-in is to have them be participants in the testing sessions. You can mix in key stakeholders who might also be users or work closely with users (for example, supervisors at an HR service provider call center might be good to include as part of the participants to test the concept of your new idea for a virtual assistant tool call center reps would use while servicing calls, along with using actual call center reps who might benefit from using the tool daily). This allows key stakeholders to <strong>gain an understanding of the concept</strong> and potentially become advocates of the idea coming to fruition. However, you should not focus solely on internal stakeholders as a concept testing population.</p>
<p>Representative end-users should ultimately have a large say in how a concept evolves if we are practicing what we preach as UX practitioners. That doesn’t mean you can only move forward with ideas that users suggest are great ideas. What it might mean is:</p>
<ul>
<li>You might want to make tweaks to parts of the idea that didn’t test well before moving forward.</li>
<li>You haven’t identified the correct audience for your concept and you need to expand or redefine the user base.</li>
<li>The idea itself isn’t easily understood and you need to explore what you can do to make it easier to understand.</li>
<li>It could mean the problem being solved isn’t well understood and you’ll need to be patient upfront while adoption occurs and users realize the extent of the need for the solution.</li>
</ul>
What Artifacts Can You Use In Testing?
<p>Effective concept testing requires some type of artifact to convey the idea. I’ve changed my opinion on this as I’ve grown as a researcher. I initially thought it was a better idea to test concepts completely in the abstract — as a researcher, I wanted to avoid leading people. But in reality, people can become frustrated or make guesses that aren’t helpful when they are simply presented with the question — what do you think of when I say “financial command center?” Instead, showing them <strong>a simple sketch of some charts</strong> representing the concept of personal financial data being monitored can generate a robust conversation where they provide deep insight into the direction and critical functionality of a “financial command center.”</p>
<p>Although I changed my thinking and now believe artifacts are key to concept testing, I do think it’s important to keep it conceptual — the point is to present ideas and let users expand on them, not grab users tightly by the hand and walk them to the conclusion that your idea is great and usable. The purpose of the artifact is to <strong>ground the research participant’s thinking</strong> in the reality the future concept would exist and allow them to think about how the concept would apply to this reality.</p>
<p>You can be creative, but here are some potential artifacts you can use in concept testing:</p>
<ul>
<li><strong>Sketches and drawings</strong><br />Many concepts for both physical and digital products start as sketches. You can take something as simple as a few sketched-out screens or a comic strip laying out an interaction in a way that might convey the concept. You might be creative in how finished or unfinished the sketches are and ask your testing participants to finalize the sketches or move into the next frame of a story with what they expect would happen next.</li>
<li><strong>Craft supplies</strong><br />You can use tangible, tactile artifacts to help convey a concept. In one of my case studies, I’ll share how we used velcro and felt to have potential users explore the concept of a touch screen kiosk at a zoo exhibit. I’ve also been a part of studies where we created an ATM out of cardboard to simulate a user interacting with an ATM as part of the concept. These types of artifacts allow you a low expense, low fidelity way to convey higher expense, higher fidelity ideas.</li>
<li><strong>Sticky notes</strong><br />You can use sticky notes to indicate a workflow, with each step placed on a different sticky note. You might allow interview participants to reorder and add to the sticky notes in order to design their ideal solution based on the seed of the concept you’ve provided.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e95ff396-7567-46da-a6ed-5a39ea22bb7c/6-concept-testing-part-of-product-design.jpg" /></p>
<ul>
<li><strong>Let participants create something.</strong><br />You might want to have users take the concept from an idea you share into what they would create if they were executing the idea. This would allow you to explore the features, functionalities, and imagined use cases potential users have while they build out an experience they believe would either meet their needs or align with their understanding of how they might use the concept. <strong>I suggest doing this as a group activity</strong>; a researcher can facilitate a discussion while participants create and explain their solutions. You can use either paper and pencils for users to sketch out the idea or craft supplies to have them create something. Give participants a warm-up activity such as <a href="https://www.drawtoast.com">how to make toast</a>, then have them solve for the topic you are solving for. The idea is to understand the logic behind what participants feel the ideal solution might be, designers can then translate those requirements into a digital context and use them as inspiration.</li>
</ul>
<p>I don’t think this is an exhaustive list of the types of artifacts you can use. I encourage you to be creative and really allow for users to be the ones who take the artifact and turn the concept into an experience that is useful for them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/43caa4d7-406c-4682-b56e-6ac6b95fd5ca/5-concept-testing-part-of-product-design.jpg" /></p>
Two Common Concept Testing Methods: Interviews And A/B Testing
<h3>Interviews</h3>
<p>We often use interviews combined with artifacts in UX research. A concept testing interview focuses on the concept and covers the high-level areas of:</p>
<ul>
<li><strong>Hypothesis testing</strong><br />Questions to explore the supposed need the concept will address. Do users really struggle with accomplishing a task or have an unmet need in the area your concept will provide a solution? Will this concept meet the needs the users have?</li>
<li><strong>How potential users are currently solving the problem</strong><br />What are the use cases for your concept? How are users meeting their needs currently? Is this a manual process you might automate? Is this something that is being done outside of your system that you’d like to integrate through features? Is this something users aren’t aware they are doing that’s additional, but you’ve identified a technology that could remove a step from their process?</li>
<li><strong>Current comparative/competitive products</strong><br />What other tools or systems are users using to meet their needs? What types of experiences do users think might be relevant to the concept you’re exploring?</li>
<li><strong>Value proposition</strong><br />You can explore what makes your product valuable when understanding how it addresses the pain points they share. You can use the data from the previous two bullets to help inform the way your product can differentiate itself from current solutions. How do users talk about the value of your concept? You can use these words in future marketing of your product to convey the value proposition.</li>
<li><strong>Use of the artifact to elicit feedback</strong><br />Get direct feedback on the artifact you’ve created or are having users create.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/136ddb2d-ddfa-4ea1-a507-9c13bc3099ea/3-concept-testing-part-of-product-design.jpg" /></p>
<p>You can conduct these types of interviews remotely, however it might be difficult if you have a tangible artifact or want someone to build on your concept using craft material. I’d recommend using an <strong>online whiteboard or collaboration tool</strong> to accomplish remote co-create. Canvas Chrome, Google Jamboard, Miro, and Mural, are four examples of many online collaboration spaces that exist to serve the needs of remote co-creation. </p>
<h3>A/B Testing Using Artifacts</h3>
<p>Do you have multiple ideas around how to best bring your concept to life? If you are at a decision-making point, say you want to determine if mobile or desktop is the right way to focus your initial effort, you can introduce multiple artifacts to compare multiple versions of your idea. You can answer each of the questions listed in the interview section of this article, and additionally, A/B testing will allow you to determine:</p>
<ul>
<li>Which version of your concept conveys your idea clearer?</li>
<li>Which version of your concept provides a more immediate value?</li>
<li>Which version of your concept is more realistic to bring to life and meet users’ needs?</li>
</ul>
<p>A/B testing requires greater resources in terms of creating an artifact to test. You’ll need at least two versions of an idea to move forward with A/B testing. You can <strong>conduct A/B testing asynchronously</strong>, having users log into a site hosting visualizations of the concept and asking them questions along the way. This might be static such as having the user view the concept then respond to questions, or it can be similar to how UserZoom or Usabilitytesting.com present questions in the context of a participant walking through a site or prototype. Many of these platforms for gathering user feedback also allow you to have users give audio responses or provide feedback on the overall experience upon the conclusion of their session.</p>
<p><strong>Asynchronous unmoderated A/B concept testing</strong> can allow you to include a larger number of participants without requiring you to dedicate time to conducting each session. You might have your testing split so that participants only encounter the A or the B version of the concept, or you might have them view both and leave feedback comparing the two, as well as including metrics answering the questions in the bullets above.</p>
<h3>Other potential methods</h3>
<p><strong>Co-design</strong> allows users to continue building out an idea you have. You might not want to introduce an artifact upfront in codesign, that way you aren’t biasing what participants might create. You can work with the designers to help create prompts for activities to facilitate participants in designing a solution to an existing problem using the materials you provide. This can be sketching, clay, pipe cleaners, and other crafting supplies, or it can be words you capture from participants describing a solution or what they would imagine a product that meets their needs could be. You can then use these creations/descriptions to align your idea or validate that your idea aligns with how users imagine their needs might be met. You might use an online whiteboard space (again, Miro, Mural, and many others are available) to cocreate virtually if participants are all remote.</p>
<p><strong>Survey</strong> allows broader feedback without the depth of an interview. You should work with a researcher who has experience creating reliable and valid survey questions that do not lead to biased findings. Surveys can provide a powerful argument that a market exists for your product when done at a scale allowing for statistical analysis and generalization of the results across your potential user population. You might present users with a link to view the concept or embed sketches of the concept into the survey. As survey tools evolve online, you can even include audio or video descriptions of the concept for participants to consume and then provide their feedback/complete the survey.</p>
<h3>What Can You Do With The Data You Get From Concept Testing?</h3>
<p>I recommend having a trained researcher guide concept testing efforts. You’ll benefit from the experience of someone with a background in designing studies and asking non-leading questions, as well as applying research findings to design recommendations based on what the data collected will bring to the team. </p>
<p>You’ll get different types of data depending on the method of concept testing you use. You’ll have <strong>qualitative feedback</strong> that might be good for telling the story of the product and exploring how people you spoke with see the concept evolving. You can use <strong>quantitative data from A-B testing</strong> to make decisions between multiple directions for a product and quantitative data from surveys to examine the market acceptance and prioritize features with statistical reliability if you conduct a large enough study.</p>
<p>Regardless of the method, once testing has validated the idea you can start designing the product, ideally going into a detailed design at the level you could then do <strong>usability testing</strong>. You can identify and prioritize features with insight from users. You can also test ideas that look beyond what an MVP will bring to life. You can create or refine a user-focused backlog of features for the product with concept testing findings. </p>
Shortcomings Or Potential Pitfalls Of Concept Testing
<p>Concept testing, like any research method, is not without its potential downsides or shortcomings. You can proactively account for some of these, while others might need additional research to complement your findings at a later point in the design process.</p>
<ul>
<li><strong>Setting false expectations for the future.</strong><br />We often run the risk of exposing users to something that either doesn’t come to fruition or won’t become realized with the same level of features or functionality that we test. For example, if you are going to let users build out on the concept after giving them an initial idea or sketch, you will need to be clear that the final product might not reflect exactly what they sketch out. Likewise, if you are sharing an idea that will have severe constraints in the short term due to limitations of your current technology, you might consider noting this or not sharing aspects of the idea that you know cannot become real for years to come. You can use concept testing to build excitement about the future product you are creating, however, you want to avoid building this up to the point where what is delivered is a disappointment.</li>
<li><strong>Sometimes you need a strong story that becomes leading when walking through the concept.</strong><br />If your concept is something that doesn’t exist and isn’t aligned with a system or tool someone is currently using it might be difficult to convey the idea without oversharing about how the concept will play out. I have an example of this in the second case study I share below. Essentially, you may end up telling a story that is so narrowly defined in order to convey what your product will do, your feedback will reflect how relevant the story you tell is to the users you are engaging in the testing, versus the larger value the concept might bring to users.</li>
<li><strong>Usability feedback won’t happen.</strong><br />Concepts aren’t meant to be of the fidelity that you are testing task completion and elements of the UI for usability. You might get some feedback on the evolution of steps in a conceptual flow, or if certain imagery or screen layout you are considering makes sense, but you won’t be in a position to refine design the same way you will be post usability testing after you’ve engaged in detailed design work. </li>
<li><strong>Fidelity can throw things off.</strong><br />If you use an artifact that is high fidelity it looks like a finished product. This can distract from the purpose of examining the idea, versus getting into the weeks of the look and feel of the experience. You might find participants more inclined to comment on branding or iconography than whether it even makes sense to present this experience in the context of its intended use. On the other hand, low fidelity can be too abstract for participants to provide meaningful insight. Back to the previous bullet on having a story, if you find yourself overexplaining the concept, it can become a case of you justifying your experience to a participant, and you’d be likely to introduce some type of response bias as a potential user now sees the emotional investment the creator has in the product and becomes more inclined to agree the product is useful.</li>
</ul>
Case Studies
<h3>Case Study #1: Concept Testing A Digital Kiosk For A Zoo Exhibit</h3>
<p>I had the pleasure of serving on a design team creating a digital and physical experience conceptualized as an opportunity to enhance visitor engagement with a manatee exhibit at a major metropolitan US zoo and aquarium. We wanted to test the concept of <strong>installing touch screen kiosks</strong> in the existing exhibit space. The kiosks would have an activity asking visitors to create pro-conservation messages to email to their family and friends.</p>
<p>We took a low-fidelity approach to concept testing. We spent a couple of weeks on site collecting data from visitors to the zoo’s manatee exhibit. We used a felt board with velcro-backed laminated drawings and words for people to use to create messages on our low-tech touch screen. Doing this allowed us to set up the felt board in multiple places throughout the exhibit to test for location and how the kiosks might impede or enhance the flow of traffic, along with testing the actual conceptualized activity.</p>
<p>Here are the additional details of this concept testing:</p>
<ul>
<li><strong>Concept</strong><br />At the highest level, the concept was that we can encourage the scientific processes of observation, recording, and sharing what you’ve observed through an enhancement to a zoo exhibit area. More granularly, the concept was a touch screen kiosk with a digital experience designed to facilitate observation, recording, and sharing.</li>
<li><strong>When/at what stage</strong><br />The idea and justification for funding the project were supported with a literature review of academic research on conservation education, as well as the previous experience of the experts on the team that would assemble if the funding was granted. The initial concept was sketched out in drawings in order to secure funding from a large grant-awarding organization with a mission to promote science education and interest in careers in science.<br />We tested the concept with zoo visitors in the exhibit space after funding for the project was approved and the team to build the exhibit enhancement was identified. This was before any detailed design or remodeling of the exhibit area took place.</li>
<li><strong>Who was involved</strong><br />The team involved in the concept testing included researchers, science educators, industrial designers, digital designers, developers, zoologists, and zoo visitors. </li>
<li><strong>Method</strong><br />Interviews were conducted onsite in the exhibit area. We had participants engage with the prototype of the touch screen while we asked them questions. We were also able to observe visitor flow through the exhibit and how our artifact’s location might impede or enhance flow.</li>
<li><strong>Artifact</strong><br />Crafts: felt board, laminated pictures of manatees, water, vegetation, and other relevant manatee habitat features with velcro on the back, laminated words for visitors to use to create messages under their pictures on the felt board.</li>
</ul>
<h4>Reflection</h4>
<p>I view this as one of the most successful concept testing efforts I’ve been a part of. We executed the testing well, and more importantly, we learned a lot to help us move forward with the idea that would eventually become an integral part of visiting the manatee exhibit. </p>
<p>We interacted with visitors in their context as part of the testing. <strong>Testing the concept in the actual space</strong> where it would exist allowed us to understand the impact of installing kiosks in the space. We learned from this how much of a potential negative impact on visitor flow the kiosks would have, and where we might best place the kiosks based on observed visitor flow through the exhibit. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1bcf92c5-5e07-447b-bcdd-5940bc910232/4-concept-testing-part-of-product-design.jpg" /></p>
<p>The tangible representation of the concept allowed visitors to interact with it in a way similar to a touch screen. We learned how visitors envisioned the experience, including identifying a number of expectations our concept would not meet.</p>
<p>One example was the freedom to create any message they wanted versus being given preselected lists of words to choose from. The product owner for the concept had concerns we could not allow people to create messages that might be offensive. We attempted to <strong>remedy this on our final design</strong> by including a message that allowed the user to enter their own email into the message as well.</p>
<p>We included a note that if they wanted to continue the conversation later in a less structured way, they could ask the person they were sending the note to reply to them. We also included this request as a predefined sentence that users could add to their message “Let’s keep the conversation going! Please reply to this email and I can share more with you when I get home.” (This was prior to ubiquitous smartphones.)</p>
<p>Ultimately testing was successful because we were working with a group that envisioned bringing visitors and experience informed by their needs and expectations. UX was not just a process, but a philosophy embraced by the team. Concept testing allowed us to <strong>shape the final design well before</strong> the materials were fabricated, screens were designed, or code was finalized.</p>
<h3>Case Study #2: Concept Testing A Digital Platform For Online Financial Management Tools</h3>
<p>A large international financial advisory wanted to create a new product that would combine multiple existing applications and bring new features to advisors using their services. The idea was simple yet the execution was going to be complex. The client wanted our team to explore the needs and pain points of users of the current applications, understand what gaps exist between the current applications and the needs of the users, and identify potential problems with bringing the concept to life and sunsetting the individual applications.</p>
<ul>
<li><strong>Concept</strong><br />Initially, an idea that then became wireframes after we conducted initial interviews with stakeholders who were also infrequent end users.</li>
<li><strong>When/what stage</strong><br />From a UX perspective, we were in the process of doing discovery interviews with stakeholders and potential users. We then mocked up the concept using a very constrained story to walk people through how the experience might unfold under a specific use case.</li>
<li><strong>Who was involved</strong><br />We had what might be considered a full product team engaged, we had a team of researchers, UX designers, and developers. We had multiple product owners from the existing products involved, as well as the owner of the yet-to-come-to-life product.</li>
<li><strong>Method</strong><br />We conducted remote interviews and screen sharing of a clickable prototype to engage stakeholders and potential end-users.</li>
<li><strong>Artifact</strong><br />We created a series of screens to highlight key features and steps of a couple of workflows we identified from stakeholders as critical to the success of the product. Due to the complexity of the idea, we felt it was important to create a very streamlined story to showcase exactly what the product was meant to accomplish in those scenarios.</li>
</ul>
<h4>Reflection</h4>
<p>This example of concept testing was not as focused on meeting the user’s needs as my previous example. While we were able to inform and improve the experience with the insights we gained, it became clear that a large part of our endeavor was to foster buy-in from high-level stakeholders who were key decision-makers and influencers at the organization. I’m not saying this is a bad thing, but it led to us <strong>interacting with a different set of research participants</strong> than we would have preferred if we were focusing on meeting the needs of users. I understand, and you likely do as well, there are many factors at play when an organization is making a determination to fund a new product.</p>
<p>Our client provided us with a list of required stakeholders to participate in the interviews and testing. We found out these stakeholders were more high-level than what would be considered an everyday user of the product. The client was pleased with the list because they wanted to raise awareness and buy-in of the concept at the top levels in their organization. We found less value in having these high-level stakeholders providing feedback on the concept and the experience because they were far removed from understanding some of the issues with the current tools, as well as the exact processes that were core to <strong>the purpose of the concept</strong>.</p>
<p>Upon reflection, I realize this testing was not ideal, but useful as an example of what to watch out for when setting up concept testing. I’m not sure the effort was worth the outcome, which yielded us little useful information relevant to end-users. We did the testing at the right time and with the right intention, but with the wrong audience. Our findings uncovered concerns of high-level stakeholders and salespeople around how they envisioned the use of the tool by others, or how they thought potential customers that might access the tool would respond. We reflected our concern that we needed end-users who were closer to the issues the concept was meant to resolve in our report out to the client. Many of our findings and recommendations for the next steps included <strong>getting these ideas and designs in front of actual end-users</strong>.</p>
<p>We were still able to uncover valuable insights, but perhaps we would have gotten much more in-depth on how the concept could play a role in the day-to-day life of users if we’d had a chance to speak with those types of end-users. We were able to identify the critical role of data visualization and show where data come from for this group. The concept was meant to help with making financial decisions and responding to real-time market conditions, so having trustworthy, easy-to-digest information was deemed critical. This allowed us to <strong>expand the role of data visualization</strong> as well as test some novel ideas for visualizing data, prior to moving into detailed design.</p>
<p>We also captured a number of concerns over what would happen with the legacy systems and training/education on the new system. We felt this made sense and aligned with the characteristics of the stakeholders we’d spoken to: many of them had invested budgets or sold the existing tools, and they would need to start finding solutions on how to communicate the transition to the new consolidated tool to their teams or clients as soon as possible.</p>
Conclusion
<p>Concept testing is a blend of market and UX research, two disciplines that share many methods in common. You shouldn’t consider it anti-UX to also explore topics related to market acceptance. After all, what good is a usable product if it serves no purpose or doesn’t have any meaningful sized market willing to adopt it?</p>
<p>Any experience starts as an idea — a concept — and we are in line with the philosophy of <strong>putting users first</strong> when we take our ideas out to the end-user for feedback at the conceptual stage. We can avoid costly errors in our design if we determine direction upfront through user research in the form of concept testing. You also make yourself open to gaining new insight and evolving your concept in directions you were not thinking of prior to engaging a broader group — including users — to provide feedback on the idea.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:29;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:65:"Smashing Podcast Episode 43 With Matthew Phillips: What Is Astro?";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:65:"https://smashingmagazine.com/2021/11/smashing-podcast-episode-43/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:65:"https://smashingmagazine.com/2021/11/smashing-podcast-episode-43/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 04 Nov 2021 18:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:179:"In this episode, we’re talking about Astro. Will this modern static site builder launch you into the stratosphere? Drew McLellan talks to developer Matthew Phillips to find out.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Drew McLellan)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:148:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/475de692-46fc-4058-af10-3736770698d5/smashing-podcast-episode-43.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:32685:"<p>In this episode, we’re talking about Astro. Will this modern static site builder launch you into the stratosphere? Drew McLellan talks to developer Matthew Phillips to find out.</p>


<h3>Show Notes</h3>
<ul>
<li><a href="https://astro.build">Astro</a></li>
<li>Matthew’s <a href="https://matthewphillips.info">personal site</a></li>
<li>Matthew <a href="https://twitter.com/matthewcp">on Twitter</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/10/optimizing-nextjs-applications-nx/">Optimizing Next.js Applications With Nx</a> written by Melvin Kosisochukwu</li>
<li><a href="https://www.smashingmagazine.com/2021/10/eye-tracking-mobile-ux-research/">Eye-Tracking In Mobile UX Research</a> written by Mariana Macedo</li>
<li><a href="https://www.smashingmagazine.com/2021/10/building-amazon-product-scraper-nodejs/">How To Build An Amazon Product Scraper With Node.js</a> written by Robert Sfichi</li>
<li><a href="https://www.smashingmagazine.com/2021/10/resources-tools-turbocharge-copywriting-skills/">50 Resources And Tools To Turbocharge Your Copywriting Skills</a> written by Freya Giles</li>
<li><a href="https://www.smashingmagazine.com/2021/11/magento-pwa-customizing-themes-coding/">Creating A Magento PWA: Customizing Themes vs. Coding From Scratch</a> written by Alex Husar</li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://twitter.com/matthewcp"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f19a730b-169d-44cb-9214-4b4019c2b5f2/matthew-phillips-250x250.jpeg" /></a>Drew McLellan: He’s an engineer at Skypack and a major contributor to a new project called Astro, which aims to combine performance best practices with the developer experience improvements we see from component based approaches. So we know he knows all about Astro, but did you know he can fit 18 whole lemons in his mouth? My smashing friends, please welcome Matthew Phillips. Hi, Matthew, how are you?</p>
<p>Matthew Phillips: I’m smashing.</p>
<p>Drew: That’s good to hear. I wanted to talk to you today about Astro, but before we do, why don’t you tell us a little bit about your background and how you’ve got to where you are today?</p>
<p>Matthew: Yeah, well, I’ve been working on front-end web development for a long time, probably six or seven years. The previous company, I was one of the maintainers of canjs, front end framework. Worked on that full-time open source for about three years I think. Also did quite a bit of consulting, different large and small companies on front end. And so I have a lot of experience in the front end. I had a big interest in web components and wrote various libraries surrounding web components. One’s called Haunted, may have heard of that, some people might have,</p>
<p>Matthew: and Fred, who’s the owner of Skypack, who started Skypack and worked on the Snowpack project, I knew him because he worked for Google on the Polymer project, which is a web component project. So I knew him just through the industry and I was thinking about changing jobs, looking to reset a little bit and they were hiring. So I jumped aboard, very interested. And have also a big background in ES modules and just module loading in general and that’s what they were working on at the time. So it was just good fit and so I decided to join aboard.</p>
<p>Drew: So you’ve really got your teeth into the back of the back end side of things, is that a fair assessment?</p>
<p>Matthew: I think so. I’m not super up to data on all the terminology, but I think that’s right.</p>
<p>Drew: That sounds about right to me. So I’m hearing a lot of buzz about Astro and that it’s some sort of static site generator, but I think that that term possibly under sells what it’s doing. What exactly is Astro and what is the problem that it’s solving for us?</p>
<p>Matthew: Right. Yeah. I mean, Astro is a static site generator. It’s kind of hard to explain how Astro came about, but I don’t know if that’d be helpful to go there, but what Astro is in general is, it’s a stack site generator that allows you to use components in any framework that you’re familiar with, whether it be View or React, Svelte, anything really you can bring your own framework and have that workflow that a lot of people enjoy while still generating purely static HTML and CSS.</p>
<p>Drew: So instead of using something like Handlebars or one of those traditionally server side templating languages, you can use your own reactive framework, essentially React or View or Svelte or whatever to act as the templating system for your static site generator. Is that-</p>
<p>Matthew: Yeah, it’s kind of, if you’ve heard of 11ty, but it’s kind of a halfway between something like 11ty or a more traditional static site generator where you’re using some templating language that is built for basically string concatenation in something front end, more front end driven static site generator like Gatsby, for example, it’s kind of a halfway between there. We wanted the developer experience, component usage, component usage is very useful. It’s very useful to be able to compose things in small chunks and there’s not a great way to do that in the more traditional templating engines that exist.</p>
<p>Matthew: So people, I think, gravitate towards these component based frameworks just because they’re so composable and the appeal to it doesn’t necessarily, it’s not necessarily, "Hey, I want this thing to be interactive in the client always." It’s just, "I want to compose things in small parts." And so yeah, we’re kind of a halfway between that, but we still want to generate this ideal static content. And I think there’s a lot of people who, like I said, they gravitate towards the framework way of doing things, but they’re not super happy with what it actually produces because, I’m writing a blog or I’m writing a marketing page or something like that, I don’t need all this Java script, but I’m kind of used to it and it builds well.</p>
<p>Matthew: So, I guess that’s kind of the problem you’re trying to solve is, we love, as people with... We have a lot of people in our community and on the team with a background in, I guess you would say the front of the front end, and they really want this plain HTML and CSS output, so it’s a way to balance those two desires, I guess.</p>
<p>Drew: So I guess it would be great for teams who are maybe building some sort of product in React or View or what have you, and then it comes to their marketing site and their document and their blog and all those things that actually they want to be really well SEO optimized and really faster load and really low overhead and would be ideal as static HTML and CSS pages, but they could still use their normal workflows and all the tools they’re used to to develop those.</p>
<p>Matthew: Yeah. Those workflows, those are super important. I think a lot of people can be a little critical from the outside. Like, "Oh, why did you build this thing this way? Why did you use React or whatever to build this landing page?" But these are teams and they’re spending a lot of time building websites or building internal tools or whatever it is they’re building and it takes a lot of effort to like, "Oh, we’re going to switch to a totally different context and use Jekyll or something else," and you got to get people up to speed.</p>
<p>Matthew: So I think those workflows are really, really important. And I read articles all the time where this team’s like, "Oh yeah, we use React. So we built our marketing site in React too." And if we can allow people to still use those normal workflows, but produce better output for what you’re actually trying to build, then I think that’s a huge win.</p>
<p>Drew: There’s a massive difference, isn’t there, between somebody just working solo on interesting projects that take their fancy and they might say, "Oh, okay, the ideal technical solution for this particular thing is this. And the ideal solution for this other thing is that," and there’s no real cost for them switching around. But when you’re talking about a team, if you take on the ideal solution for something that isn’t part of your normal tool kit, then you are almost bringing in technical debt into the team because somebody needs to keep their skills up to date with that other thing in order to keep it moving forward. So yeah. That’s really interesting.</p>
<p>Drew: Of course, one of the big things people worry about with these JavaScript heavy frameworks, React and all the others, is the weight of the JavaScript. So, I mean I guess performance is a big factor when it comes to the performance is a big reason that somebody might choose to use Astro. Is that right?</p>
<p>Matthew: Oh yeah, absolutely. So Astro does not add any JavaScripts by default. You can add your own script tags obviously and you can do anything you can do in HTML, but by default, thought of the other kind of component based frameworks, we don’t actually add any JavaScript for you unless you specifically tell us to. And I think that’s one thing that we really got right early. And it was kind of an accident actually, is that we were just building this thing and we just didn’t put in the part to make the JavaScript get loaded. We just didn’t write that part. We just wrote the part that generated the HTML and we’re like, "Oh, we actually like this better."</p>
<p>Matthew: So anyway, so what we wind up doing is we use a technique called partial hydration. I don’t know if you’re familiar with that, but essentially it’s a way to, you have a component and we only want to hydrate the part that actually is needed in the client. So if you’re familiar with more of a traditional SPA, single page app approach, usually have one component, which is your app component and it’s just nested a thousand components inside of it. Right? And some of those components are actually interactive, right? There could be a dropdown or there could be some type of form with validation, whatever it may be. Those are the parts that actually need to run in the client, but just the way the SPA architecture works, you got to run all the code for the entire thing for it to work at all.</p>
<p>Matthew: So partial hydration is, generally speaking, it’s a way to figure out what are the parts that actually matter, the parts that actually need to run in the client, and just only seeing that JavaScript. So one of the members of our team, Nate Moore, worked on this project called Microsite, which it was a Preact server rendering project, Preact. And what it would do is you would tell it, "Okay, this component needs to actually run in the client," and it would add the JavaScript for that. So he had worked on this partial hydration idea before and we just adopted that. He joined our team and we adopted that approach.</p>
<p>Matthew: So one thing that Astro does that’s unique is you tell it how you want it to hydrate in the client, and what I mean by that is there are different ways you can hydrate. Astro always loads JavaScript lazily, meaning that we don’t add a script tag for your component in the head or something like that. We don’t do that. Instead we have an in-line script that loads the JavaScript. And so you can load, I think there’s four different ways now, you can load on page load. So that’s the load event that exists in browsers, you can load on idle. So there’s a browser API called requestIdleCallback, and what that will do is it will let you know basically when the CPU is idle, when the browser’s not busy doing work, so you can load that way. And you can load on visibility, which means that, for example, maybe you have a component that’s far down in the page, you wait until the user scrolls that component into view, and then we load the JavaScript.</p>
<p>Matthew: And then lastly, there’s one called media and that’s based on media queries. So the use case for that is that, let’s say, you have some component that only runs on mobile, for example, and I’m sure you’ve seen the sidebars that you can click into view. Those types of things, usually a lot of times, don’t exist on desktop so you can set a media query and it will only load that component when it matches that media query.</p>
<p>Matthew: So anyways, those are the four ways to hydrate. So I think one thing that we did well is that we force you to choose which one of those things to do. So it makes the developer stop and think about, what it is the best way to load this code? Do I really need this code? Does this component need to run right away? Oh no, this thing only exists down the page. Let’s make this be visible.</p>
<p>Drew: So yes, I guess there’s all sorts of trade offs between each type. I guess if something’s only going to load when the browser is idle, then you don’t have control over if that’s going to happen in time for whatever sort of interaction that you want.</p>
<p>Matthew: Yeah. You would do that for maybe lower priority things, I guess. I mean it’s usually pretty safe, especially in Astro sites. Idle happens much quicker. You think about something that’s built as a SPA where there’s a lot of stuff going on, it’s rendering stuff and doing all this and maybe idle takes a little bit longer, but yeah, there’s definitely trade offs to all these. But I think the key thing is that we didn’t do anything magical really. I mean, it’s not like we figured out some crazy way to get performance. We just make you think about, what is the performance characteristics of what I’m building? And how should it load? And do I really need this thing to be in the browser at all? Or is this just happening one time when you’re building the site?</p>
<p>Drew: Yeah. I guess a lot of developers forget that the fastest site is one with no JavaScript on it. And so if you could just reduce the amount of JavaScript that is loading and passing, then it’s going to be quicker by default. So Astro renders all your JavaScript out to static HTML and CSS, and you can bring your own framework is something that it’s sort of described as, be that React or View or what have you. Does that mean Astro needs to have support for all of these frameworks? Or is it built in such a way that actually it really doesn’t matter what the JavaScript is that it’s dealing with?</p>
<p>Matthew: Yeah. There are little, we call plugins for these frameworks. So we’ve written a bunch of them already. If you just MPM install Astro, I think you get React, View, Svelte, Preact. I think it’s just those four. And I know we also have written our own plugins for Solid.JS, which is a newer framework, and Lit, LitElement, We have one for that as well. So they’re actually pretty easy to write. Every framework has a different way to render to HTML. So that’s what these plugins do is that you give them a component, or Astro gives them a component, and then they just render that thing to HTML.</p>
<p>Drew: I was going to ask, yes, because all the frameworks have their own mechanism, don’t they for rendering out? So these plugins essentially enable Astro to hook into those rendering methods and-</p>
<p>Matthew: Yeah, exactly. That’s all they do, is that... Yeah. Yeah.</p>
<p>Drew: That’s excellent. So I’m presuming that Astro isn’t going to be able to take an existing, say React single page application and turn it into a static site. I’m guessing you actually need to build your site in a particular way with Astro in mind in the first place. Is that right?</p>
<p>Matthew: Kind of. I mean definitely it’s better to start from a position where you are thinking about it as a static site, but you certainly can take a React, like I said, one, you have your app component, you can put that in Astro and you can say client load, which that says to load this thing in the client, and then you get your SPA. So you can actually build a SPA on top of Astro and then maybe pluck things out over time, you’re like, "Oh wait, this header doesn’t need to be run on the client, let me grab that out of my SPA and put it in the Astro file." Do it that way.</p>
<p>Drew: So I’ve seen the documentation refer to the approach of islands rather than one big land mass. So can you explain that to us? What does that mean?</p>
<p>Matthew: Yeah, it gets back to what I was talking about before with the partial hydration is that, instead of having, like I said, one big SPA that is your entire application and everything derives from that, instead you have these small what we call islands of interactivity. I think Jason Miller of Google came up with this terminology. So you might have your top navigation bar and that’s an island, and then you might have a tabs island with some content, and you have those sorts of things. So they’re like mini apps within your page.</p>
<p>Drew: Okay. So you might have essentially a component which renders your main navigation and then a second component next to it, which is showing your number of items in your cart, for example, and you could pick different approaches to when those are hydrated. So the navigation would probably be just rendered out to HTML and not really interactive, it’s just links. And the cart component would actually be more interactive, would be running on the client and updating as you add things to your cart, or whatever the scenario would be.</p>
<p>Matthew: Yeah, exactly. And like you said, it’s a good point is that you can choose different ways to hydrate each of those. Some of those you maybe don’t need to hydrate at all, some of them you need to hydrate immediately, some of them you might need to hydrate in visibility because you have these different islands, you can think about them individually and what’s the best way to actually load them. Something like a cart, you probably want to do pretty early, because you want the user to see that cart number show up pretty quickly.</p>
<p>Drew: So when a component loads, one that we want to be fully hydrated, when that hydration process occurs in the browser, what’s going on under the hood there? Is the whole initial JavaScript that would’ve loaded when the page loaded in the traditional architecture, is that whole bundle then downloaded and instantiated at that point? Or is there something more clever going on?</p>
<p>Matthew: No, that’s exactly how it works. Like I said, we didn’t really do anything magical, it’s just very pretty straightforward. You say that you want something to load on idle, we load it on idle. What we do is we inject our own little script in specifically for that component, and, for example, for idle there’s a API called requestIdleCallback, window.requestIdleCallback, when that gets called by the browser, we import your JavaScript and that’s basically it. And then we render it. Each framework has a different way to render components on the client and so we have that code that actually does the rendering. And then from there, you’re inside of the framework component. Anything that you do, if it’s a View component, anything you do with View, it all just happens inside of there.</p>
<p>Drew: And so you’re still leaning on the traditional tools like Webpack and what have you to do your bundling for that to make sure that you’re only loading one instance of React and all those sorts of things?</p>
<p>Matthew: Yeah. We use Snowpack. Our team were the creators of Snowpack. Fred created initially, but that’s a more modern tool than something like Webpack, and what that does is that gives you basically a dev server that compiles things on demand. So instead of getting one giant bundle of your entire "app", each file gets compiled individually in Dev, and then when you deploy that production, of course it all gets bundled in an optimized sort of way. Yeah.</p>
<p>Drew: One of the nice things about static site generators is that they’re generally very simple. You’re taking some markdown files or whatever it is and rendering them out to HTML, and there’s not really too much to go wrong there. Is there more inherent risk with the complexity of what Astro is doing that you could make a change to your code, create a new component or whatever, and suddenly find that Astro won’t build because there’s an incompatibility? Is that a risk?</p>
<p>Matthew: That’s a really good question. I mean, yeah. I guess anytime you add another layer of obstruction, there’s a possibility of incompatibilities. The biggest thing is that you’re working with a framework and you got to make sure your framework version matches the plugin, the React plugin or whatever it is that you’re using, but we keep all those things up to date. So I haven’t seen a lot of issues around incompatibilities, and what’s great about Astro in particular, one of the things I love about it is our community is very passionate and we have people, because we chose this big tent, bring your own framework approach, we have people in our Discord who are Svelte specialists. They’re very good at that. They’re very good at View. And if you have any questions, something that you don’t know how to do, you can go there and ask the question and there’s probably someone that can help you.</p>
<p>Matthew: So I know that there in the past, there’s been issues where certain features of View didn’t work right, and that’s because our plugin didn’t implement something correctly, and we have people that fix that stuff very quickly.</p>
<p>Drew: So there’s quite an active community. You say it was around a Discord server?</p>
<p>Matthew: Yeah. Yeah. We have a Discord and a lot of people on there, people that contribute to documentation, people that help with support questions, and very vibrant community. Yeah.</p>
<p>Drew: Well, what’s the maturity of Astro like I mean, how long has it been going and are people using it in production?</p>
<p>Matthew: Yeah, there’s definitely a lot of people using it in production. The idea of Astro, as we’ve been talking about is a way to make building multiple page apps, bringing that architecture back, taking the new modern way people build things with components and component frameworks, but getting rid of the SPA part of it, which I think causes a lot of problems in sites that don’t need to be SPAs.</p>
<p>Matthew: So we trying to marry the new way of building things with what we think is a better architecture for a lot of websites. So our first approach to that was to build a static site generator, but the technology behind Astro doesn’t necessarily have to just generate static sites, we just thought that was the best way to go. And in doing that, we targeted a certain kind of website. We targeted people who are building blogs or people who are building marketing pages, these sorts of things, maybe even getting into e-commerce a little bit.</p>
<p>Matthew: So we’ve really been focused on getting that story right, so a lot of the people who have built stuff in the production, there’s tons of people who have built blogs and deployed those. And we’ve gotten some marketing sites and stuff like that as well. So I think that area is definitely maturing. Probably the next thing we’ll go after, and it might be a little while, but eventually we’ll get into e-commerce. More things actually need to be dynamically rendered on the server. You can’t currently do that with Astro, but we’re definitely going to get there.</p>
<p>Matthew: We’re currently gearing up towards our 1.0 release. We have a few things left to iron out. The initial implementation of Astro was hacky in some regards, and there are things that were not great about it. So some people in the team have been rebuilding our Astro compiler and we’re gearing up towards 1.0. I can’t give a definite date, but by the end of the year, we’re hoping to get that out. So that would be the point where we consider it, obviously 1.0 is a big milestone and we consider it ready for everybody, people who are very cautious about adopting new tools would be able to definitely get into it by then.</p>
<p>Drew: And how many people are working on the core of Astro? I mean, obviously there’s the community around it, but I imagine there’s a more core team of people working on it.</p>
<p>Matthew: Yeah. At Skypack, we have four people. Well, yeah, four people working on it.</p>
<p>Drew: So is Skypack the main sponsor of it as a project?</p>
<p>Matthew: Yeah. So Skypack was, or is, a CDN for loading JavaScript. What you can do is you can load any packages that get published MPM, you can load them directly in the browser using Skypack. And when we started working on Astro, what we were really trying to do, we were trying to figure out a way to help people who were using Skypack to find a way, people wanted to host their content, host their own JavaScript on Skypack, And we’re looking for ways to do that. And we kind of fell into Astro out from that. We were like, "Well, we really need to know about how the person builds their website to better optimize the loading of everything."</p>
<p>Matthew: So we’re like, "Well maybe we could build a little thing to where you can put your components together and we know about these components, so we know exactly what JavaScript you need." And we’re working on optimizations as what Astro grew out of, but then Astro has taken off to a bigger extent than I think we really even anticipated. So, we’re kind of seeing that Astro is maybe the future of the company, so we’re building the business around Astro now. Still TBD on what that means exactly, but that’s kind of the direction we’re going.</p>
<p>Drew: It sounds like the future is pretty bright for Astro. Are there features that you’ve still not got to or that you plan to add in the future or you’re hoping to add?</p>
<p>Matthew: Yeah. So one big one that we had at the very, very beginning and then we took out for reasons that, more than I can get into, but components in markdown. This is something, if you’ve heard of MDX, people are very passionate about this. They want to be able to use components within their markdown files. MDX is not MDX file, but that’s something that we currently don’t have. It’s something that we know that people are definitely excited about and we’re actually working on it right now. So, that’s something we should have very soon. In Astro, you can already have a .md file as your page, that way you’re writing a blog post, you do it in a markdown file instead of in .astro file. But soon you’ll be able to use .MDC, which when you do that, you’ll be able to write mark down, but you’ll also be able to put components inside of that.</p>
<p>Drew: That sounds like it would be great for things like documentation sites, for example, where you might have loads of documentation in markdown format, because it’s primarily text, but then want to throw in something interactive to help explain a concept or-</p>
<p>Matthew: Examples.</p>
<p>Drew: Examples. Yeah. So things like blogs, things like marketing sites, possibly documentation, those sorts of things are all good to go and a great use for Astro right now?</p>
<p>Matthew: Yeah. If you run npm init astro, it runs our generator and the generator has a bunch of different example starter templates essentially. We have one for blog. We have one for blog with multiple authors. So if you have multiple people working on a blog together. We have a portfolio. Astro is very good for portfolio websites. And then we do have one for docs as well. So all of those things that we’ve been talking about, there’s already starter templates for all of those.</p>
<p>Drew: Where’s the best place right now for somebody to learn more about Astro if they want to get started with it?</p>
<p>Matthew: I think docs.astro.build is probably the best place. Or if you just go to astro.build, there’s also a link to it. But that gives you our getting started documents, documentation. I think we have translations in a dozen languages already. And yeah, then I think there’s lots of links to jump on Discord and start asking questions.</p>
<p>Drew: And that Discord is the best place to go if somebody is a developer and wants to get involved, maybe, implementing a plugin for a different framework that you’ve not covered or maybe even contributing in a more heavyweight way?</p>
<p>Matthew: Oh yeah, we have a channel specifically for people who want to start contributing. That’s definitely a great place. If you’re more comfortable on GitHub, we have lots of people there as well.</p>
<p>Drew: Well, that’s fantastic. Is there anything else we should know about Astro?</p>
<p>Matthew: It’s the best and everyone should start using it.</p>
<p>Drew: Tell us briefly a bit more about Snowpack, because that sounds really interesting. From the perspective of people who might be familiar with some of these older tools like Webpack, what are the key differences with how Snowpack approaches the job?</p>
<p>Matthew: Yeah. I mean, Snowpack comes from more of the perspective, and Vite is another tool that’s very similar to Snowpack. They both do a very similar thing. Where they approach it from, you really wanted to approach it from your loading modules in the browser, the browser has a native way to load modules now, you can do a script type equals module and it can load any module that has import and export statements. However, what most people write in their modules is they import from different packages on MPM and the browser doesn’t have any way to load stuff off of MPM. It doesn’t know about that kind of thing. So what Snowpack does essentially is it does, it does know about, if you import React, it’s going to turn that React import into a URL that the browser can understand. So it’s all it does, is it translate the JavaScript or type script or whatever, the JSX, whatever it is that you write, which is not compatible with the browser and makes it compatible. That’s essentially what they do.</p>
<p>Drew: Sorry. Is that where Skypack then comes in, because it’s loading that React module from Skypack?</p>
<p>Matthew: Yeah. Well, it can. Snowpack Doesn’t do that by default. It does a more traditional local environment. So you’re still going to do your MPM install and do all that sort of thing. There is a way to turn on a Skypack integration. That’s still something that we’re trying to figure out the best way. Like I said, we came at this from the approach of, we wanted to make Skypack better for users, and make it easier to use Skypack. And we fell into Astro because of that. So I think we’re going to probably, at some point, get back to integrating things more tightly, but that would be the ideal, right? I think is that when you, I don’t know, I’m just thinking off the top of my head here, but when you deploy your website, maybe we translate all those React URLs to instead come from Skypack, that way they’re well cached and all that sort of thing.</p>
<p>Drew: Yeah. So-</p>
<p>Matthew: TBD on that.</p>
<p>Drew: I’ve been learning all about Astro. What have you been learning about lately Matthew?</p>
<p>Matthew: Oh, well, I mean I’m always learning lots of stuff. I think lately, the Astro compiler, it was originally, it’s all JavaScript and they’ve been rewriting it in Go. So Go programming language. I’ve used Go before, but it’s been quite a while so I’ve been relearning that as I play around with the new compiler.</p>
<p>Drew: Yeah. There seems to be a trend in all sorts of parts of the ecosystem of JavaScript tools being replaced by Go versions just for the performance.</p>
<p>Matthew: Yeah. Yeah.</p>
<p>Drew: As our projects get bigger and bigger and our build times get longer and longer, everyone’s looking for the next way to speed it up.</p>
<p>Matthew: Yeah. That’s exactly, that was it. I mean, we knew that we needed to rewrite it anyways and we’re like, "Why not just go for the speed boost as well?"</p>
<p>Drew: Yeah. Yeah. If you, dear listener, would like to hear more from Matthew, you can find him on Twitter where he’s @matthewcp or his personal website, which is matthewphillips.info. You can find out how to get started with astro at astro.build. Thanks for joining us today. Matthew. Did you have any parting words?</p>
<p>Matthew: No. Go download Astro and yeah, join Discord and talk to us.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:30;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"GraphQL On The Front-End (React And Apollo)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:67:"https://smashingmagazine.com/2021/11/graphql-frontend-react-apollo/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:67:"https://smashingmagazine.com/2021/11/graphql-frontend-react-apollo/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 04 Nov 2021 11:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:215:"Within the last decade, technologies like GraphQL have changed how we build web apps and how they communicate with each other. GraphQL provides certain benefits over REST APIs &mdash; let’s find out what they are.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:41:"hello@smashingmagazine.com (David Atanda)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:150:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb584488-c16f-4409-a992-993ce92d4b51/graphql-frontend-react-apollo.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:23348:"<p>One of the main benefits of GraphQL is the client’s ability to request what they need from the server and receive that data exactly and predictably. Without much effort, one can easily pull nested data by just adding more properties to our queries instead of adding multiple endpoints. This prevents issues like over-fetching that can impact performance.</p>
<p>Usually, to handle GraphQL on the client-side, we make use of the Apollo Client. It allows developers to define, handle, and make queries/mutations available within our application. It can also act as a state management tool with your client-side application.</p>
<p>In this article, we’re going to learn how to handle real-time updates on the client-side using GraphQL. We’ll be learning how to do this with GraphQL Features like Cache Update, Subscriptions, and Optimistic UI. We’ll also be touching on how to use Apollo as a state-management tool, possibly replacing redux. Plus, we’ll look at how to create usuable GraphQL queries with Fragments, and how to use Apollo directives to write more complex queries.</p>
Installation
<p>Before we begin, let’s just go through installation and setting up our project. Let’s get right into the code. To create a React app, make sure you have Node.js installed on your computer. If you haven’t built a React app before, you can check to see if you have Node.js installed by typing the following into your terminal:</p>
<pre><code>node -v</code></pre>

<p>If not, just go to the Node.js website to <a href="https://nodejs.org/en/download/">download the latest version</a>.</p>
<p>Once that’s done, we can get started with our React app by running this command:</p>
<pre><code>npx create-react-app react-graphql</code></pre>                

<p>Next, let’s navigate into our project folder on the terminal:</p>
<pre><code>cd react-graphql</code></pre>

<p>Once that’s done, we’ll install Apollo using this line:</p>
<pre><code>npm i @apollo/client</code></pre>

<p>Or better still, you could just go on and clone the repo. The repo contains both the client-side and server, so we have some other dependencies that’s needed. We’ll install those dependencies by running:</p>
<pre><code>npm install</code></pre>

<p>Just before we start, this is the <a href="https://github.com/Atanda1/react-graphql">repo</a> containing the code demonstrating everything under Real-time update on GraphQL, using Apollo as a state management tool, Fragments, and Apollo directives. Also, here’s the <a href="https://github.com/Atanda1/subscrpition">repo</a> containing the code demonstrating subscription on the the client-side.  </p>
Real-time Update On GraphQL
<p>The ability to create a real-time update on the client-side helps improve the user experience of the site, making everything seem smoother. Just imagine a situation where a user adds a new item by filling a form, and that item updates instantly by been added to the list of items on the same page. Although, this real-time update could sync with a server directly through subscriptions, or it might be manipulated on the frontend through things like Optimistic UI, or using the <code>update</code> function on the <code>useMutation</code>. So let’s get to the technical implementation. Here’s the <a href="https://github.com/Atanda1/react-graphql">repo</a> containing the code demonstrating everything under Real-time update On Graphql, using Apollo as a state management tool, Fragments, and Apollo directives.</p>
<h3>Updating the cache directly using <code>update</code> function on the <code>useMutation</code></h3>
<p><code>useMutations</code> are imported directly from the <code>@apollo/client</code> library, and it helps us make mutations to the data on our server.</p>
<p>Usually, we can create mutations with Apollo using <code>useMutations</code>, but beyond that, what we’ll be doing is using the <code>update</code> function to update our apollo-client cache directly through <code>useMutation</code>.</p>
<p>In this sample below, we send queries to the server to get a list of pets using <code>useQuery</code> and make a mutation by having a form to add more pets to our server using <code>useMutation</code>. The problem we’ll have is that when a new pet is added to the server, it doesn’t get added to the list of pets(on the browser) immediately, unless the page is refreshed. This makes the user experience of this section of the app feel broken, especially since the list of pets and the form are on the same page.</p>
<pre><code>import React, { useState } from "react";
import gql from "graphql-tag";
import { useQuery, useMutation } from "@apollo/client";
import Loader from "../components/Loader";
import PetSection from "../components/PetSection";

//ALL_PETS uses gql from @apollo/client to allow us send nested queries 
const ALL_PETS = gql`
  query AllPets {
    pets {
      id
      name
      type
      img
    }
  }
`;

// NEW_PET uses gql from @apollo/client to create mutations
const NEW_PET = gql`
  mutation CreateAPet($newPet: NewPetInput!) {
    addedPet(input: $newPet) {
      id
      name
      type
      img
    }
  }
`;
function Pets() {
  const initialCount = 0;
  const [count, setCount] = useState(initialCount);
  const pets = useQuery(ALL_PETS);
  const [createPet, newPet] = useMutation(NEW_PET);
  const [name, setName] = useState("");
  const type = `DOG`;

  const onSubmit = (input) =&gt; {
    createPet({
      variables: { newPet: input },
    });
  };

  // this function triggers the submit action by calling the onSubmit function above it
  const submit = (e) =&gt; {
    e.preventDefault();
    onSubmit({ name, type });
  };

//If the data is loading we display the &lt;Loader/&gt; component instead
  if (pets.loading || newPet.loading) {
    return &lt;Loader /&gt;;
  }

//loops through the pets data in order to get each pet and display them with props using the &lt;PetSection&gt; component
  const petsList = pets.data.pets.map((pet) =&gt; (
    &lt;div className="col-xs-12 col-md-4 col" key={pet.id}&gt;
      &lt;div className="box"&gt;
        &lt;PetSection pet={pet} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  ));

  return (
    &lt;div&gt;
      &lt;form onSubmit={submit}&gt;
        &lt;input
          className="input"
          type="text"
          placeholder="pet name"
          value={name}
          onChange={(e) =&gt; setName(e.target.value)}
          required
        /&gt;
        &lt;button type="submit" name="submit"&gt;
          add pet
        &lt;/button&gt;
      &lt;/form&gt;
      &lt;div&gt;
        {petsList}
      &lt;/div&gt;

    &lt;/div&gt;
  );
}
export default Pets;
</code></pre>

<p>Using <code>update</code> function in the <code>useMutation</code> hook allows us to directly update our cache by reading and writing our <code>ALL_PETS</code>. Immediately we hit the submit button, the data is added to the list of pets in the cache by altering <code>ALL_PETS</code>. This lets us update our client-side cache immediately with consistent data.</p>
<pre><code>import React, { useState } from "react";
import gql from "graphql-tag";
import { useQuery, useMutation } from "@apollo/client";
import Loader from "../components/Loader";
import PetSection from "../components/PetSection";

//ALL_PETS uses gql from @apollo/client to allow us send nested queries 
const ALL_PETS = gql`
  query AllPets {
    pets {
      id
      name
      type
      img
    }
  }
`;

// NEW_PET uses gql from @apollo/client to create mutations
const NEW_PET = gql`
  mutation CreateAPet($newPet: NewPetInput!) {
    addedPet(input: $newPet) {
      id
      name
      type
      img
    }
  }
`;

function ThePets() {
  const initialCount = 0;
  const [count, setCount] = useState(initialCount);
  const pets = useQuery(ALL_PETS);

  //We then make use of useMutation and update() to update our ALL_PET

  const [createPet, newPet] = useMutation(NEW_PET, {
    update(cache, {data: {addedPet}}) {
      const allPets = cache.readQuery({query: ALL_PETS})
      cache.writeQuery({
        query: ALL_PETS,
        data: {pets: [addedPet, ...allPets.pets]}
      })
    }
  });
  const [name, setName] = useState("");
  const type = `DOG`;

  const onSubmit = (input) =&gt; {
    createPet({
      variables: { newPet: input },
    });
  };

  //Handles the submission of Pets that eventually triggers createPet through onSumit

  const submit = (e) =&gt; {
    e.preventDefault();
    onSubmit({ name, type });
  };

  //If the data is loading we display the &lt;Loader/&gt; component instead

  if (pets.loading || newPet.loading) {
    return &lt;Loader /&gt;;
  }

//loops through the pets data in order to get each pet and display them with props using the &lt;PetSection&gt; component

  const petsList = pets.data.pets.map((pet) =&gt; (
    &lt;div className="col-xs-12 col-md-4 col" key={pet.id}&gt;
      &lt;div className="box"&gt;
        &lt;PetSection pet={pet} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  ));
  return (
    &lt;div&gt;
      &lt;form onSubmit={submit}&gt;
        &lt;input
          className="input"
          type="text"
          placeholder="pet name"
          value={name}
          onChange={(e) =&gt; setName(e.target.value)}
          required
        /&gt;
        &lt;button type="submit" name="submit"&gt;
          add pet
        &lt;/button&gt;
      &lt;/form&gt;
      &lt;div&gt;
        {petsList}
      &lt;/div&gt;

    &lt;/div&gt;
  );
}
export default ThePets;
</code></pre>





Subscriptions In GraphQL
<p>Based on functionalities, subscription in GraphQL is similar to queries. The major difference is that while Queries is done just once, subscriptions are connected to the server, and automatically updates when there’s any change to that particular subscription. Here’s the <a href="https://github.com/Atanda1/subscrpition">repo</a> containing the code demonstrating subscription on the the client-side.</p>
<p>First, we have to install:</p>
<pre><code>npm install subscriptions-transport-ws</code></pre>

<p>Then we go to our <code>index.js</code> to import and use it.</p>
<pre><code> import { WebSocketLink } from "@apollo/client/link/ws";

//setting up our web sockets using WebSocketLink
const link = new WebSocketLink({
  uri: `ws://localhost:4000/`,
  options: {
    reconnect: true,
  },
});
const client = new ApolloClient({
  link,
  uri: "http://localhost:4000",
  cache: new InMemoryCache(),
});</code></pre>

<p><strong>Note:</strong> <em><code>uri</code> in the code block directly above is for our endpoint.</em></p>
<p>Then we go into our component and instead of query like we have above, we’ll use this subscription instead:</p>
<pre><code>import {  useMutation, useSubscription } from "@apollo/client";
//initiate our subscription on the client-side
const ALL_PETS = gql`
  subscription AllPets {
    pets {
      id
      name
      type
      img
    }
  }
`;</code></pre>

<p>And instead of using <code>useQuery</code>, we would access our data using <code>useSubscription</code>.</p>
<pre><code> const getMessages = useSubscription(ALL_PETS);</code></pre>

Optimistic UI
<p>Optimistic UI is a little different in the sense that it’s not syncing with the server, like a subscription. When we make a mutation, instead of waiting for another server request, it automatically uses the already inputted data to update the list of pets immediately. Then, once the original data from the server arrives, it will replace the optimistic response. This is also different from “Updating the cache directly using <code>update</code> function on the <code>useMutation</code>”, even though we are still going to update the cache in this process.</p>
<pre><code>import React, { useState } from "react";
import gql from "graphql-tag";
import { useQuery, useMutation } from "@apollo/client";
import Loader from "./Loader";
import PetSection from "./PetSection";

//We use ALL_PET to send our nested queries to the server
const ALL_PETS = gql`
  query AllPets {
    pets {
      id
      name
      type
      img
    }
  }
`;

//We use NEW_PET to handle our mutations
const NEW_PET = gql`
  mutation CreateAPet($newPet: NewPetInput!) {
    addPet(input: $newPet) {
      id
      name
      type
      img
    }
  }
`;

function OptimisticPets() {
//We use useQuery to handle the ALL_PETS response and assign it to pets
  const pets = useQuery(ALL_PETS);
//We use useMutation to handle mutations and updating ALL_PETS.
  const [createPet, newPet] = useMutation(NEW_PET
    , {
    update(cache, {data: {addPet}}) {
      const allPets = cache.readQuery({query: ALL_PETS})
      cache.writeQuery({
        query: ALL_PETS,
        data: {pets: [addPet, ...allPets.pets]}
      })
    }
  });;
  const [name, setName] = useState("");
  const type = `DOG`;
 //Handles mutation and creates the optimistic response
  const onSubmit = (input) =&gt; {
    createPet({
      variables: { newPet: input },
      optimisticResponse: {
        __typename: 'Mutation',
        addPet: {
          __typename: 'Pet',
          id: Math.floor(Math.random() * 1000000) + '',
          type: "CAT",
          name: input.name,
          img: 'https://via.placeholder.com/300',
        }
      }
    });
  };

//Here's our submit triggers the onSubmit function
  const submit = (e) =&gt; {
    e.preventDefault();
    onSubmit({ name, type });
  };
//returns the loading the component when the data is still loading
  if (pets.loading ) {
    return &lt;Loader /&gt;;
  }
//loops through the pets and displays them in the PetSection component 
  const petsList = pets.data.pets.map((pet) =&gt; (
    &lt;div className="col-xs-12 col-md-4 col" key={pet.id}&gt;
      &lt;div className="box"&gt;
        &lt;PetSection pet={pet} /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  ));
  return (
    &lt;div&gt;
      &lt;form onSubmit={submit}&gt;
        &lt;input
          className="input"
          type="text"
          placeholder="pet name"
          value={name}
          onChange={(e) =&gt; setName(e.target.value)}
          required
        /&gt;
        &lt;button type="submit" name="submit"&gt;
          add pet
        &lt;/button&gt;
      &lt;/form&gt;
      &lt;div&gt;
        {petsList}
      &lt;/div&gt;

    &lt;/div&gt;
  );
}
export default OptimisticPets;</code></pre>

<p>When the code above calls <em><code>onSubmit</code></em>, the Apollo Client cache stores an <code>addPet</code> object with the field values specified in <code>optimisticResponse</code>. However, it does not overwrite the main cached <code>pets(ALL_PETS)</code> with the same cache identifier. Instead, it stores a separate, optimistic version of the object. This ensures that our cached data <strong>remains accurate</strong> if our <code>optimisticResponse</code> is wrong.</p>
<p>Apollo Client notifies all active queries that include the modified <code>pets(ALL_PETS)</code>. Those queries automatically update, and their associated components re-render to show our optimistic data. This doesn’t require any network requests, so it displays instantly to the user.</p>
<p>Eventually, our server responds to the mutation’s actual to get the correct <code>addPet</code> object. Then, Apollo Client cache discards our optimistic version of the <code>addPet</code> object. It also overwrites the cached version with values returned from the server.</p>
<p>Apollo Client immediately notifies all affected queries <strong>again</strong>. The concerned components re-render, but if the server’s response matches our <code>optimisticResponse</code>, this is entire process is invisible to the user.</p>
Using Apollo As A State Management Tool On The Client-side
<p>When we think of state management tools or libraries concerning react, redux comes to mind. Interestingly, Apollo can also act as a management tool for our local state. Similar to what we’ve been doing with our API.</p>
<h3>Client-side Schemas And Resolvers</h3>
<p>To achieve this, we’ll have to write schemas on the client-side to define the type of data we want and how we want it to be structured. To do this, we’ll create <code>Client.js</code> where we’ll define the schemas and resolvers, after which, we’ll make it globally accessible in our project with the Apollo client. </p>
<p>For this example, I’ll be extending the <code>User</code> type that exists already to add <code>height</code> as an integer. The resolvers is also added to populate the <code>height</code> field in our schema.</p>
<pre><code>import { ApolloClient } from 'apollo-client'
import { InMemoryCache } from 'apollo-cache-inmemory'
import { ApolloLink } from 'apollo-link'
import { HttpLink } from 'apollo-link-http'
import { setContext } from 'apollo-link-context'
import gql from 'graphql-tag'

//Extending the User type
const typeDefs = gql`
  extend type User {
    height: Int
  }
`

//Declaring our height inside our resolvers within the client-side
const resolvers = {
  User : {
    height() {
      return 35
    }
  }
}
const cache = new InMemoryCache()
const http = new HttpLink({
  uri: 'http://localhost:4000/'
})
const link = ApolloLink.from([
  http
])

const client = new ApolloClient({
  link,
  cache,
  typeDefs,
  resolvers
})
export default client

client.js</code></pre>

<p>We can then import the <code>client</code> into our <code>index.js</code>:</p>
<pre><code>import client from "./client"
import {
  ApolloProvider,
} from "@apollo/client";

//importing our client.js file into ApolloProvider
ReactDOM.render(
  &lt;ApolloProvider client={client}&gt;
    &lt;Routing /&gt;
  &lt;/ApolloProvider&gt;,
  document.getElementById("root")
);

index.js</code></pre>

<p>Within the component, it will use it just like this. We add <code>@client</code> to indicate that the query is from the client-side, and it should not try to pull it from the server.</p>
<pre><code>const ALL_PETS = gql`
  query AllPets {
    pets {
      id
      name
      type
      img
      owner {
        id
        height @client
      }
    }
  }
`;</code></pre>

<p>So we’re pulling data from both the server and the client within the same query, and it’ll be accessible through the <code>useQuery</code> hook.</p>
Fragments-Creating Reusable Queries
<p>Sometimes we might need to pull the same query in different components. So instead of hardcoding it multiple times, we assign that query to some sort of variable, and use that variable instead.</p>
<p>In our component we just define the fragment as <code>PetFields</code> on <code>Pet</code>(which is the Type). That way we can just use it in both our <code>query</code> and <code>mutation</code>.</p>
<pre><code>const DUPLICATE_FIELD = gql`
  fragment PetFields on Pet {
      id
      name
      type
      img
  }
`
const ALL_PETS = gql`
  query AllPets {
    pets {
      ...PetFields
    }
  }
  ${DUPLICATE_FIELD}
`;
const NEW_PET = gql`
  mutation CreateAPet($newPet: NewPetInput!) {
    addPet(input: $newPet) {
        ...PetFields
    }
  }
  ${DUPLICATE_FIELD}
`;</code></pre>

Apollo Directives
<p>When making queries, we might want to have some conditionals that remove or include a field or fragment if a particular condition is fulfilled or not. The default directives include:</p>
<p><code>@skip</code>: Indicates that a field/fragment should be skipped if a condition is fulfilled.</p>
<pre><code>const ALL_PETS = gql`
  query AllPets($name: Boolean!){
    pets {
      id
      name @skip: (if: $name)
      type
      img
    }
  }
`;</code></pre>

<p>Here <code>$name</code> is a boolean that’s added as a variable when we are calling this query. Which is then used with <code>@skip</code> to determine when to display the field <code>name</code>. If true, it skips, and if falses it resolves that field.</p>
<p><code>@includes</code> also work in a similar manner. If the condition is <code>true</code>, that field is resolved and added, and if it’s <code>false</code>, it’s not resolved.</p>
<p>We also have <code>@deprecated</code> that can be used in <code>schemas</code> to retire fields, where you can even add reasons.</p>
<p>We also have <a href="https://github.com/Saeris/graphql-directives">libraries</a> that allow us to add even more directives, they could prove useful when building somewhat complicated stuff with GraphQL.</p>
Tips And Tricks With Using GraphQL Lodash Inside Your Queries
<p><a href="https://github.com/APIs-guru/graphql-lodash">GraphQL Lodash</a> is a library that can help us a query in a more efficient way, more like an advanced form of the Apollo directives.</p>
<p>It can help you query your server in a way that returns data more neatly and compactly. For instance, you’re querying the <code>title</code> of <code>films</code> like this:</p>
<pre><code>films {
  title
}</code></pre>

<p>And it returns the <code>title</code> of movies as objects in an array.</p>
<pre><code>"films": [
    {
      "title" : "Prremier English"
    },
    {
      "title" : "There was a country"
    },
    {
      "title" : "Fast and Furious"
    }
    {
      "title" : "Beauty and the beast"
    }
]</code></pre>

<p>But, when we use lodash’s <code>map</code> directive, when can sort of loop through the films array to have a single array with all the titles as direct children. We would send a query our server that looks like this:</p>
<pre><code>films @_(map: "title") {
  title
}</code></pre>

<p>You’ll get this response which one might consider relatively neater than the previous one.</p>
<pre><code>"films": [  
  "Premier English",
  "There was a country",
  "Fast and Furious",
  "Beauty and the beast"
]</code></pre>

<p>Another one that proves useful is the is <code>keyby</code> directive. You can send a simple query like this:</p>
<pre><code>people {
  name
  age
  gender
}</code></pre>

<p>Response:</p>
<pre><code>"people" : [
  {
    "name":  "James Walker",
    "age": "19",
    "gender": "male"
  },
  {
    "name":  "Alexa Walker",
    "age": "19",
    "gender": "female"
  }, 
]</code></pre>

<p>Let’s use <code>@_keyup</code> directive in our query:</p>
<pre><code>people @_(keyBy: "name") {
  name
  age
  gender
}</code></pre>

<p>The response will look just like this:</p>
<pre><code>"people" : [
  "James Walker" : {
     "name":  "James Walker",
     "age": "19",
     "gender": "male"    
  }
  "Alexa Walker" : {
     "name":  "Alexa Walker",
     "age": "19",
     "gender": "female"
  }
]</code></pre>

<p>So in this case each response has a key, that’s the <code>name</code> of the person.</p>
Conclusion
<p>In this article, we covered advanced topics to achieve real-time update of data using the <code>update()</code> function, subscription, and Optimistic UI. All in a bit to improve user experience. </p>
<p>We also touched upon using GraphQL to manage state on the client-side, and creating resuable queries with GrahQL fragments. The latter allows us to use the same queries in different components where it’s needed without having to repeat the entire thing every time. </p>
<p>In the end, we went through Apollo directives and Grahql Lodash to help us query our servers in a faster and better way. You can also check out <a href="https://frontendmasters.com/courses/client-graphql-react/">Scott Moss’s tutorial</a> if you’re looking to cover Graphql and react from scratch.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:31;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:46:"A Deep Dive Into Serverless UI With TypeScript";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:77:"https://smashingmagazine.com/2021/11/deep-dive-into-serverless-ui-typescript/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:77:"https://smashingmagazine.com/2021/11/deep-dive-into-serverless-ui-typescript/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 03 Nov 2021 11:30:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:305:"Serverless UI is simply a free, open-source command-line utility for quickly building and deploying serverless applications on the AWS platform. In this article, we will learn and cover everything needed on using Serverless UI to deploy our projects or serverless applications to cloud services providers.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Ikeh Akinyemi)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:160:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aff46dfe-164d-4bf7-8e14-057470001b41/deep-dive-into-serverless-ui-typescript.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:27387:"<p>If you’ve been looking for a clear explanation of how applications can be developed and deployed to AWS with less configuration as possible, then I’ve prepared just the article for you. We’ll be breaking it all down into two parts: deploying a static web application (in this case a Notes application), and then a serverless web application to CloudFront using the Serverless UI library.</p>
<p><strong>Note</strong>: <em>To follow along, you’ll need a basic understanding of AWS and web development in order to understand how the TypeScript project is built and used to deploy to AWS.</em></p>
Requirements
<p>Before starting to build our project, the following requirements need to be met:</p>
<ul>
<li>Basic knowledge of React, React Hooks, and Material UI;</li>
<li>Good knowledge of TypeScript;</li>
<li>Node.js version &gt;= <code>12.x.x</code> installed on your local machine;</li>
<li>Have an AWS verified account;</li>
<li>Configured your AWS CLI with local credentials;</li>
<li>Ensure that <code>npm</code> or <code>yarn</code> is also installed as the package manager.</li>
</ul>
Introduction
<p>We’ll start with a few introductions on Serverless UI, but at the end of this tutorial, you should be able to comfortably use Serverless UI in your applications — from installing to understanding the concepts and implementing it in your very own projects. According to the <a href="https://github.com/JakePartusch/serverlessui">docs</a> on GitHub:</p>
<blockquote>“Serverless UI is simply a free, open-source command-line utility for quickly building and deploying serverless applications on the AWS platform.”</blockquote>

<p>As stated, it’s a lightweight library that’s quickly installed over the terminal, and can be used to set up configure-domain, deploy static or serverless websites — all done on the terminal. This permits you to easily couple any choice of front-end framework with Serverless UI to deploy existing and new applications to AWS stress-free.</p>
<p>Serverless UI also works great with any static website, and websites that use serverless functions to handle requests to some sort of API. This makes it great for building serverless back-end applications. The deploy process through Serverless UI gives you the control to automatically deploy each part or in better words, iteration of your application with a different and separate URL. Though, this means you get to monitor the continuous integration and testing of your application with confidence in real-time. </p>
<p>Using Serverless UI in production, you can choose to have your project or serverless functions written in native JavaScript or TypeScript. Either way, they’ll be bundled down extremely quickly and your functions deployed as Node.js 14 Lambda functions. Your functions within the <code>./functions</code> folder are deployed automatically as serverless functions on AWS. This approach means that we’ll be writing our code in the form of functions that will handle different tasks or requests within the application. So when we deploy our functions, we’ll invoke them in the format of an event. </p>
<p>Then the need for a fast and very small application file size makes the Serverless UI be of good essence within our application. Being a command-line tool, it doesn’t need to be bundled inside the application — it can be installed globally, <code>npm install -g @serverlessui/cli</code> or as a <code>devDependency</code> within our application. This means no file size was added to our application, giving us the benefit of having only the code needed for our application to function. No extra added bundle size to our application. As with any migration, we developers know that migrating existing applications can be tough and troubling without downtime for our users, but it is doable depending on the use case.</p>
Pros And Cons Of Using Serverless UI
<p>Using Serverless UI within our projects, whether existing or new project has some <strong>benefits</strong> that it gives us:</p>
<ul>
<li>There are no middleman services unlike others; Serverless UI gives you out-of-the-box benefits of a pre-configured infrastructure without having to go through a middleman.</li>
<li>It supports and works in almost any CI (<strong>Continuous Integration</strong>) environment owing that it’s a command-line tool readily available via npm. This is a plus for the backend and infrastructure setup.</li>
<li>For already existing serverless applications or those that may have additional CloudFormation and/or CDK infrastructure, there is a full provision of CDK constructs for each of the CLI actions.</li>
<li>Serverless UI provides almost any option during deploying your application — deploy your static website, Lambda functions or production code.</li>
<li>Almost all configurations (such as <code>configure-domain</code> and deploying applications) are all done on the command line.</li>
<li>Front-end frameworks like React, Svelte, Vue, or JQuery are all supported, as long as it compiles down to static code.</li>
<li>Gives serverless applications the ability to scale dynamically per request, and won’t require any capacity planning or provisioning for the application.</li>
</ul>
<p>These are some <strong>downsides of Serverless UI</strong> that we should consider before deciding to use it within our projects:</p>
<ul>
<li>There is only support for projects built using TypeScript or JavaScript within the project.</li>
<li>Within recent time, the library core infrastructure is written with <code>aws-cdk</code>, which means the only platform our applications could be deployed to is AWS.</li>
</ul>
<p><strong>Recommended Reading</strong>: <a href="https://www.smashingmagazine.com/2021/10/local-testing-serverless-api-gateway-lambda/"><em>Local Testing A Serverless API (API Gateway And Lambda)</em></a></p>
Setting Up The Notes Application
<p>Nowadays, several tools are available for developers to efficiently manage infrastructures, for example, the <strong>Serverless UI</strong>, the console, or one of the frameworks available online. As explained above, our goal is to set up a simple demo of a Notes application in TypeScript, which will quickly help us to demonstrate how Serverless UI could be used in hosting it, so you can quickly grasp and implement it within your own projects.</p>
<p>For this tutorial, we’ll quickly explore and explain the different parts of a Notes application, then install <strong>Serverless UI</strong> library to host the application on AWS. </p>
<p>We proceed to clone the remote repository on our local machine and run the command that will install all the dependencies.</p>
<pre><code>git clone https://github.com/smashingmagazine/serverless-UI-typescript.git

yarn install</code></pre>

<p>The above command clones a Note application that has the functional components built already, and then goes ahead to install the dependencies that are needed for the components to function. Here’s the list of the dependencies that are required for this Notes application to function:</p>
<pre><code>{
  ...
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "@types/jest": "^26.0.15",
    "@types/node": "^12.0.0",
    "@types/react": "^17.0.0",
    "@types/react-dom": "^17.0.0",
    "react": "^17.0.1",
    "react-dom": "^17.0.1",
    "react-scripts": "4.0.3",
    "typescript": "^4.1.2",
    "web-vitals": "^1.0.1"
  },
  ...
}
</code></pre>

<p>The above list contains dependencies and their type definitions to work optimally with TypeScript. We proceed to explain the working parts of the application. But let’s first define interfaces for the Note data and the Props argument that will be passed down into our functions. Create a <code>/src/interfaces.ts</code> file and include the following:</p>
<pre><code>export interface INote {
  note: string;
}
export interface Props {
  content: INote;
  delContent(noteToDelete: string): void;
}</code></pre>

<p>Here we’re defining the type structure that acts as a syntax contract between our components and the props passed within them. Also defines the unit data of our application state, <code>INote</code>.</p>
<p>For this application, we’ll focus mainly on the <code>/src/components</code> folder and the <code>/src/App.tsx</code> file. We’ll start from the <code>components</code> folder then gradually explain the rest of the application.</p>
<p><strong>Note:</strong> <em>The styles defined and used throughout this Notes application can be found in the <code>/src/App.css</code> file.</em></p>
<p>The <code>components</code> folder contains one file, the <code>Note.tsx</code> file; which will define the UI structure of each Note data we create. </p>
<pre><code>import { INote } from "../Interfaces";

interface Props {
  content: INote;
  delContent(noteToDelete: number): void;
}

const Note = ({ content, delContent }: Props) =&gt; {
  return (
    &lt;div className="note"&gt;
      &lt;div className="content"&gt;
        &lt;span&gt;{content.note}&lt;/span&gt;
      &lt;/div&gt;
      &lt;button
        onClick={() =&gt; {
          delContent(content.id);
        }}
      &gt;
        X
      &lt;/button&gt;
    &lt;/div&gt;
  );
};
export default Note;
</code></pre>

<p>Within the <code>Note</code> function, we’re destructuring a props parameter that has the data type definition of <code>Props</code>, and contains the <code>content</code> and <code>delContent</code> fields. The <code>content</code> field further contains the <code>note</code> field whose value will be the input value of our users. While the <code>delContent</code> field is a function to delete <code>content</code> from the application. </p>
<p>We’ll proceed to build the general UI of the application, defining its two sections; one for creating the notes and the other to contain the list of notes already created:</p>
<pre><code>const App: FC = () =&gt; {
  return (
    &lt;div className="App"&gt;
      &lt;div className="header"&gt;
      &lt;/div&gt;

      &lt;div className="noteList"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
export default App;</code></pre>

<p>The <code>div</code> tag with the <strong>header</strong> class contains the input and the button elements for creating and adding notes to the application:</p>
<pre><code>const App: FC = () =&gt; {
  return (
    &lt;div className="App"&gt;
      &lt;div className="header"&gt;
        &lt;div className="inputContainer"&gt;
          &lt;input
            type="text"
            placeholder="Add Note..."
            name="note"
            value={noteContent}
            onChange={handleChange}
          /&gt;
        &lt;/div&gt;
        &lt;button onClick={addNote}&gt;Add Note&lt;/button&gt;
      &lt;/div&gt;

      ...
    &lt;/div&gt;
  );
};
export default App;</code></pre>

<p>In the above code we recorded a new state, <code>noteContent</code>, for the <code>input</code> element’s value. Also an <code>onChange</code> event to update the <strong>input</strong> value. The <code>button</code> element has <code>onClick</code> event that will handle generating new content from the input’s value and adding it to the application. The above UI markup coupled with the already defined styles will look like:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/37b7b12a-581c-49ef-8ca3-00b55baaa71e/2-deep-dive-into-severless-ui-typescript.png" /></p>
<p>Now let’s define the new states, <code>noteContent</code> and <code>noteList</code>, then the two events, <code>handleChange</code> and <code>addNote</code> functions to update our application functionalities:</p>
<pre><code>import { FC, ChangeEvent, useState } from "react";
import "./App.css";
import { INote } from "./Interfaces";

const App: FC = () =&gt; {
  const [noteContent, setNoteContent] = useState&lt;string&gt;("");
  const [noteList, setNoteList] = useState&lt;INote[]&gt;([]);

  const handleChange = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
      setNoteContent(event.target.value.trim());
  };

  const addNote = (): void =&gt; {
    const newContent = { Date.now(), note: noteContent };
    setNoteList([...noteList, newContent]);
    setNoteContent("");
  };

  return (
    &lt;div className="App"&gt;
      &lt;div className="header"&gt;
        &lt;div className="inputContainer"&gt;
          &lt;input
            type="text"
            placeholder="Add Note..."
            name="note"
            value={noteContent}
            onChange={handleChange}
          /&gt;
        &lt;/div&gt;
        &lt;button onClick={addNote}&gt;Add Note&lt;/button&gt;
      &lt;/div&gt;

      ...
    &lt;/div&gt;
  );
};
export default App;
</code></pre>

<p>The <code>noteList</code> state contains all the notes created within the application. We add and remove from it to update the UI with more notes created. Within the <code>handleChange</code> function, we’re regularly updating <code>noteContent</code> with the changes made to the input field using the <code>setNoteContent</code> function. The <code>addNote</code> function creates a <code>newContent</code> object with a <code>note</code> field whose value is gotten from <code>noteContent</code>. It then calls the <code>setNoteList</code> functions and creates a new <code>noteList</code> array from its previous state and <code>newContent</code>.</p>
<p>Next is to update the second section of the <code>App</code> function with the JSX code to contain the list of notes created:</p>
<div>
<pre><code>...

import Note from "./Components/Note";

const App: FC = () =&gt; {
  ...

  return (
    &lt;div className="App"&gt;
      &lt;div className="header"&gt;
        ...
      &lt;/div&gt;

      &lt;div className="noteList"&gt;
        {noteList.map((content: INote) =&gt; {
          return &lt;Note key={content.id} content={content} delContent={delContent} /&gt;;
        })}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
</div>

<p>We’re looping through the <code>noteList</code> using the <code>Array.prototype.map</code> method to create the dump of notes within our application. Then we imported the <code>Note</code> component which defines the UI of our note, passing the <code>key</code>, <code>content</code> and <code>delContent</code> props into it. The <code>delContent</code> function as discussed earlier deletes <code>content</code> from the application:</p>
<div>
<pre><code>...
import Note from "./Components/Note";

const App: FC = () =&gt; {
  ...
  const [noteList, setNoteList] = useState&lt;INote[]&gt;([]);

  ...

  const delContent = (noteID: number) =&gt; {
    setNoteList(
      noteList.filter((content) =&gt; {
        return content.id !== noteID;
      })
    );
  };
  return (
    &lt;div className="App"&gt;
      &lt;div className="header"&gt;
        ...
      &lt;/div&gt;

      &lt;div className="noteList"&gt;
        {noteList.map((content: INote) =&gt; {
          return &lt;Note key={content.id} content={content} delContent={delContent} /&gt;;
        })}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
export default App;</code></pre>
</div>

<p>The <code>delContent</code> function filters out of <code>noteList</code> the <code>content</code>s that are not in any way equivalent to the <code>noteToDelete</code> argument. The <code>noteToDelete</code> is equivalent to <code>content.note</code> but gets passed down to <code>delContent</code> whenever a note is created by calling the <code>Note</code> component.</p>
<p>Coupling the two sections of the <code>App</code> component together, your code should look like the below:</p>
<div>
<pre><code>import { FC, ChangeEvent, useState } from "react";
import "./App.css";
import Note from "./Components/Note";
import { INote } from "./Interfaces";

const App: FC = () =&gt; {
  const [noteContent, setNoteContent] = useState&lt;string&gt;("");
  const [noteList, setNoteList] = useState&lt;INote[]&gt;([]);

  const handleChange = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
      setNoteContent(event.target.value.trim());
  };

  const addNote = (): void =&gt; {
    const newContent = { id: Date.now(), note: noteContent };
    setNoteList([...noteList, newContent]);
    setNoteContent("");
  };

  const delContent = (noteID: number): void =&gt; {
    setNoteList(
      noteList.filter((content) =&gt; {
        return content.id !== noteID;
      })
    );
  };

  return (
    &lt;div className="App"&gt;
      &lt;div className="header"&gt;
        &lt;div className="inputContainer"&gt;
          &lt;input
            type="text"
            placeholder="Add Note..."
            name="note"
            value={noteContent}
            onChange={handleChange}
          /&gt;
        &lt;/div&gt;
        &lt;button onClick={addNote}&gt;Add Note&lt;/button&gt;
      &lt;/div&gt;

      &lt;div className="noteList"&gt;
        {noteList.map((content: INote) =&gt; {
          return &lt;Note key={content.id} content={content} delContent={delContent} /&gt;;
        })}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
export default App;
</code></pre>
</div>

<p>And if we go ahead and add a few notes to our application, then our final UI will look like this:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b09655bb-b586-4a73-8e69-069a57b90ebb/3-deep-dive-into-severless-ui-typescript.png" /></p>
<p>Now we have created a simple Notes application that we can add and delete Notes, let’s move on to using Serverless UI to deploy this application to AWS and as well deploy a serverless back-end application (serverless functions).</p>
<h3>Deploying Notes Application With Serverless UI</h3>
<p>Now we’re done explaining the components that make up our Notes application, it’s time to deploy our application using <strong>Serverless UI</strong> on the terminal. The first step in deploying our application to AWS is to configure the AWS CLI on our machine. Check <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">here</a> for comprehensive steps to take.</p>
<p>Next is to install the <strong>Serverless UI library</strong> globally on our local machine:</p>
<pre><code>npm install -g @serverlessui/cli</code></pre>

<p>This installs the package globally, meaning no extra file size was added within the build code.</p>
<p>Next is to make a <code>build</code> folder of the project, this is the folder we’ll reference within our terminal:</p>
<pre><code>sui deploy --dir="build"
...
❯ Website Url: https://xxxxx.cloudfront.net</code></pre>

<p>But for our project, we’ll run the <code>yarn</code> command that builds our application into a static website within the <code>build</code> folder, after which we run the <strong>Serverless UI</strong> command to deploy the application:</p>
<div>
<pre><code>yarn build 
...
Done in 80.63s.

sui deploy --dir="build"
...

✅  ServerlessUIAppPreview1c9ec9f1

Outputs:
ServerlessUIAppPreview1c9ec9f1.ServerlessUIBaseUrlCA2DC891 = <a href="https://dal254gl37fow.cloudfront.net">https://dal254gl37fow.cloudfront.net</a>

Stack ARN:
arn:aws:cloudformation:us-west-2:261955174750:stack/ServerlessUIAppPreview1c9ec9f1/e4dc82e0-fe44-11eb-b959-064619847e85
</code></pre>
</div>

<p>Our application was successfully deployed, and the total time it took to deploy was less than five minutes. The application was deployed to Cloudfront <a href="https://dal254gl37fow.cloudfront.net">here</a>.</p>
Deploying Serverless Functions With Serverless UI
<p>Here, we’ll focus on deploying Lambda functions written in our local environment, other than on the IDE provided on the AWS web platform. With Serverless UI, we’ll remove the hassle of doing a lot of configuration and set up before deploying it on AWS.</p>
<p>You’ll also want to ensure your local environment is as close to the production environment as possible. This includes the runtime, Node.js version. As a reminder, you need to install a version of Node.js supported by AWS Lambda.</p>
<p>The code or the <code>/serverless</code> folder used within this part of the article can be found <a href="https://github.com/smashingmagazine/serverless-UI-typescript/tree/main/serverless">here</a>. This folder contains the source file, that makes a request to an API to get a random note; a joke.</p>
<pre><code>const nodefetch = require("node-fetch");

exports.handler = async (event, context) =&gt; {
  const url = "https://icanhazdadjoke.com/";
  try {
    const jokeStream = await nodefetch(url, {
      headers: {
        Accept: "application/json"
      }
    });
    const jsonJoke = await jokeStream.json();
    return {
      statusCode: 200,
      body: JSON.stringify(jsonJoke)
    };
  } catch (err) {
    return { statusCode: 422, body: err.stack };
  }
};</code></pre>

<p>Before we deploy the <code>serverless</code> folder, we’ll need to install <code>esbuild</code> library. This will help make bundling of the application files more fast and accessible.</p>
<pre><code>npm install esbuild --save-dev</code></pre>

<p>The next step to deploy the serverless function on AWS is by specifying the folder location with the <code>--functions</code> flag as we previously did with the <code>--dist</code> flag when deploying our static website.</p>
<pre><code>sui deploy --functions="serverless"</code></pre>

<p>While the above command helps us build our application, the serverless function successfully deploys it:</p>
<div>
<pre><code>...

✅  ServerlessUIAppPreview560dbd41

Outputs:
ServerlessUIAppPreview560dbd41.ServerlessUIFunctionPathjokesD9F032B9 = <a href="https://dwh6k64yrlqcn.cloudfront.net/api/jokes">https://dwh6k64yrlqcn.cloudfront.net/api/jokes</a>

Stack ARN:
arn:aws:cloudformation:us-west-2:261955174750:stack/ServerlessUIAppPreview560dbd41/21de6780-fb93-11eb-a0fb-061a2a83f0b9</code></pre>
</div>

<ul>
<li><em>The serverless function is now deployed to Cloudfront <a href="https://dwh6k64yrlqcn.cloudfront.net/api/jokes">here</a>.</em></li>
</ul>
<p>As a side note, we should be able to reference our API URL by relative path in our UI code like <code>/api/jokes</code> instead of the full URL if deployed at the same time with the <code>/dist</code> or <code>/build</code> folder. This should always work — even with CORS — since the UI and API are on the same domain.</p>
<p>But by default, Serverless Ui will create a new stack for every preview deployed, which means each URL will be different and unique. In order to deploy to the same URL multiple times, the <code>--prod</code> flag needs to be passed. </p>
<pre><code>sui deploy --prod --dir="dist" --functions="serverless"</code></pre>

<p>Let’s create a <code>/src/components/Quote</code> folder and inside it create an <code>index.tsx</code> file. This contains the JSX code to house the quotes.</p>
<pre><code>import { useState } from "react";

const Quote = () =&gt; {
  const [joke, setJoke] = useState&lt;string&gt;();
  return (
    &lt;div className="container"&gt;
      &lt;p className="fade-in"&gt;{joke}&lt;/p&gt;
    &lt;/div&gt;
  );
};
export default Quote;</code></pre>

<p>Next, we will make a request to the deployed serverless functions to retrieve a joke from it within a set interval of time. This way the note, i.e the joke, within the <code>&lt;p className="fade-in"&gt;{joke}&lt;/p&gt;</code> JSX markup gets updated every 2000 milliseconds.</p>
<div>
<pre><code>import { useEffect, useState } from "react";

const Quote = () =&gt; {
  const [joke, setJoke] = useState&lt;string&gt;();

  useEffect(() =&gt; {
    const getRandomJokeEveryTwoSeconds = setInterval(async () =&gt; {
      const url = process.env.API_LINK || "<a href="https://dwh6k64yrlqcn.cloudfront.net/api/jokes&quot;">https://dwh6k64yrlqcn.cloudfront.net/api/jokes"</a>;
      const jokeStream = await fetch(url);
      const res = await jokeStream.json();
      const joke = res.joke;
      setJoke(joke);
    }, 2000);
    return () =&gt; {
      clearInterval(getRandomJokeEveryTwoSeconds);
    };
  }, []);

  return (
    &lt;div className="container"&gt;
      &lt;p className="fade-in"&gt;{joke}&lt;/p&gt;
    &lt;/div&gt;
  );
};
export default Quote;</code></pre>
</div>

<p>The code snippet added to the above source code will use <code>useEffect</code> hook to make API calls to the serverless functions, updating the UI with the jokes returned from the request by using the <code>setJoke</code> function provided from the <code>useState</code> hook.</p>
<p>Let’s restart our local development server to see the new changes added to our UI:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/606e8d06-6c97-4e3f-9caf-60d771648df1/1-deep-dive-into-severless-ui-typescript.png" /></p>
<p>Before deploying the updates to your existing application, you can set up a custom domain, and using Serverless UI deploy and push subsequent code updates to this custom domain.</p>
Configure Domain With Serverless UI
<p>We can deploy our serverless application to our custom domain rather than the default one provided by CloudFront. Configuring and deploying to our custom domain may take 20 – 48 hours to fully propagate but only needs to be completed once. Navigate into your project directory and run the command:</p>
<pre><code>sui configure-domain --domain="&lt;custom-domain.com&gt;"</code></pre>

<p>Replace the above value of the <code>--domain</code> flag with your own custom URL. Then you can continuously update the already deployed project by adding the <code>--prod</code> flag when using the <code>sui deploy</code> command again.</p>
<p><strong>Recommended Reading</strong>: <a href="https://www.smashingmagazine.com/2018/05/building-serverless-contact-form-static-website/"><em>Building A Serverless Contact Form For Your Static Site</em></a></p>
Conclusion
<p>In this article, we introduced Serverless UI by discussing different merits that make it a good fit for deploying your application with it. Also, we created a demo of a simple Notes application and deployed it with the library. You can further build back-end serverless functions that are triggered by events happening with the application, and deploy them to your AWS lambda.</p>
<p>For the advanced use case of Serverless UI, we configured the default domain provided by CloudFront with our own custom domain name using <strong>Serverless UI.</strong> And for existing serverless projects or those that may have additional CloudFormation and/or CDK infrastructure, Serverless UI provides CDK constructs for each of the CLI actions. And with Serverless UI, we can easily configure a private S3 bucket — an extra desired feature for enhanced security on our serverless applications. Click <a href="https://github.com/JakePartusch/serverlessui#configure-domain">here</a> to read up more on it.</p>
<ul>
<li><em>The code used within this article can be found on <a href="https://github.com/smashingmagazine/serverless-UI-typescript">Github</a>.</em></li>
</ul>
<h3>Resources</h3>
<ul>
<li><a href="https://github.com/JakePartusch/serverlessui">Serverless UI Official documentation</a></li>
<li><a href="https://github.com/JakePartusch/serverlessui">Setting up AWS CLI</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:32;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:66:"Creating A Magento PWA: Customizing Themes vs. Coding From Scratch";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:75:"https://smashingmagazine.com/2021/11/magento-pwa-customizing-themes-coding/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:75:"https://smashingmagazine.com/2021/11/magento-pwa-customizing-themes-coding/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 02 Nov 2021 12:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:299:"This article sheds the spotlight on Magento PWAs and explains why business owners are getting them (often instead of native applications). Alex Husar introduces ways of how progressive web applications can be developed on Magento, as well as go over the major pros and cons of each development path.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:39:"hello@smashingmagazine.com (Alex Husar)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:158:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77155632-96bd-44a8-af99-50ebad7534e6/magento-pwa-customizing-themes-coding.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:39226:"<p>When dealing with e-commerce at some point, you probably have heard, and perhaps used Magento, an open-source e-commerce platform. However, what if you want to build a progressive web app with Magento? Is it a good idea, why would you want to build it, and how would you go around building it?</p>
Why Do Business Owners Opt For Magento PWAs In The 2020s?
<p>PWAs have been around for over five years, yet native applications outnumber them both in the quantity ratio and how many times users download them.</p>
<p>But here are some recent PWA-related findings by <a href="https://firt.dev/pwa-2021">Maximiliano Firtman</a> regarding Chrome:</p>
<ul>
<li>The number of origins with PWAs grew 170% in 2020.</li>
<li>Furthermore, the same resource states that during the last year, the use of Service Workers has also expanded by 38%.</li>
<li>However, at the end of 2020, about 1% of websites included a Service Worker, and 2.2% had an installable Web App Manifest file.</li>
</ul>
<h3>What Does This Mean?</h3>
<p>Progressive web applications haven’t pushed out native apps to the extent that was expected yet. But many, including <a href="https://www.gartner.com/en/documents/3906717/how-progressive-web-apps-improve-digital-commerce-experi">Gartner</a>, believe that PWAs are the future of mobile sales that’ll overtake the market in the 2020s:</p>
<blockquote>“Progressive web apps are a cost- and a skills-effective way to reach a wide audience with a close-to-native app experience that supports the full customer life cycle. Application leaders for digital commerce technologies must plan for PWAs when designing digital commerce experiences”.</blockquote>

<p>Numerous big players have considered such an opinion and have recently implemented this technology. Some of the names include Amazon’s Luna, TikTok, Tinder, among many online retailers.</p>
<p>As a matter of fact, progressive web applications have already brought conversion benefits to a significant number of brands. Dozens of companies that have launched PWAs reached impressive results, showing the profitability of such a decision. Let’s look at some numbers:</p>
<ul>
<li>Since the launch of their PWA, <a href="https://www.thinkwithgoogle.com/intl/en-154/marketing-strategies/app-and-mobile/trivago-embrace-progressive-web-apps-as-the-future-of-mobile/">Trivago</a> enhanced engagement, saw more than a 97% increase in click-outs to hotel offers, and evidently boosted its conversion.</li>
<li>Based on the data provided by <a href="https://go.divante.com/top-30-progressive-web-apps">divante</a>’s findings on 30 PWA case studies, progressive web apps have a 36% larger mobile conversion rate than native applications.</li>
</ul>
<p><em>“But these are mostly big players,”</em> you might think. <em>“Would small or middle-sized companies get any tangible return on investment from PWAs?”</em> Yes, they will.</p>
<ul>
<li>For instance, <a href="https://www.pwastats.com/tags/conversions">Magento PWA statistics</a> suggest that the Butcher of Blue online store experienced a 169% increase in conversions after their progressive web app launch. The Rooted Objects brand saw 162% conversion growth, what a tangible boost!</li>
<li>Moreover, Garten-und-Freizeit, a German e-commerce store that sells furniture, saw an amazing improvement in their metrics after getting a PWA. They achieved an almost <a href="https://www.vuestorefront.io/case-studies/garten-und-freizeit">40% bounce rate decrease and over 350% additional active users</a> on their VueJS-based Magento progressive web app.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/126e9642-1fe9-4d7b-b4fa-9ebb32064b66/6-creating-magento-pwa-customizing-themes-coding.png" /></p>
5 Major Benefits Of Magento PWAs
<p>There are several advantages of choosing in favor of progressive web applications, especially if we’re talking about massive Magento e-commerce stores. Below are some main things to consider.</p>
<h3>1. Cost-Efficient And Effort-Saving Development</h3>
<p>Perhaps these two points are worth mentioning first of all. Building a PWA is cheaper than a native application.</p>
<p>One of the reasons for that is because a PWA has the same code base. So unlike the case with native applications, the progressive web app needs to be coded only once. I.e., you don’t have to create code to fit the separate Android and iOS requirements.</p>
<p>This also implies that you don’t have to spend additional time and money on creating a PWA to suit various devices, greatly speeding up time-to-market. Why is that? Read point 2.</p>
<h3>2. PWAs Work In Browsers</h3>
<p>Unlike their native application “antecedents”, progressive web apps are <strong>launched in browsers</strong>. There are several things to bring up due to this.</p>
<h4>Findable Pages</h4>
<p>As PWAs work in browsers, they have web pages with URLs that work just like any other website (be it launched on a desktop or mobile device).</p>
<p>Following from the above, an undeniable strength of PWAs, when compared to native applications, is that their <strong>pages are findable via search engines</strong>. The pages can be crawled, indexed, and ranked, as it happens with regular websites. This is good news for an e-commerce store’s SEO (since if appropriately optimized, the pages can “grow” organically).</p>
<p>To compare, native applications installed on devices from app markets can’t boast having the same. For instance, the product pages of an e-commerce store’s native app don’t come in sight of search engines. Hence, they can’t be promoted separately or found by users who’ve input a search query in Google. You need a site for that.</p>
<p>Below is an example of the Netatmo PWA. As shown on the screenshots below, the product page of the store can be found via Google. That wouldn’t be the case if they opted for a native application.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d9092dba-074e-4043-8ad5-e1ab357d708b/3-creating-magento-pwa-customizing-themes-coding.png" /></p>
<h4>Installing A PWA To The Device Isn’t Obligatory</h4>
<p>Here’s one more point worth noting. <strong>PWAs don’t require installation from the App Store or Google Play</strong> to the device to be used (like native apps do).</p>
<p>Again, PWAs are sites that run in browsers. Users who opened a PWA from a smartphone’s browser might even not be aware that they’re using a progressive web app, assuming that it’s just a well-performing site.</p>
<p>But for the convenience of shoppers, PWAs can be easily added to the home screen of the device. Such shortcuts look like any other native app icon, but their weight is unnoticeable to a user. On the contrary, a native application of an e-commerce store can come at 30, 50, or even 100 MB and up, consuming internal device storage. </p>
<p>Check out how the “Add to Home Screen” feature works on the example below taken on the Apivita Magento PWA.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/125c1336-5392-46bf-a41d-9b992b152c24/12-creating-magento-pwa-customizing-themes-coding.png" /></p>
<p>You might ask: <em>“But do people install PWA apps at all? And how many do so?”</em></p>
<p>Here’s the thing, most mobile users who have opened a PWA in their browser might not realize they’re using a progressive web app. Just look at the screenshots that we’ve shown. At first glance, they all look like well-brushed-up mobile versions of sites. You probably won’t be able to tell whether it’s a PWA or not. But who cares? Well-executed PWA sites are a blast to use. </p>
<p>The bottom line here is that these sites help to convert. So the question should be <em>“Does it matter how many people install PWAs?”</em> The answer is <em>“Probably not”</em>. This isn’t the case like with native applications whose success is at times predefined by the number of downloads.</p>
<p>In fact, according to <a href="https://www.thinkwithgoogle.com/marketing-strategies/app-and-mobile/shopping-app-usage-statistics">Google statistics</a>:</p>
<blockquote>“Half of the users who are shopping via their smartphones are likely to access a shop’s mobile site because they aren’t willing to download the application from the marketplace.”</blockquote>

<p>This is especially true for those who want to make one-time purchases. Therefore, we can conclude that it is reasonable to raise your store’s game by optimizing it for m-commerce. This primarily regards its UX\UI and speed, so a progressive web app can be a solution to consider.</p>
<h3>3. The Design Gives Ground For Utmost Usability</h3>
<p>Speaking of UX\UI, just like their native app “ancestors”, progressive web applications emphasize <strong>enhanced usability</strong>. Navigation, elements placement, and the overall “look” of PWAs are very familiar to regular downloadable applications. But this “look” is now available in browsers.</p>
<p>Because the focus is put on mobile-first, customers become happier with their browsing experience, increasing the store’s conversions.</p>
<p>Alibaba is one of the e-commerce giants that have “run the gamut” from a regular online retail store to a native application (created for mobile shopping purposes) and then on to a PWA. Although their native app was in great demand by clients, they decided to get a progressive web application to provide flawless UX for those who use the browser to shop on their site. As a result, they’ve tailored to the needs of their acquired clients (who habitually use the native app regularly) and made shopping easy for those customers who have accessed their site from a browser.</p>
<p>Let’s compare the look of Alibaba’s PWA and native app. I’ve used and added both to my iPhone to check out how they differ. The icons look the same on the home screen. Yet, the native application weighs 183.4 MB. So, I personally prefer to use the browser version.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/27a72ff4-3653-488c-b5b2-a79a641bc576/5-creating-magento-pwa-customizing-themes-coding.png" /></p>
<p>Curiously, the native application seems to be more prioritized by the company. When you access the store from a browser, you are offered to go to the app market to download the native application.</p>
<p>In any case, the PWA has a neat design that reminds the style of a native application. We see that many elements that are important to the user are shown above the fold, space is used rationally, there’s a bottom menu bar that’s easy to reach by thumb, among other convenient design choices.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/afbb6c16-9405-4701-9aba-b8f3963ff8f4/9-creating-magento-pwa-customizing-themes-coding.png" /></p>
<p>The native application of Alibaba differs slightly from the PWA that I’ve shown in the screenshots above. The design, style, and element choice are similar. Both options of the store are equally easy to navigate.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1b044fe-c54c-4706-94b3-16e6e613b379/13-creating-magento-pwa-customizing-themes-coding.png" /></p>
<h3>4. PWAs Work Fast And Pave Way To Headless Commerce</h3>
<p>Due to the use of modern frameworks, advanced caching and rendering, and data transmission via API, properly developed PWAs can be a seven-league step up <strong>to boost the store’s speed</strong>.</p>
<p>Fast stores have a significant influence on conversions and rankings. Consider this:</p>
<ul>
<li><a href="https://www.websitebuilderexpert.com/building-websites/website-load-time-statistics">25% of users will flee a page</a> if it takes over 4 seconds to load.</li>
<li>With every additional loading second, the <a href="https://www.portent.com/blog/analytics/research-site-speed-hurting-everyones-revenue.htm#:~:text=The%20first%205%20seconds%20of,(between%20seconds%200%2D5">conversion rate drops by almost 4.5%</a>).</li>
<li><a href="https://unbounce.com/page-speed-report">7 out of 10 users state</a> that poor page speed impacts their choice to buy on another e-commerce store.</li>
</ul>
<p>Far from perfect site speed and performance are common pain points for many Magento stores, which are usually massive and complicated. The thing is that the majority of Magento stores have been up and running for about a decade and use a monolithic architecture. In the 2020s, there is a more modern alternative, headless architecture, which implies decoupling the frontend and backend.</p>
<p>For complex mammoth-like Magento stores that are commonly struggling to tackle slow page speed and other issues, the switch to headless can be a good starting point for a more global future-oriented transformation. We’re talking about the store’s performance and compatibility (both now and in the long run).</p>
<p>The main idea behind <a href="https://onilab.com/blog/magento-headless-commerce-explained">headless commerce</a> is that the site’s frontend and backend become detached from each other, and they communicate using API (for instance, GraphQL).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc94844c-80fd-4fcb-84c9-01e9301634de/11-creating-magento-pwa-customizing-themes-coding.png" /></p>
<p>It allows having more than one frontend that you may create to suit different touchpoints. I.e., you can have a native application, a PWA, and some other frontends that were developed for the devices that your customers may use to shop (like a smart speaker or smart refrigerator). These multiple “heads” are attached to the backend and database.</p>
<p>The separation of monolithic architecture (making it headless) brings many perks. Because each frontend is designed to cater to a particular device type, the UX\UI, performance, and conversions improve. Not to mention that it becomes easier and faster to implement changes in a decoupled store from the development perspective.</p>
<p><em>“Is a PWA a “must” in this case, you ask?”</em></p>
<p>No, but it can be a start for transitioning a Magento store to a full-fledged headless solution. Getting a progressive web application implies decoupling the backend from the frontend, that is splitting the monolithic architecture.</p>
<p>If the Magento PWA is well-built, it can bring a lot of improvement <strong>both to the store’s desktop and mobile performance</strong>. And smartphones and desktop computers are the two main touchpoints that bring Magento stores most conversions at the moment. Therefore, it makes sense to optimize the store to perform better on these devices.</p>
<p>What else should you note if you get a PWA? Since your store will already be decoupled, later on (if and when necessary) you can add on other “heads”. Perhaps, your customers will give preference to shopping on your Magento store from their smart TV in five years? It’ll be simpler for you to add another frontend to your site.</p>
<p>In any scenario, headless commerce is forecasted as the largest change in the e-commerce market within the next decade, so this is some food for thought.</p>
<h3>5. Is That It?</h3>
<p>Bringing up other PWA features, they can <strong>support push notifications</strong>. If you’re wondering, <em>“Wait, don’t native apps support push notifications too?”</em> You’re right, they do. My point is that it’s no longer an advantage of only traditional applications if you’re choosing which to develop (a PWA or a native application). </p>
<p>Push notifications are crucial for a strong customer retention strategy, as friendly non-irritating reminders can bring clients back into the funnel. In fact, quality push notifications can <a href="https://www.airship.com/blog/7-mobile-engagement-statistics-that-show-how-push-notifications-boost-roi">boost your retention rates by 3 to 10 times</a>. So, it’s up to you whether to include push notifications in your marketing strategy or not.</p>
<p>Do people use push notifications? Here’s what ShopPop stats suggest:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bee16a3e-5bd2-4067-861a-e9f78f68878d/4-creating-magento-pwa-customizing-themes-coding.png" /></p>
<p>The same may be said about offline mode. Progressive web apps are <strong>capable of working offline</strong>. To specify, users can continue using those parts of the site that were cached if the Internet connection is unstable or when offline. Hence, this feature is also not a perk of only traditional apps. And frankly, the feature set of progressive web applications for online retail continuously expands.</p>
Are Progressive Web Apps All Perfect?
<p>No. Especially when we are talking about iOS. There are still issues with how PWAs work on iOS devices, but overall the situation for e-commerce is good. Among the most notable restrictions are the partial absence of in-app payment features. But these issues shouldn’t stop you from building your own PWA.</p>
<p>Secondly, as per usual, great things take time. Creating a Magento progressive web application is not a fast task. It’s challenging from the development perspective and is rather time-consuming. But so is developing a native application or optimizing a site, agree?</p>
Are Progressive Web Apps Worth It?
<p>Don’t get me wrong. There are cases when native applications can be a better choice over PWAs. These may, for instance, include the game and social media app sectors.</p>
<p>But will your customers use your e-commerce store’s downloaded native app on a regular basis? Ask yourself, if you opt for building a traditional application (with all its benefits) will users take the time to go to an app market and download it, especially if it’s weighty? Will they use it often afterward or delete it if they wish to free up device storage space?</p>
<p>A PWA, on the other hand, is available from the browser at all times. This can be a benefit for people not willing to download any app to their device.</p>
<p>However, there are cases when native applications have proven themselves to be a highly efficient means of sales in e-commerce. Perhaps your e-commerce site can benefit from having <strong>both a native application and a PWA</strong>?</p>
<p>That was the case for Alibaba that we discussed above, this company even offers its repeat buyers perks for making purchases using their native app. Another example is the Tally Weijl online store that also has a PWA and a native application.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36842c7f-1535-4b3c-8bf6-74092bfbda75/8-creating-magento-pwa-customizing-themes-coding.png" /></p>
<p>Large e-commerce stores and big established brands often have both solutions. Consequently, smaller online retail stores and companies that don’t have an extended budget for developing two solutions usually opt for just one.</p>
<p>In any event, when deciding which to get (a PWA or native app), you must understand your audience’s needs and business specifics. At this point, you’re aiming at strengthening your m-commerce share and need a solution that’ll enhance mobile conversions. It’s up to you which option will best suit your business needs, every case is individual.</p>
<h3>What Can Getting A PWA Bring To The Table?</h3>
<p>The bottom line is that with a PWA, you “kill two birds with one stone” since you optimize both the look and performance of the e-commerce store on desktop and mobile. If a user enjoys shopping at your store on a smartphone, he has the chance to add a link-like shortcut to the home screen for fast access to the PWA. But at the same time, they can benefit from getting an equally good shopping experience on a desktop computer.</p>
<p>Finally, the process of rebuilding a Magento e-commerce store into a PWA means splitting the backend and frontend. By shifting to an API-based approach and headless architecture, you prepare the store for the big changes expected on the market in the next 5 to 10 years. I.e., people will use a larger variety of devices to shop online, including smart TVs, home assistants, and so on. Therefore, with a headless architecture, you can later add on solutions that’ll support these devices too.</p>
The Three Main Approaches To Building PWAs On Magento
<p>So, we’ve gone over a plethora of things that make PWAs great. But how are they built?</p>
<p>It is crucial to choose in favor of an optimal approach as you begin the process of building a progressive web application on Magento. As you might have guessed, there’s more than one path that a developer (or team of developers) can take when it comes to creating a PWA project. And depending on the choice, different timeframes, hardships, and obstacles may imply.</p>
<p>Let’s discuss the three main paths to PWA development on Magento. They are custom coding with the use of a progressive framework, adapting a ready-made toolkit, or combining both approaches. We’ll also cover the upsides and downsides of each of them.</p>
<h3>1. Using A Modern Framework</h3>
<p>This approach implies custom coding the Magento PWA from scratch using a progressive framework. These are, for example, ReactJS, VueJS, or AngularJS.</p>
<p>First and foremost, this path is suitable for those developers who already <strong>have previous experience in building PWAs</strong>. For those who are only making their first attempt to create a progressive web app, making an app from A to Z this way will be rather hard simply because the entire process is on you. You’ll have to think through the whole application, its logic, structure, architecture, as well as write and assemble all the needed code yourself.</p>
<p>On the other hand, opting for a progressive framework-only approach is the best choice if you need to <strong>create a PWA with many custom features</strong> or functionality. That said, it’ll be super tricky to build a highly unique and complex Magento PWA solution using only an out-of-the-box toolkit like Scandi PWA or Magento PWA Studio.</p>
<p>To explain, here are some screenshots from the Bright Star Kids Magento PWA. This store gives its clients the chance to personalize products. As you can see, there’s a multi-step product customization builder that allows making changes to the item. The only way to achieve such a feature on the PWA is to use custom coding.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a486d1c1-6c94-493b-942a-67d8dbb9c9eb/7-creating-magento-pwa-customizing-themes-coding.png" /></p>
<h4>An Overview Of The Process</h4>
<p>Many steps imply, but to give a brief overview, they can go down to 7 frontend and backend steps:</p>
<ol>
<li>Making system adjustments (f.e., configuring Ubuntu, installing the nodeJS runtime environment).</li>
<li>Installing a progressive framework like ReactJS to build the app, taking care of the server-side rendering implementation (f.e., via Razzle).</li>
<li>Adding all the libraries that the app will need to function (including GraphQL, Redux, and other often used ones).</li>
<li>Shaping out the app’s architecture using folders to maintain the structure and navigation.</li>
<li>Putting together the app (setting up Redux and GraphQL components, working with the storage (reducers), setting up Razzle (that’s used for component loading), defining URL paths using routes).</li>
<li>Piecing the parts that the app will consist of (header area, login, account, navigation menu, dynamic parts of the page, footer area, etc).</li>
<li>Making a backend module with files and handling backend GraphQL which processes queries.</li>
</ol>
<p>If you need a detailed guide on how it’s done, feel free to look into this tutorial with code on <a href="https://onilab.com/blog/how-to-build-a-pwa-storefront-magento-2-a-detailed-guide">building Magento PWAs with ReactJS</a>.</p>
<h4>Good To Know</h4>
<p>Let’s bring up a couple of things to keep in mind as you create a Magento PWA from scratch. Here we’ll share some tips on things that work in practice and some handy workarounds.</p>
<p><strong>1. Handling Service Workers</strong></p>
<p>Service workers are very important for progressive web applications. This Javascript file is needed for caching data, can play the role of a proxy that processes HTTP requests, and is used for creating functionality for push notifications and the offline mode. Configuring service workers can be very challenging.</p>
<p>One of the most efficient ways to approach service workers is by opting for a Razzle JS plugin. With its installation, you can properly set up the work of this file. When working on the offline mode, choose the service worker in combo with cache API. The method with data pulled from the network prior to cache is considered a good option.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b22f781c-58fe-4e53-80e2-986326b455d1/10-creating-magento-pwa-customizing-themes-coding.jpg" /></p>
<p><strong>2. Rendering</strong></p>
<p>The matter of properly handling client-side and server-side rendering can get tricky during Magento PWA development. Client-side rendering should be optimized additionally as you’d want the site to perform quickly on mobile devices. But the good news is that modern frameworks allow for rendering apps on both sides (client and server).</p>
<p>You can set up server-side rendering in several ways, including via:</p>
<ul>
<li>a Headless Browser (Puppeteer or Selenium);</li>
<li>proxy;</li>
<li>server-side rendering tools like Next.js or Razzle;</li>
<li>nodeJS.</li>
</ul>
<p>Going for proxy can allow you to achieve great results but this path takes a lot of time. Tools like Razzle are quite simple to use. Nonetheless, choosing a custom Node.js solution might be the best choice if you’re constructing something very complex.</p>
<p><strong>3. Components &amp; GraphQL</strong></p>
<p>Many mistakes are often made at the very beginning during the architecture stage. The biggest possible mistakes include improper component size or if components are laid out irrationally. If the components are too big, this can negatively impact performance and lead to rerendering.</p>
<p>On another note, large GraphQL requests can really backpedal your PWA. For this reason, we’d recommend minimizing the number of GraphQL requests and using tools like Varnish to cache GraphQL.</p>
<h4>Modern Framework Use Pros:</h4>
<p>This is certainly the way to go in terms of development if you’re aiming at building a PWA with a lot of custom-created features. If the store goes beyond the standard feature set, opt for this path. </p>
<h4>Cons Of The Approach:</h4>
<p>This is not the path for newbies in PWA development. The entire process falls under the responsibility of the developers. It implies a bunch of stumbling blocks that a developer may face if something “falls between the cracks”.</p>
<p>For instance, many mistakes are often made at the very beginning during the architecture stage. Configuring service workers can also be very challenging. They are needed for caching data, thus speeding up the PWA, and are used for push notifications too. Other examples of possible mistakes include improper component size or if components are laid out irrationally. If the components are too big, this can negatively impact performance and lead to rerendering.</p>
<p>If you’re the one coding, you can forget or leave something out unintentionally. Moreover, you’ll probably encounter an issue or something that you haven’t thought through; this will lead to rewriting a lot of your own code to get it right.</p>
<h3>2. Customizing Toolkit Solutions</h3>
<p>Alternatively, there are package options for building Magento progressive web apps that can be tweaked. As you may have guessed, this option is more suitable for newbies.</p>
<p>What you have to understand is that <strong>toolkits like this provide more or less universal code solutions</strong>. This option can save developers their time on coding from the ground up, notably if they plan to create a standard Magento PWA without any unique features.</p>
<p>Nonetheless, because the toolkit code is made to be universal, <strong>it’ll be tough to customize a theme if your PWA needs something nonstandard</strong>. Therefore, if the Magento PWA store is going to be complex or should have unique features, then it’ll be too difficult to achieve the desired result using just a toolkit. Way too often, opting for an out-of-the-box solution in such a case is very unreasonable. You’ll pull a lot of excessive code that’ll need to be removed.</p>
<p>Have a look at the Timetravels progressive web application. Due to the peculiarities of the sold services, the checkout of this site is absolutely unique. It significantly differs from the checkouts of regular e-commerce sites and has a bunch of steps and fields. I.e., you won’t manage to build such a custom checkout using only the provided out-of-the-box resources.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46b6252d-bba2-40fe-9e67-6f5c6202d4ea/2-creating-magento-pwa-customizing-themes-coding.png" /></p>
<h4>Top Three PWA Toolkits For Magento</h4>
<p>The three most commonly used toolkit packages are Magento PWA Studio, Scandi PWA, and Vue Storefront. Let’s take a closer look at each of these.</p>
<p><strong>1. Magento PWA Studio</strong></p>
<p>The <a href="https://magento.com/products/magento-commerce/pwa">Magento PWA Studio</a> is the official “toolbox” for PWA creation that Magento provides. Based on ReactJS, the PWA Studio uses React code blocks and offers ready-made components and front-end architecture for the PWA Storefront. The available tools in the Studio can save a developer’s time on manually creating elements that make up a standard PWA.</p>
<p>Among the strong points worth noting is that <strong>the toolkit is non-monolithic</strong>, meaning that developers can use only the required parts as opposed to the whole package.</p>
<p>Furthermore, the <strong>framework and architecture of the PWA come out of the box</strong>. Thus, you can avoid making critical mistakes at the very start of the project. Plus, you can save time on setups (such as the app builder), service workers, caching, and routing works.</p>
<p>Speaking of the specific tools that developers can get ahold of are:</p>
<ul>
<li>PWA Buildpack CLI tools (for setting up an environment for PWA development),</li>
<li>Peregrine package (includes React hooks and components),</li>
<li>Venia package (with the store and UI components for visuals),</li>
<li>UPWARD-JS (for the UPWARD server that is the median between the PWA and the Magento server),</li>
<li>Project documentation.</li>
</ul>
<p><strong>2. Scandi PWA</strong></p>
<p>Another toolkit example is <a href="https://scandipwa.com">Scandi PWA</a>. Being very developer-oriented, Scandi PWA provides the theme that’s placed atop Magento. This set of tools also offers ready components and functionality that can be borrowed and modified.</p>
<p>Mentioning a PWA example built with the use of Scandi PWA, we showed a couple of screenshots of the Apivita store earlier in the article.</p>
<p>Actually, Scandi PWA currently covers a broader range of cases and offers more ready-made solutions than the PWA Studio. Due to the accessibility of its quite extensive selection of readily available solutions, it may possibly be a better choice for you if you want to speed up the development process and therefore cut development costs (provided that your PWA is more or less standard).</p>
<p>The Scandi PWA toolkit can boast of having a large number of solutions in its roadmap that can be adopted. These already include:</p>
<ul>
<li>Configuration basics (theming, branding, languages, time zone, location, multi-store setup, other store details);</li>
<li>Catalog and content solutions (everything from configurable and simple products to managing the price and stock);</li>
<li>Client (cart, login &amp; passwords, previous orders, accounts, wishlists, etc.);</li>
<li>Components for marketing (customer feedback, product lists, coupons, price rules in the catalog, etc.);</li>
<li>Search &amp; Navigation (menu, breadcrumbs visibility, layered navigation, quick search, pagination, and other SEO-important points, among others);</li>
<li>Checkout (payment methods, shipping, guest checkout, among others).</li>
</ul>
<p><strong>3. Vue Storefront</strong></p>
<p><a href="https://www.vuestorefront.io">Vue Storefront</a> offers an open-source headless solution that’s flexibly applicable for multiple eCommerce platforms (it is thus suitable not only for Magento). As such, the Garten-und-Freizeit store that we showed in the screenshots in the first part of the article is based on the Vue Storefront toolkit.</p>
<p>Based on VueJS, the toolset has many ready-for-use blocks. However, the partial lack of Vue documentation can make installation and maintenance tricky at times.</p>
<p>Listing the production-ready solutions that are available:</p>
<ul>
<li>server-side rendering,</li>
<li>Vue Storefront API,</li>
<li>CMS API,</li>
<li>ElasticSearch support,</li>
<li>Vue Analytics,</li>
<li>Payment system integrations (Paypal, Stripe, Klarna, Mollie, Adyen).</li>
</ul>
<p>Just as with the Scandi PWA case, Vue Storefront is developed by an individual company, not the official Magento team. Plus, this toolkit is suitable for integrating with numerous e-commerce platforms, thus, isn’t only Magento-oriented. These points are worth keeping in mind.</p>
<h4>PWA Development Process Overview via Magneto PWA Studio</h4>
<p>The approach of building a PWA using a toolkit differs from the one we described previously. If we take the Magento PWA Studio example, the steps can be shortlisted to the following:</p>
<ol>
<li>Making system adjustments (f.e., configuring Ubuntu, installing the nodeJS runtime environment, and other software).</li>
<li>Setting up a new project (e.g., using the PWA Studio Buildpack).</li>
<li>Overriding default components that are provided by the Venia Concept to change the PWA to what you need (from the logo to any other parts of the PWA such as the menu).</li>
<li>Making a backend module with files and handling backend GraphQL and other queries.</li>
</ol>
<p>Feel free to browse this detailed guide on <a href="https://onilab.com/blog/how-to-develop-a-site-using-magento-pwa-studio">how to create a Magento PWA using the PWA Studio</a> if you’d like to check out code examples or need a step-by-step tutorial.</p>
<h4>Good To Know</h4>
<p>Here are a few recommendations to bear in mind if you decide to build a Magento PWA with the Magento PWA Studio toolkit.</p>
<ul>
<li>Mind the matter of styles during the standard component override. Additional styles bring about extra file weight which isn't good for your PWA. Therefore it is crucial to remove the unnecessary blocks of code containing unused default styles.</li>
<li>Handling GraphQL queries smartly can be another problem to tackle. Because the Magento PWA Studio toolkit rarely uses query fragments, you may face obstacles. A workaround solution here is splitting big queries into parts and using them multiple times. Note, however, that this tip isn’t universally applicable and can lead to unpleasant consequences if used in inappropriate parts of the progressive web application (for example, in listings).</li>
<li>Make sure to not get confused with talons and hooks, otherwise, you can mix up the visual and logic components. Put simply, hooks are reusable, talons are not. You can check out <a href="https://magento.github.io/pwa-studio/peregrine/talons/">this document</a> for a more detailed explanation.</li>
</ul>
<h4>Toolkit Approach Pros:</h4>
<p>As we’ve already mentioned, choosing a toolset as a path for creating a PWA is reasonable for those who have no prior experience with building PWAs.</p>
<p>The ready-made blocks are customizable and can shorten the time spent on installation, set-ups, etc. The process is more like an override rather than building from the ground up. </p>
<h4>Cons Of The Toolkit Approach:</h4>
<p>If your project differs from what’s offered by the PWA Studio or other analogous packages as a standard, you may face the challenge of changing the code. And, at times, it’s very hard to modify it. </p>
<p>You can end up not only wasting extra time on such code customization but also implementing PWA elements that’ll be unnecessary for your specific app (this can slow load time and lower performance).</p>
<p>Again, if the PWA that you’re developing requires highly customized solutions, custom development is the way to go, not tailoring ready blocks.</p>
<h3>3. Opting For A Combo Solution</h3>
<p>Finally, the third choice is using a combination of custom coding and some readily available toolkit pieces. This seems like a gold meridian for many developers.</p>
<h4>An Overview Of The Process</h4>
<p>Here are a couple of pointers:</p>
<ul>
<li>For instance, you can opt for a ready-made framework and architecture that are given in a toolkit. You may also make use of the parts that deal with caching, routing, and the service worker.</li>
<li>Yet, when working on the frontend parts of the PWA, a developer can use his own code. This will be better than overriding and deleting the unneeded app code given in the toolkit.</li>
</ul>
<h4>Pros Of The Combined Approach:</h4>
<p>It allows saving time on manual coding for standard features. It’s simpler to tweak the standard PWA parts and leave your unique code for the custom parts of the app.</p>
<h4>Cons Of The Combined Approach:</h4>
<p>A combined approach will involve additional code checks and studying what the ready-made solutions have on offer (i.e., what you can and can’t use for your PWA).</p>
<p>When you decide on using a blended approach, you can still end up with a deal of excessive code that’s “pulled” from the toolkit. Thus, to optimize your progressive web app, you’ll have to put in plenty of hours to review the code and remove all the parts you don’t need.</p>
<p>Similarly, you can face the need to untangle abstractions and fix the bugs that might occur due to mixing your code with that from the toolkit.</p>
Final Thoughts
<p>All in all, Magento's progressive web applications are an investment that’s undoubtedly worth it. It’ll bring many benefits in the long run as well as show results straight off. What’s for development, there’s a lot to keep in mind because the process is by all means complex. Therefore, when choosing an approach, perhaps, the combined one that’ll give the chance to use a reasonable amount of custom coding with some solutions tweaked to your needs from toolkits is the best choice.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:33;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:75:"A Splash Of Color For Misty Days (November 2021 Desktop Wallpapers Edition)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:79:"https://smashingmagazine.com/2021/10/desktop-wallpaper-calendars-november-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:79:"https://smashingmagazine.com/2021/10/desktop-wallpaper-calendars-november-2021/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Sun, 31 Oct 2021 08:20:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:260:"November is just around the corner, and with it, a new collection of desktop wallpapers to celebrate the beginning of the month. Designed by creatives from all across the globe, they come in versions with and without a calendar. Let’s make November colorful!";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Cosima Mielke)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:157:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a2a341f-4f72-4716-91c6-ed6da6add2fd/nov-21-no-shave-november-preview-opt.png";s:6:"length";s:1:"0";s:4:"type";s:9:"image/png";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:99814:"<p>A bit of colorful inspiration is always a good thing, don’t you think so? Especially in November, when the days tend to be rather gray in many parts of the world. To bring a splash of color and some good vibes to your desktops and home screens, artists and designers from across the globe once again tickled their creativity and designed <strong>beautiful and inspiring wallpapers</strong> to welcome the new month.</p>

<p>This <a href="https://www.smashingmagazine.com/category/wallpapers">monthly wallpapers challenge</a> has been going on for more than ten years already, and we are very thankful to everyone who has put their creative skills to the test and contributed their artworks to it — back in the early days, just like today.</p>

<p>In this collection, you’ll find their wallpaper designs for <strong>November 2021</strong>. All of them come in versions with and without a calendar and can be downloaded for free. As a little bonus goodie, we also compiled some timeless treasures from past November editions at the end of this post for you. Enjoy!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
</ul>

<div>
<h3>Submit a wallpaper!</h3>
<p>Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>! <a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Join in! →</a></p>
</div>

No-Shave November
<p>“This November, say goodbye to your trimmer, scissors, and razors, and join the No-Shave November, a global movement dedicated to raising cancer awareness. Let your beard, mustache, and any other body hair free, and donate the money you would spend on grooming to help those battling.” — Designed by <a href="https://www.popwebdesign.net/web-development-serbia.html">PopArt Studio</a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nov-21-no-shave-november-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a2a341f-4f72-4716-91c6-ed6da6add2fd/nov-21-no-shave-november-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nov-21-no-shave-november-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/cal/nov-21-no-shave-november-cal-2560x1440.jpg">2560x1440</a>    </li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/no-shave-november/nocal/nov-21-no-shave-november-nocal-2560x1440.jpg">2560x1440</a>    </li>
</ul>

Winter Is Here
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nov-21-winter-is-here-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a9a289e0-b7e6-4213-a69a-4492b11e8410/nov-21-winter-is-here-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nov-21-winter-is-here-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/cal/nov-21-winter-is-here-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/winter-is-here/nocal/nov-21-winter-is-here-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Go To Japan
<p>“November is the perfect month to go to Japan. Autumn is beautiful with its brown colors. Let’s enjoy it!” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela</a> from Spain.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nov-21-go-to-japan-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ebf513f-ed94-4617-bf88-604d0894ada9/nov-21-go-to-japan-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nov-21-go-to-japan-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/cal/nov-21-go-to-japan-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/go-to-japan/nocal/nov-21-go-to-japan-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Holiday Season Is Approaching
<p>Designed by <a href="https://activecollab.com">ActiveCollab</a> from the United States.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nov-21-holiday-season-is-approaching-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba88476a-37d7-4111-9c48-a4e164f97313/nov-21-holiday-season-is-approaching-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nov-21-holiday-season-is-approaching-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/cal/nov-21-holiday-season-is-approaching-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/holiday-season-is-approaching/nocal/nov-21-holiday-season-is-approaching-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Be Still And Know
<p>“We to be still in our mind, at peace in our heart and spirit, regardless of what’s going on around us.” — Designed by <a href="https://www.linkedin.com/in/hiteshpuri/">Hitesh Puri</a> from Delhi, India.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nov-21-be-still-and-know-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/053a36e6-dd0f-4373-bff5-98046123be76/nov-21-be-still-and-know-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nov-21-be-still-and-know-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/cal/nov-21-be-still-and-know-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/be-still-and-know/nocal/nov-21-be-still-and-know-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Mac OldS
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nov-21-mac-olds-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3a2060c6-f731-4422-b560-10f6223c0911/nov-21-mac-olds-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nov-21-mac-olds-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/cal/nov-21-mac-olds-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/mac-olds/nocal/nov-21-mac-olds-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Farewell To Autumn
<p>“We say goodbye to autumn and welcome winter together without limitations and fears thanks to the effects of mass immunization. Enjoy the rest of the beautiful autumn days.” — Designed by <a href="https://www.librafire.com/">LibraFire</a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nov-21-farewell-to-autumn-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97f98622-4f1c-4c7d-a356-ea99505bb799/nov-21-farewell-to-autumn-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nov-21-farewell-to-autumn-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/cal/nov-21-farewell-to-autumn-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-21/farewell-to-autumn/nocal/nov-21-farewell-to-autumn-nocal-2560x1440.png">2560x1440</a></li>
</ul>



Oldies But Goodies

<p>World Kindness Day, mushroom season, or a simple peanut butter and jelly sandwich — a lot of things have inspired the community to design a November wallpaper in all those years that we’ve been running this monthly series. Below you’ll find a little <strong>wallpapers best-of</strong> from past editions. Maybe you’ll spot one of your almost-forgotten favorites in there, too? <em>(Please note that these designs don’t come with a calendar.)</em></p>

<p></p><h3>International Civil Aviation Day</h3><p></p>
<p></p><p>“On December 7, we mark International Civil Aviation Day, celebrating those who prove day by day that the sky really is the limit. As the engine of global connectivity, civil aviation is now, more than ever, a symbol of social and economic progress and a vehicle of international understanding. This monthly calendar is our sign of gratitude to those who dedicate their lives to enabling everyone to reach their dreams.” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d3efa6d-140d-42a3-96be-44c1a8ef2e60/nov-19-international-civil-aviation-day-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f837919f-6ce4-4197-96b1-5b7ce66ac2c1/nov-19-international-civil-aviation-day-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f837919f-6ce4-4197-96b1-5b7ce66ac2c1/nov-19-international-civil-aviation-day-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-19/international-civil-aviation-day/nocal/nov-19-international-civil-aviation-day-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Mushroom Season!</h3><p></p>
<p></p><p>“It is autumn! It is raining and thus… it is mushroom season! It is the perfect moment to go to the forest and get the best mushrooms to do the best recipe.” — Designed by <a href="http://www.silocreativo.com/en/">Verónica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1775c95-1c88-47e9-abe3-010b7d9c4dc0/nov-15-mushroom-season-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f07e2f6-0387-44d5-b7c0-361acbb3f022/nov-15-mushroom-season-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f07e2f6-0387-44d5-b7c0-361acbb3f022/nov-15-mushroom-season-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>The Kind Soul</h3><p></p>
<p></p><p>“Kindness drives humanity. Be kind. Be humble. Be humane. Be the best of yourself!” — Designed by <a href="https://www.colormean.ae/">Color Mean Creative Studio</a> from Dubai.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8f0fd84d-e496-435f-be91-5b2ecb580149/nov-17-the-kind-soul-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f00ee114-6db4-4f83-9877-1827113c2276/nov-17-the-kind-soul-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f00ee114-6db4-4f83-9877-1827113c2276/nov-17-the-kind-soul-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Time To Give Thanks</h3><p></p>
<p></p><p>Designed by <a href="http://www.tazi.com.au">Glynnis Owen</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2eb92368-cefd-4b28-9813-15deae3a363a/nov-16-time-to-give-thanks-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e00bfb70-c6a1-40d5-9753-c5e375e863c2/nov-16-time-to-give-thanks-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e00bfb70-c6a1-40d5-9753-c5e375e863c2/nov-16-time-to-give-thanks-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Tempestuous November</h3><p></p>
<p></p><p>“By the end of autumn, ferocious Poseidon will part from tinted clouds and timid breeze. After this uneven clash, the sky once more becomes pellucid just in time for imminent luminous snow.” — Designed by <a href="https://www.creitive.com">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e17adda-4fc7-4ad5-9328-e364e52a0075/nov-17-tempestuous-november-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aa9d7e3-e1b8-48dd-9dcb-25eaf0ba1229/nov-17-tempestuous-november-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aa9d7e3-e1b8-48dd-9dcb-25eaf0ba1229/nov-17-tempestuous-november-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Curious Squirrel</h3><p></p>
<p></p><p>Designed by <a href="https://weareimd.be/">Saul Wauters</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/67fca000-69b0-4310-a919-605d3477073d/nov-17-curious-squirrel-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0e19b7bf-661d-4ae4-b579-845804a6ed84/nov-17-curious-squirrel-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0e19b7bf-661d-4ae4-b579-845804a6ed84/nov-17-curious-squirrel-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-17/curious-squirrel/nocal/nov-17-curious-squirrel-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/curious-squirrel/nocal/nov-17-curious-squirrel-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/curious-squirrel/nocal/nov-17-curious-squirrel-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Outer Space</h3><p></p>
<p></p><p>“This November, we are inspired by the nature around us and the universe above us, so we created an out-of-this-world calendar. Now, let us all stop for a second and contemplate on preserving our forests, let us send birds of passage off to warmer places, and let us think to ourselves — if not on Earth, could we find a home somewhere else in outer space?” — Designed by <a href="https://www.popwebdesign.de">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a22c060-701d-45e2-b929-e56fe19d1f00/nov-18-outer-space-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26c1a03-abab-4c75-9825-9c00172ae9a9/nov-18-outer-space-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26c1a03-abab-4c75-9825-9c00172ae9a9/nov-18-outer-space-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Simple Leaves</h3><p></p>
<p></p><p>Designed by Nicky Somers from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/70fa87b7-b3ec-4a2c-8f0e-20cbb588e6ed/nov-14-simple-leaves-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e026cd0-3deb-4151-87ea-26980096888b/nov-14-simple-leaves-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e026cd0-3deb-4151-87ea-26980096888b/nov-14-simple-leaves-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-14/simple-leaves/nocal/nov-14-simple-leaves-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/simple-leaves/nocal/nov-14-simple-leaves-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/simple-leaves/nocal/nov-14-simple-leaves-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/simple-leaves/nocal/nov-14-simple-leaves-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/simple-leaves/nocal/nov-14-simple-leaves-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/simple-leaves/nocal/nov-14-simple-leaves-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>November Ingredients</h3><p></p>
<p></p><p>“Whether or not you celebrate Thanksgiving, there’s certain things that always make the harvest season special. As a Floridian, I’m a big fan of any signs that the weather might be cooling down soon, too!” — Designed by Dorothy Timmer from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/40e28c96-2a3a-414f-92ec-189a3e91c1a9/nov-14-november-ingredients-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/384c68f3-8284-4228-a97d-1917002d3542/nov-14-november-ingredients-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/384c68f3-8284-4228-a97d-1917002d3542/nov-14-november-ingredients-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/november-ingredients/nocal/nov-14-november-ingredients-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Deer Fall, I Love You!</h3><p></p>
<p></p><p>Designed by <a href="http://www.mariaclaireporter.com/portfolio.html">Maria Porter</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca26fac3-6827-4335-907c-efe1d306aa4b/nov-16-deer-fall-i-love-you-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/59cef79b-ca08-4704-ad05-ee814171adbc/nov-16-deer-fall-i-love-you-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/59cef79b-ca08-4704-ad05-ee814171adbc/nov-16-deer-fall-i-love-you-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Peanut Butter Jelly Time!</h3><p></p>
<p></p><p>“November is the Peanut Butter Month so I decided to make a wallpaper around that. As everyone knows peanut butter goes really well with some jelly so I made two sandwiches, one with peanut butter and one with jelly. Together they make the best combination. I also think peanut butter tastes pretty good so that’s why I chose this for my wallpaper.” — Designed by <a href="http://www.sennemommens.com">Senne Mommens</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94a18ffc-39d9-41e5-ab10-f4b5e93b6eac/nov-17-peanut-butter-jelly-time-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21d4e006-6bb8-46d1-b7c4-75f780cae95f/nov-17-peanut-butter-jelly-time-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21d4e006-6bb8-46d1-b7c4-75f780cae95f/nov-17-peanut-butter-jelly-time-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-17/peanut-butter-jelly-time/nocal/nov-17-peanut-butter-jelly-time-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/peanut-butter-jelly-time/nocal/nov-17-peanut-butter-jelly-time-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/peanut-butter-jelly-time/nocal/nov-17-peanut-butter-jelly-time-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/peanut-butter-jelly-time/nocal/nov-17-peanut-butter-jelly-time-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/peanut-butter-jelly-time/nocal/nov-17-peanut-butter-jelly-time-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-17/peanut-butter-jelly-time/nocal/nov-17-peanut-butter-jelly-time-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Branches</h3><p></p>
<p></p><p>“The design of trees has always fascinated me. Each one has it’s own unique entanglement of branches. With or without leaves they are always intriguing. Take some time to enjoy the trees around you — and the one on this wallpaper if you’d like!” — Designed by <a href="http://plaidgecko.com/">Rachel Litzinger</a> from Chiang Rai, Thailand.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2554873-30ef-4091-a91c-23d2903f6676/nov-14-branches-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/495f211d-1e32-4523-a69f-ca47005854b9/nov-14-branches-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/495f211d-1e32-4523-a69f-ca47005854b9/nov-14-branches-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1080x1920.jpg">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-2560x1440.jpg">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-1600x900.jpg">1600x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/branches/nocal/nov-14-branches-nocal-2560x2560.jpg">2560x2560</a></li>
</ul>

<p></p><h3>Real Artists Ship</h3><p></p>
<p></p><p>“A tribute to Steve Jobs, from the crew at Busy Building Things.” Designed by <a href="http://www.busybuildingthings.com">Andrew Power</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cad513d5-d349-4b54-9012-a92e2a0d62f2/november-11-realartistsship-39-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b75bce2-84d7-4472-b345-4977b294a856/november-11-realartistsship-39-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b75bce2-84d7-4472-b345-4977b294a856/november-11-realartistsship-39-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-realartistsship__39-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-realartistsship__39-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-realartistsship__39-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-realartistsship__39-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-realartistsship__39-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-realartistsship__39-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Running Through Autumn Mist</h3><p></p>
<p></p><p>“A small tribute to my German Shepherd who adds joy to those grey November days.” — Designed by <a href="http://frankemargrete.com/">Franke Margrete</a> from the Netherlands.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23bf98c9-5bed-4373-ac10-fb9d952c3738/nov-18-running-through-autumn-mist-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0340ed09-d577-43e0-aff4-f466291914c0/nov-18-running-through-autumn-mist-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0340ed09-d577-43e0-aff4-f466291914c0/nov-18-running-through-autumn-mist-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-360x480.png">360x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-376x668.png">376x668</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-768x1024.png">768x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1366x1050.png">1366x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1536x864.png">1536x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1600x900.png">1600x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-2560x1600.png">2560x1600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-3840x2160.png">3840x2160</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/running-through-autumn-mist/nocal/nov-18-running-through-autumn-mist-nocal-5120x2880.png">5120x2880</a></li>
</ul>

<p></p><h3>Little Mademoiselle P</h3><p></p>
<p></p><p>“Black-and-white drawing of a little girl.” Designed by Jelena Tšekulajeva from Estonia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a4536ed-ed72-4789-b6d8-96cc9f220d34/november-11-little-mademoiselle-p-94-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bda6cdb6-8f29-4b9e-bcdd-85c707f47891/november-11-little-mademoiselle-p-94-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bda6cdb6-8f29-4b9e-bcdd-85c707f47891/november-11-little-mademoiselle-p-94-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-little_mademoiselle_p__94-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-little_mademoiselle_p__94-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-little_mademoiselle_p__94-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-little_mademoiselle_p__94-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/november-11/november-11-little_mademoiselle_p__94-nocal-1680x1050.jpg">1680x1050</a></li>
</ul>

<p></p><h3>November Nights On Mountains</h3><p></p>
<p></p><p>“Those chill November nights when you see mountain tops covered with the first snow sparkling in the moonlight.” — Designed by <a href="http://www.jovanadjokic.com/">Jovana Djokic</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74221f7b-6d5f-45c3-9ccb-abca5c7aebd0/nov-15-november-nights-on-mountains-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/86ca2d6e-7480-4d31-87f9-14121edd215b/nov-15-november-nights-on-mountains-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/86ca2d6e-7480-4d31-87f9-14121edd215b/nov-15-november-nights-on-mountains-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>Hello World, Happy November!</h3><p></p>
<p></p><p>“I often read messages at Smashing Magazine from the people in the southern hemisphere ‘it’s spring, not autumn!’ so I’d liked to design a wallpaper for the northern and the southern hemispheres. Here it is, northerners and southerns, hope you like it!” — Designed by <a href="http://agnesswart.nl">Agnes Swart</a> from the Netherlands.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/430130a6-25ab-42ea-a53f-b213c6663754/nov-14-hello-world-happy-november-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b7e62a7-e48e-419a-9ff1-00791771c006/nov-14-hello-world-happy-november-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b7e62a7-e48e-419a-9ff1-00791771c006/nov-14-hello-world-happy-november-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Moonlight Bats</h3><p></p>
<p></p><p>“I designed some Halloween characters and then this idea came to my mind — a bat family hanging around in the moonlight. A cute and scary mood is just perfect for autumn.” — Designed by <a href="http://www.carmen-eisendle.com">Carmen Eisendle</a> from Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eb930008-f9f2-4640-9da7-8ec4961ef457/nov-16-moonlight-bats-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95ff8287-5ec2-4dd5-b3a8-0b7fc4002451/nov-16-moonlight-bats-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95ff8287-5ec2-4dd5-b3a8-0b7fc4002451/nov-16-moonlight-bats-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1680x1260.png">1680x1260</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-2560x1600.png">2560x1600</a></li>
</ul>

<p></p><h3>Welcome Home Dear Winter</h3><p></p>
<p></p><p>“The smell of winter is lingering in the air. The time to be home! Winter reminds us of good food, of the warmth, the touch of a friendly hand, and a talk beside the fire. Keep calm and let us welcome winter.” — Designed by <a href="http://acodez.in/">Acodez IT Solutions</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50c9ea50-884f-473a-b3b1-14900d365355/nov-16-welcome-home-dear-winter-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3c0a650-20d1-4e84-a131-6c7625b75188/nov-16-welcome-home-dear-winter-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3c0a650-20d1-4e84-a131-6c7625b75188/nov-16-welcome-home-dear-winter-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Stars</h3><p></p>
<p></p><p>“I don’t know anyone who hasn’t enjoyed a cold night looking at the stars.” — Designed by Ema Rede from Portugal.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5b13015-b6a8-4381-b8a3-471ab56ce47a/nov-18-stars-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0e12314-b103-46e0-9c85-55a6e7531d0d/nov-18-stars-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0e12314-b103-46e0-9c85-55a6e7531d0d/nov-18-stars-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-18/stars/nocal/nov-18-stars-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/stars/nocal/nov-18-stars-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/stars/nocal/nov-18-stars-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/stars/nocal/nov-18-stars-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/stars/nocal/nov-18-stars-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-18/stars/nocal/nov-18-stars-nocal-1920x1440.png">1920x1440</a></li>
</ul>

<p></p><h3>Me And The Key Three</h3><p></p>
<p></p><p>“This wallpaper is based on screenshots from my latest browser game (I’m an indie games designer).” — Designed by <a href="http://www.bontegames.com">Bart Bonte</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a36659bc-3708-428a-99a8-14f9ecf7d1fd/key-three-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57fb0377-f0ca-4c86-b9ef-a7e70432e798/key-three-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57fb0377-f0ca-4c86-b9ef-a7e70432e798/key-three-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/nov-13/pinguin-wallpapers/nocal/2560x1440.png">2560x1440</a></li>
</ul>

";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:34;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:61:"50 Resources And Tools To Turbocharge Your Copywriting Skills";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:84:"https://smashingmagazine.com/2021/10/resources-tools-turbocharge-copywriting-skills/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:84:"https://smashingmagazine.com/2021/10/resources-tools-turbocharge-copywriting-skills/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Fri, 29 Oct 2021 10:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:172:"Stop wasting time and effort writing copy that falls flat. Raise your copywriting game and boost your powers of persuasion with these rich and informative online resources.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:40:"hello@smashingmagazine.com (Freya Giles)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:167:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/376436ee-7e40-4d99-ad14-e934df9f92c9/resources-tools-turbocharge-copywriting-skills.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:17719:"<p>I believe that copywriting is the most valuable skill you’ll ever learn. Great copy engages your readers, builds connections, turns readers into consumers and consumers into brand evangelists. Of course, this all means a fatter bottom line, which makes you the most popular person in the room!</p>
<p>If you’re ready to acquire near-mystical powers of persuasion, check out these useful resources and tools that are bound to help strengthen your copywriting skills.</p>
Brush Up On Your Language Skills
<p>I’d like to introduce this section with a small proviso. Great grammar does not equal great copywriting. Copywriting is a unique animal, different from academic, journalistic or literary writing. Copywriting is about human psychology, consumer behaviour and applying tried and tested methodologies. It’s not about beautiful words, and I know many great writers who make poor copywriters and vice versa.</p>
<p>That said, <strong>language mistakes matter</strong> if they get in the way of comprehension. So it’s worth brushing up on those language skills to avoid errors that will derail your message.</p>
<ul>
<li><a href="https://www.wikihow.com/Use-English-Punctuation-Correctly">Use English Punctuation Correctly</a><br />An easy-to-follow crash course in English punctuation, starting with the basics.</li>
<li><a href="https://www.quickanddirtytips.com/grammar-girl/">Grammar Girl</a><br />A welcome break from dull and dry grammar guides. Mignon Fogarty, AKA Grammar Girl, provides short, friendly tips for better writing. Grammar rules, word choices, and tricks to remember them all. Who knew grammar could be so bright and breezy?</li>
<li><a href="https://brians.wsu.edu/common-errors/">Common Errors In English</a><br />A comprehensive alphabetical list of common English errors, from misspellings to confounded compound nouns and common expressions gone rogue. Click for detailed explanations of each one.</li>
<li><a href="https://www.techrepublic.com/blog/10-things/10-flagrant-grammar-mistakes-that-make-you-look-stupid-97444/">10 Flagrant Grammar Mistakes That Make You Look Stupid</a><br />More common errors to sidestep.</li>
<li><a href="https://www.grammarly.com/">Grammarly: Free Online Writing Assistant</a><br />This AI-powered writing assistant grows ever more sophisticated. Adept at spotting errors, it can also identify tone, point out erroneous words or suggest better ones. Well worth downloading.</li>
<li><a href="https://www.amazon.com/Eats-Shoots-Leaves-Lynne-Truss-ebook/dp/B0051UH6YM">Eats, Shoots And Leaves</a><br />Download the Kindle edition of this witty exploration of the perils of improper punctuation. A joy for anyone who cringes at the sight of an errant apostrophe.</li>
<li><a href="https://copyblogger.com/punctuation-mistakes/">Six Common Punctuation Errors That Bedevil Bloggers</a><br />So true. This contains a couple of my pet peeves.</li>
</ul>
Master Plain English
<p>In a hectic world, getting straight to the point and communicating your message quickly and clearly is a non-negotiable. But the most common challenge budding copywriters tell me about is writing concisely. This is partly because of some very unhelpful lessons we learnt at school.</p>
<p>So I’m going to ask you to forget all those long words and stop writing winding sentences. It may be big, but it’s not clever. Find out why below…</p>
<ul>
<li><a href="https://plain-words.com/">The Complete Plain Words | Plain Words</a><br />Sir Ernest Gowers was an eminent civil servant who railed against the convoluted language so often used in the service. Sixty years after he wrote Plain Words, it’s still a superb and charmingly written guide to clear communication.</li>
<li><a href="https://www.bartleby.com/141/index.html">The Elements of Style</a><br />A freely available online version of the classic reference book, The Elements of Style by William Strunk, Jr.</li>
<li><a href="http://www.plainenglish.co.uk/">Plain English Campaign</a><br />Home to an award-winning group of anti-gobblydegook activists. Browse the site, particularly the free tools section to find out why plain English is so important and how to achieve it.</li>
<li><a href="https://www.skillsyouneed.com/write/plain-english.html">Plain English Writing | SkillsYouNeed</a><br />A nice visual guide to how and why to craft short, clear, easily digestible sentences.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b6ef055-f387-4de1-857f-fe1c81a68d2a/plain-english.jpg" /></p>
Understand Style Guides And Brand Voice
<p>When your brand talks, what does it sound like? Your brand voice is a vital part of your overall brand identity, building connections, trust and recognition with your readers. Brand voice covers tone, language and style points (whether to capitalise, how to format dates, Oxford comma or no Oxford comma, and so on).</p>
<ul>
<li><a href="https://www.writing-skills.com/how-to-create-brand-tone-of-voice-guidelines">How To Create A Brand Tone Of Voice Guide</a><br />Don’t have a brand guide yet? Check out this site for helpful hints on putting one together.</li>
<li><a href="https://www.ebaqdesign.com/blog/brand-guidelines#1">10 Best Examples of Brand Guidelines</a><br />For inspiration, look to the brands that are doing it well. Many brands publish their guidelines online and this site will point you to ten of the greats. Skip to the section on voice in each.</li>
<li><a href="https://www.apstylebook.com/">Associated Press Stylebook</a><br />Use this guide if American English is more your cup of tea.</li>
<li><a href="https://shop.economist.com/products/the-economist-style-guide-12th-edition">English Style Guide — Economist</a><br />This surprisingly readable usage guide is based on the style book given to all journalists at The Economist. The online version offers up hints on how to use metaphors, punctuation, figures, hyphens, and so on.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cb7b583b-e3bc-4b56-a37f-8ad5fb1bed0e/style-guide.png" /></p>
Craft The Perfect Heading
<p>Guess what? Most people are only going to read your heading before deciding whether to read on or click away. Dramatically boost your results by getting it right.</p>
<ul>
<li><a href="https://copyblogger.com/trigger-words/">50 Trigger Words and Phrases for Powerful Multimedia Content</a><br />A super handy list of words that grab attention and push buttons. Perfect for hard-hitting headings.</li>
<li><a href="https://copyblogger.com/magnetic-headlines/">How To Write Magnetic Headlines</a><br />Another free ebook from the Copyblogger team, this time on writing ‘magnetic’ headings.</li>
<li><a href="https://coursehope.com/shop/carl-galletti-2001-greatest-headlines-ever-written/">2001 Greatest Headlines Ever Written</a><br />Think of this great book as a giant swipe file of hit headlines from across the industries.</li>
<li><a href="https://copyblogger.com/5-simple-ways-to-open-your-blog-post-with-a-bang/">5 Simple Ways to Open Your Blog Post With a Bang</a><br />So you have an awesome heading. Then what? Next in order and rank comes the opening paragraph. Check out this piece to make sure the energy doesn’t fizzle out.</li>
</ul>
Cram With Easy Online Copywriting Guides
<ul>
<li><a href="https://copyblogger.com/copywriting-101/">Copywriting 101: An Introduction to Copywriting</a><br />This free e-book from the Copyblogger team is designed to get you up and running with the copywriting basics in ten easy lessons. Afterwards, you’ll get recommendations for professional copywriting training, plus links to tutorials on SEO copywriting and writing killer headlines.</li>
<li><a href="https://www.crazyegg.com/blog/copywriting/">Copywriting 101: The Beginner’s Guide to Copy</a><br />A quick and easy beginner’s guide.</li>
</ul>
Get Guidance From The Literary Greats
<p>Now, I’ve already mentioned that copywriting is a completely different animal from literary writing. But we can still learn a trick or two from great fiction. The writers below in particular have had a marked influence on modern writing and their lessons hold true for writing effective copy.</p>
<ul>
<li><a href="https://www.writingclasses.com/toolbox/tips-masters/george-orwell-6-questions-6-rules">George Orwell’s tips on better writing</a></li>
<li><a href="https://www.positivityblog.com/stephen-kings-top-7-tips-for-becoming-a-better-writer">Stephen King’s Top 7 Tips for Becoming a Better Writer</a></li>
<li><a href="https://www.pickthebrain.com/blog/art-of-writing/?">10 Writing Tips from the Masters</a></li>
<li><a href="https://copyblogger.com/ernest-hemingway-top-5-tips-for-writing-well/">Ernest Hemingway’s Top 5 Tips for Writing Well</a></li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b9596a8-fec9-4724-92ae-39bfa4573afa/hemingway-tips-for-writing.jpg" /></p>
Dip In With Bite-Sized Tips
<ul>
<li><a href="https://www.webdesignerdepot.com/2009/02/10-writing-tips-for-web-designers/">10 Writing Tips for Web Designers</a><br />Nice, succinct summary of the differences between writing for print and online.</li>
<li><a href="https://www.pickthebrain.com/blog/how-to-write-faster-better-and-easier/">How to Write Faster, Better, and Easier</a><br />Not strictly aimed at copywriters but still a good overview of the steps in the writing process. Highlights the importance of every stage, from planning to final proofread.</li>
<li><a href="https://whatever.scalzi.com/2006/02/12/writing-tips-for-non-writers-who-dont-want-to-work-at-writing/">Writing Tips for Non-Writers Who Don’t Want to Work at Writing</a><br />An amusingly opinionated list of ways to improve your writing.</li>
<li><a href="https://www.lifehack.org/articles/communication/a-guide-to-becoming-a-better-writer-15-practical-tips.html">A Guide to Becoming a Better Writer: 15 Practical Tips</a><br />More of the above, without the expletives…</li>
</ul>
Browse The Best Copywriting Blogs
<ul>
<li><a href="https://copyblogger.com/">CopyBlogger</a><br />Often recognized as the Bible of content creation, founder Brian Clark’s site features hundreds of insightful and easy-to-read articles on all things content related. If you only read one blog, this should be it.</li>
<li><a href="https://www.problogger.net/archives/category/writing-content/">Problogger</a><br />Lots of useful stuff from Darren Rowse for anyone with a blog to write, including how to add income streams.</li>
<li><a href="https://www.copywriting.com/">CopyWriting</a><br />This easy-to-navigate site offers up the Trinity — a copywriting blog, copywriting services and training. Browse the blog for articles that communicate valuable tips clearly and quickly. This team practises what they preach.</li>
<li><a href="https://moz.com/blog/category/seo-copywriting">SEO Copywriting — Moz</a><br />Pop over to the MOZ blog for a deep dive into SEO copywriting and check out their free tutorials.</li>
<li><a href="https://www.honeycopy.com/copywritingblog">Honey Copy</a><br />How could we not include HoneyCopy and their words that ‘read like poetry and sell like Ogilvy’? Inspirational pieces on advertising, writing, creativity and life.</li>
<li><a href="https://menwithpens.ca/">Men with Pens</a><br />A regularly updated blog with an almost overwhelming amount of useful information for writers, freelancers and entrepreneurs. </li>
</ul>
<p>Enjoy the Jack Sparrow quote on the homepage:</p>
<blockquote>“I think we’ve all arrived at a very special place. Spiritually, ecumenically, grammatically.”<br /><br />— Captain Jack Sparrow</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/26ad47a3-1007-43d6-80b5-1e5c37e2a8ba/menwithpens-website.png" /></p>
Read Books (Sort Of)
<ul>
<li><a href="https://www.shortform.com/">Shortform — The World’s Best Book Summaries</a><br />So many books, so little time. The team at Shortform has done a great job of summarising popular works of non-fiction so you can download the key messages fast. Sign up for the free trial and check out Ogilvy on Advertising, Influence: The Psychology of Persuasion and Made to Stick.</li>
<li><a href="https://www.amazon.co.uk/How-Make-Your-Advertising-Money-ebook/dp/B083C548ZZ/ref=sr_1_1?keywords=john+caples&amp;qid=1626765153&amp;sr=8-1">How to Make Your Advertising Make Money eBook</a><br />A classic from copywriter John Caples, the man behind spilt testing. Kindle edition.</li>
<li><a href="https://morgancrozier.com/boron-letters/">All Of Gary Halbert’s Boron Letters From Prison</a><br />If you’d like your copywriting tips wrapped up with life advice and personal anecdotes, you might enjoy the Boron letters. Copywriter Gary Halbert wrote them to his son while in prison.</li>
<li><a href="https://www.amazon.com/Copywriters-Handbook-Step-Step-Writing-ebook/dp/B07S7L68NH/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;qid=&amp;sr=">The Copywriter’s Handbook: A Step-By-Step Guide To Writing Copy That Sells</a><br />Considered by many to be the copywriting guide, this book is exactly what it claims to be — a clear and comprehensive step-by-step guide to writing great copy.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3b10953-b3d4-4fc8-9e73-96ca7b686bd2/copywriters-handbook.png" /></p>
Hack With Handy Tools
<ul>
<li><a href="https://www.onelook.com/">OneLook Dictionary Search</a><br />More than 13.5 million words in more than 1024 online dictionaries are indexed by the OneLook search engine. You can find, define, and translate words all at one site.</li>
<li><a href="https://www.verbix.com/languages/english.html">Verbix</a><br />This English conjugator will help you to determine how to use verbs in the proper tense.</li>
<li><a href="https://www.thesaurus.com/">Synonyms and Antonyms of Words</a><br />Can’t think of quite the right word? Search synonyms to avoid repetition and capture the right tone. Hazard warning: do not be tempted by the big words you may find here!</li>
<li><a href="https://www.semrush.com/blog/seo-copywriting/">Top 10 SEO Copywriting Tips</a><br />This piece from Semrush combines tips and a list of tools for SEO copywriting.</li>
<li><a href="https://wordcounter.net/">WordCounter</a><br />This tool helps you find out the reading time so you can share it with your reader and get a ranking of the most frequently used words. Use it to make sure you’re using enough keywords to boost your SEO or simply to spot words you overuse and correct unnecessary repetition.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d16c1154-f47c-4d4a-bcc0-e5e931f4c5c7/wordcounter-screenshot.png" /></p>
Keep Learning
<ul>
<li><a href="https://www.udemy.com/">Udemy</a><br />If your budget is restrictive but you want to dip your toes into the world of copywriting courses, check out Udemy. They have a wide range of low-cost and even free tutorials available on demand. Do check the reviews to make sure it’s what you’re looking for.</li>
<li><a href="https://www.thegilesacademy.com/courses/">The Giles Academy</a><br />If you’re serious about copywriting, we recommend working closely with a professional team. The courses at The Giles Academy offer different levels for different needs. Opt for Pro level to get individual feedback from a professional copywriter plus certification.</li>
</ul>
<blockquote>There’s a <strong>special offer for Smashing Magazine readers</strong>. Use the code <code>40OFF</code> at checkout to get 40% off!</blockquote>

Power Up Your Productivity
<p>It’s easy for the cold tendrils of inaction to creep in when faced with a blank page. But copywriters work to deadlines and don’t have the luxury of waiting for the muse to appear.</p>
<blockquote>“My favourite part of the writing process is cleaning the apartment.”</blockquote>

<p>Here are a few tips and tricks to kick writer’s block to the curb:</p>
<ul>
<li><a href="https://copyblogger.com/writer-productivity-hacks/">21 Productivity Hacks from 21 Prolific Writers</a><br />More from the Copyblogger team. Can you tell we’re fans?</li>
<li><a href="https://www.thecreativepenn.com/productivewriter/">Productivity For Writers: 5 Ways To Become More Productive</a><br />Practical tips, from scheduling to accountability</li>
<li><a href="https://www.executiveadvantage.co/resource/eugene-schwartz">Eugene Schwartz’ 33.33 Minute Rule — How To Get Shit Done</a><br />My favourite way to beat procrastination. I’m pretty sure my mother actually came up with this one, but here’s a refined version from Eugene Shwartz (one of the highest paid copywriters ever).</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b79220f5-8548-4f9c-b872-2880dab89abc/writer-productivity-hacks.jpg" /></p>
Get It Done For You
<p>If you’re still working on your copywriting skills, but need some copy urgently, there’s plenty of support out there. For freelance writers to suit a range of budgets, make sure to visit <a href="https://www.upwork.com/">Upwork™</a> and <a href="https://www.fivver.com">Fivver.com</a>, and if you’d like the professional support of an experienced team, you’re always welcome to reach out to us at the <a href="https://www.gilesagency.com/">Giles Agency</a>.</p>
<p>That’s it for now. Do you have any resource or tool to add to the list? We’d love to know! Be sure to pop your favourite resources in the comments below.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:35;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:51:"How To Build An Amazon Product Scraper With Node.js";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:76:"https://smashingmagazine.com/2021/10/building-amazon-product-scraper-nodejs/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:76:"https://smashingmagazine.com/2021/10/building-amazon-product-scraper-nodejs/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Thu, 28 Oct 2021 11:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:256:"The wealth of data that Amazon holds can make a huge difference when you’re designing a product or hunting for a bargain. But, how can a developer get that data? Simple, by using a web scraper. Here’s how to build your data extraction bot with Node.js.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Robert Sfichi)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:159:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/069a1796-0f8d-4936-bfc0-4aa988ef0594/building-amazon-product-scraper-nodejs.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:21678:"<p>Have you ever been in a position where you need to intimately know the market for a particular product? Maybe you’re launching some software and need to know how to price it. Or perhaps you already have your own product on the market and want to see which features to add for a competitive advantage. Or maybe you just want to buy something for yourself and want to make sure you get the best bang for your buck.</p>
<p>All these situations have one thing in common: <strong>you need accurate data to make the correct decision</strong>. Actually, there’s another thing they share. All scenarios can benefit from the use of a web scraper.</p>
<p>Web scraping is the practice of extracting large amounts of web data through the use of software. So, in essence, it’s a way to automate the tedious process of hitting ‘copy’ and then ‘paste’ 200 times. Of course, a bot can do that in the time it took you to read this sentence, so it’s not only less boring but a lot faster, too.</p>
<p>But the burning question is: <strong>why would someone want to scrape Amazon pages?</strong></p>
<p>You’re about to find out! But first of all, I’d like to make something clear right now — while the act of scraping publicly available data is legal, Amazon has some measures to prevent it on their pages. As such, I urge you always to be mindful of the website while scraping, take care not to damage it, and follow ethical guidelines.</p>
<p><strong>Recommended Reading</strong>: <em>“<a href="https://www.smashingmagazine.com/2021/03/ethical-scraping-dynamic-websites-nodejs-puppeteer/?_ga=2.15642294.1444307489.1635259323-795034014.1634556544">The Guide To Ethical Scraping Of Dynamic Websites With Node.js And Puppeteer</a>” by Andreas Altheimer</em></p>
Why You Should Extract Amazon Product Data
<p>Being the largest online retailer on the planet, it’s safe to say that if you want to buy something, you can probably get it on Amazon. So, it goes without saying just how big of a data treasure trove the website is.</p>
<p>When scraping the web, your primary question should be what to do with all that data. While there are many individual reasons, it boils down to two prominent use cases: optimizing your products and finding the best deals.</p>
<p>Let’s start with the first scenario. Unless you’ve designed a truly innovative new product, the chances are that you can already find something at least similar on Amazon. Scraping those product pages can net you invaluable data such as:</p>
<ul>
<li><strong>The competitors’ pricing strategy</strong><br />So, that you can adjust your prices to be competitive and understand how others handle promotional deals;</li>
<li><strong>Customer opinions</strong><br />To see what your future client base cares about most and how to improve their experience;</li>
<li><strong>Most common features</strong><br />To see what your competition offers to know which functionalities are crucial and which can be left for later.</li>
</ul>
<p>In essence, Amazon has everything you need for a deep market and product analysis. You’ll be better prepared to design, launch, and expand your product lineup with that data.</p>
<p>The second scenario can apply to both businesses and regular people. The idea is pretty similar to what I mentioned earlier. You can scrape the prices, features, and reviews of all the products you could choose, and so, you’ll be able to pick the one that offers the most benefits for the lowest price. After all, who doesn’t like a good deal? </p>
<p>Not all products deserve this level of attention to detail, but it can make a massive difference with expensive purchases. Unfortunately, while the benefits are clear, many difficulties go along with scraping Amazon.</p>
The Challenges Of Scraping Amazon Product Data
<p>Not all websites are the same. As a rule of thumb, the more complex and widespread a website is, the harder it is to scrape it. Remember when I said that Amazon was the most prominent e-commerce site? Well, that makes it both extremely popular and reasonably complex.</p>
<p>First off, Amazon knows how scraping bots act, so the website has countermeasures in place. Namely, if the scraper follows a predictable pattern, sending requests at fixed intervals, faster than a human could or with almost identical parameters, Amazon will notice and block the IP. Proxies can solve this problem, but I didn’t need them since we won’t be scraping too many pages in the example.</p>
<p>Next, Amazon deliberately uses varying page structures for their products. That is to say, that if you inspect the pages for different products, there’s a good chance that you’ll find significant differences in their structure and attributes. The reason behind this is quite simple. You need to <strong>adapt your scraper’s code for a specific system</strong>, and if you use the same script on a new kind of page, you’d have to rewrite parts of it. So, they’re essentially making you work more for the data.</p>
<p>Lastly, Amazon is a vast website. If you want to gather large amounts of data, running the scraping software on your computer might turn out to take way too much time for your needs. This problem is further consolidated by the fact that going too fast will get your scraper blocked. So, if you want loads of data quickly, you’ll need a truly powerful scraper.</p>
<p>Well, that’s enough talk about problems, let’s focus on solutions!</p>
How To Build A Web Scraper For Amazon
<p>To keep things simple, we’ll take a step-by-step approach to writing the code. Feel free to work in parallel with the guide.</p>
<h3>Look for the data we need</h3>
<p>So, here’s a scenario: I’m moving in a few months to a new place, and I’ll need a couple of new shelves to hold books and magazines. I want to know all my options and get as good of a deal as I can. So, let’s go to the Amazon market, search for “shelves”, and see what we get.</p>
<p>The URL for this search and the page we’ll be scraping is <a href="https://www.amazon.com/s?crid=36QNR0DBY6M7J&amp;k=shelves&amp;ref=glow_cls&amp;refresh=1&amp;sprefix=s%2Caps%2C309">here</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/24b88181-3bb5-4c72-8ad7-d7f6e2657d9d/2-building-amazon-product-scraper-nodejs.png" /></p>
<p>Ok, let’s take stock of what we have here. Just by glancing at the page, we can get a good picture about:</p>
<ul>
<li>how the shelves look;</li>
<li>what the package includes;</li>
<li>how customers rate them;</li>
<li>their price;</li>
<li>the link to the product;</li>
<li>a suggestion for a cheaper alternative for some of the items.</li>
</ul>
<p>That’s more than we could ask for!</p>
<h3>Get the required tools</h3>
<p>Let’s ensure we have all the following tools installed and configured before continuing to the next step.</p>
<ul>
<li><strong>Chrome</strong><br />We can download it from <a href="https://support.google.com/chrome/answer/95346?co=GENIE.Platform%3DDesktop&amp;hl=en">here</a>.</li>
<li><strong>VSCode</strong><br />Follow the instructions on <a href="https://code.visualstudio.com/docs/introvideos/basics">this page</a> to install it on your specific device.</li>
<li><strong>Node.js</strong><br />Before starting using Axios or Cheerio, we need to install Node.js and the Node Package Manager. The easiest way to install Node.js and NPM is to get one of the installers from the <a href="https://nodejs.org/en/download/">Node.Js official source</a> and run it.</li>
</ul>
<p>Now, let’s create a new NPM project. Create a new folder for the project and run the following command:</p>
<pre><code>npm init -y</code></pre>

<p>To create the web scraper, we need to install a couple of dependencies in our project:</p>
<ul>
<li><a href="https://cheerio.js.org/">Cheerio</a><br />An open-source library that helps us extract useful information by parsing markup and providing an API for manipulating the resulting data. Cheerio allows us to select tags of an HTML document by using selectors: <code>$("div")</code>. This specific selector helps us pick all <code>&lt;div&gt;</code> elements on a page. To install Cheerio, please run the following command in the projects’ folder:</li>
</ul>
<pre><code>npm install cheerio</code></pre>

<ul>
<li><a href="https://www.npmjs.com/package/axios">Axios</a><br />A JavaScript library used to make HTTP requests from Node.js. </li>
</ul>
<pre><code>npm install axios</code></pre>

<h3>Inspect the page source</h3>
<p>In the following steps, we will learn more about how the information is organized on the page. The idea is to get a better understanding of what we can scrape from our source.</p>
<p>The developer tools help us interactively explore the website’s Document Object Model (DOM). We will use the developer tools in Chrome, but you can use any web browser you’re comfortable with.</p>
<p>Let’s open it by right-clicking anywhere on the page and selecting the “Inspect” option:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d89a036c-82a9-4fc5-86de-b63dbd1d0cc5/1-building-amazon-product-scraper-nodejs.png" /></p>
<p>This will open up a new window containing the source code of the page. As we have said before, we are looking to scrape every shelf’s information.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c068c4bd-32c5-4ced-b9cd-a71bca793d2a/3-building-amazon-product-scraper-nodejs.png" /></p>
<p>As we can see from the screenshot above, the containers that hold all the data have the following classes:</p>
<pre><code>sg-col-4-of-12 s-result-item s-asin sg-col-4-of-16 sg-col sg-col-4-of-20</code></pre>

<p>In the next step, we will use Cheerio to select all the elements containing the data we need.</p>
<h3>Fetch the data</h3>
<p>After we installed all the dependencies presented above, let’s create a new <code>index.js</code> file and type the following lines of code:</p>
<div>
<pre><code>const axios = require("axios");
const cheerio = require("cheerio");

const fetchShelves = async () =&gt; {
   try {
       const response = await axios.get('<a href="https://www.amazon.com/s?crid=36QNR0DBY6M7J&amp;k=shelves&amp;ref=glow_cls&amp;refresh=1&amp;sprefix=s%2Caps%2C309')">https://www.amazon.com/s?crid=36QNR0DBY6M7J&amp;k=shelves&amp;ref=glow_cls&amp;refresh=1&amp;sprefix=s%2Caps%2C309')</a>;

       const html = response.data;

       const $ = cheerio.load(html);

       const shelves = [];

 $('div.sg-col-4-of-12.s-result-item.s-asin.sg-col-4-of-16.sg-col.sg-col-4-of-20').each((_idx, el) =&gt; {
           const shelf = $(el)
           const title = shelf.find('span.a-size-base-plus.a-color-base.a-text-normal').text()

           shelves.push(title)
       });

       return shelves;
   } catch (error) {
       throw error;
   }
};

fetchShelves().then((shelves) =&gt; console.log(shelves));</code></pre>
</div>

<p>As we can see, we import the dependencies we need on the first two lines, and then we create a <code>fetchShelves()</code> function that, using Cheerio, gets all the elements containing our products’ information from the page.</p>
<p>It iterates over each of them and pushes it to an empty array to get a better-formatted result.</p>
<p>The <code>fetchShelves()</code> function will only return the product’s title at the moment, so let’s get the rest of the information we need. Please add the following lines of code after the line where we defined the variable <code>title</code>.</p>
<div>
<pre><code>const image = shelf.find('img.s-image').attr('src')

const link = shelf.find('a.a-link-normal.a-text-normal').attr('href')

const reviews = shelf.find('div.a-section.a-spacing-none.a-spacing-top-micro &gt; div.a-row.a-size-small').children('span').last().attr('aria-label')

const stars = shelf.find('div.a-section.a-spacing-none.a-spacing-top-micro &gt; div &gt; span').attr('aria-label')

const price = shelf.find('span.a-price &gt; span.a-offscreen').text()


    let element = {
        title,
        image,
        link: <code>https://amazon.com${link}</code>,
        price,
    }

    if (reviews) {
        element.reviews = reviews
    }

    if (stars) {
        element.stars = stars
    }</code></pre>
</div>

<p>And replace <code>shelves.push(title)</code> with <code>shelves.push(element)</code>.</p>
<p>We are now selecting all the information we need and adding it to a new object called <code>element</code>. Every element is then pushed to the <code>shelves</code> array to get a list of objects containing just the data we are looking for. </p>
<p>This is how a <code>shelf</code> object should look like before it is added to our list:</p>
<div>
<pre><code>  {
    title: 'SUPERJARE Wall Mounted Shelves, Set of 2, Display Ledge, Storage Rack for Room/Kitchen/Office - White',
    image: '<a href="https://m.media-amazon.com/images/I/61fTtaQNPnL._AC_UL320_.jpg'">https://m.media-amazon.com/images/I/61fTtaQNPnL._AC_UL320_.jpg'</a>,
    link: '<a href="https://amazon.com/gp/slredirect/picassoRedirect.html/ref=pa_sp_btf_aps_sr_pg1_1?ie=UTF8&amp;adId=A03078372WABZ8V6NFP9L&amp;url=%2FSUPERJARE-Mounted-Floating-Shelves-Display%2Fdp%2FB07H4NRT36%2Fref%3Dsr_1_59_sspa%3Fcrid%3D36QNR0DBY6M7J%26dchild%3D1%26keywords%3Dshelves%26qid%3D1627970918%26refresh%3D1%26sprefix%3Ds%252Caps%252C309%26sr%3D8-59-spons%26psc%3D1&amp;qualifier=1627970918&amp;id=3373422987100422&amp;widgetName=sp_btf'">https://amazon.com/gp/slredirect/picassoRedirect.html/ref=pa_sp_btf_aps_sr_pg1_1?ie=UTF8&amp;adId=A03078372WABZ8V6NFP9L&amp;url=%2FSUPERJARE-Mounted-Floating-Shelves-Display%2Fdp%2FB07H4NRT36%2Fref%3Dsr_1_59_sspa%3Fcrid%3D36QNR0DBY6M7J%26dchild%3D1%26keywords%3Dshelves%26qid%3D1627970918%26refresh%3D1%26sprefix%3Ds%252Caps%252C309%26sr%3D8-59-spons%26psc%3D1&amp;qualifier=1627970918&amp;id=3373422987100422&amp;widgetName=sp_btf'</a>,
    price: '$32.99',
    reviews: '6,171',
    stars: '4.7 out of 5 stars'
  }</code></pre>
</div>

<h3>Format the data</h3>
<p>Now that we have managed to fetch the data we need, it’s a good idea to save it as a <code>.CSV</code> file to improve readability. After getting all the data, we will use the <code>fs</code> module provided by Node.js and save a new file called <code>saved-shelves.csv</code> to the project’s folder. Import the <code>fs</code> module at the top of the file and copy or write along the following lines of code:</p>
<div>
<pre><code>let csvContent = shelves.map(element =&gt; {
   return Object.values(element).map(item =&gt; <code>"${item}"</code>).join(',')
}).join("\n")

fs.writeFile('saved-shelves.csv', "Title, Image, Link, Price, Reviews, Stars" + '\n' + csvContent, 'utf8', function (err) {
   if (err) {
     console.log('Some error occurred - file either not saved or corrupted.')
   } else{
     console.log('File has been saved!')
   }
})</code></pre>
</div>

<p>As we can see, on the first three lines, we format the data we have previously gathered by joining all the values of a shelve object using a comma. Then, using the <code>fs</code> module, we create a file called <code>saved-shelves.csv</code>, add a new row that contains the column headers, add the data we have just formatted and create a callback function that handles the errors.</p>
<p>The result should look something like this:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8de8902c-3c52-41f7-ac93-90be6f68dd52/5-building-amazon-product-scraper-nodejs.png" /></p>
Bonus Tips!
<h3>Scraping Single Page Applications</h3>
<p>Dynamic content is becoming the standard nowadays, as websites are more complex than ever before. To provide the best user experience possible, <strong>developers must adopt different load mechanisms for dynamic content</strong>, making our job a little more complicated. If you don’t know what that means, imagine a browser lacking a graphical user interface. Luckily, there is <a href="https://github.com/puppeteer/puppeteer">✨Puppeteer✨</a> — the magical Node library that provides a high-level API to control a Chrome instance over the DevTools Protocol. Still, it offers the same functionality as a browser, but it must be controlled programmatically by typing a couple of lines of code. Let’s see how that works.</p>
<p>In the previously created project, install the Puppeteer library by running <code>npm install puppeteer</code>, create a new <code>puppeteer.js</code> file, and copy or write along the following lines of code:</p>
<pre><code>const puppeteer = require('puppeteer')

(async () =&gt; {
 try {
   const chrome = await puppeteer.launch()
   const page = await chrome.newPage()
   await page.goto('https://www.reddit.com/r/Kanye/hot/')
   await page.waitForSelector('.rpBJOHq2PR60pnwJlUyP0', { timeout: 2000 })

   const body = await page.evaluate(() =&gt; {
     return document.querySelector('body').innerHTML
   })

   console.log(body)

   await chrome.close()
 } catch (error) {
   console.log(error)
 }
})()</code></pre>

<p>In the example above, we create a Chrome instance and open up a new browser page that is required to go to <a href="https://www.reddit.com/r/Kanye/hot/">this link</a>. In the following line, we tell the headless browser to wait until the element with the class <code>rpBJOHq2PR60pnwJlUyP0</code> appears on the page. We have also specified <strong>how long the browser should wait</strong> for the page to load (2000 milliseconds).</p>
<p>Using the <code>evaluate</code> method on the <code>page</code> variable, we instructed Puppeteer to execute the Javascript snippets within the page’s context just after the element was finally loaded. This will allow us to access the page’s HTML content and return the page’s body as the output. We then close the Chrome instance by calling the <code>close</code> method on the <code>chrome</code> variable. The resulted work should consist of all the dynamically generated HTML code. This is how Puppeteer can help us <strong>load dynamic HTML content</strong>.</p>
<p>If you don’t feel comfortable using Puppeteer, note that there are a couple of alternatives out there, like NightwatchJS, NightmareJS, or CasperJS. They are slightly different, but in the end, the process is pretty similar.</p>
<h3>Setting <code>user-agent</code> Headers</h3>
<p><code>user-agent</code> is a request header that tells the website you are visiting about yourself, namely your browser and OS. This is used to optimize the content for your set-up, but websites also use it to identify bots sending tons of requests — even if it changes IPS.</p>
<p>Here’s what a <code>user-agent</code> header looks like:</p>
<div>
 <pre><code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36
</code></pre>
</div>

<p>In the interest of not being detected and blocked, you should regularly change this header. Take extra care not to send an empty or outdated header since this should never happen for a run-fo-the-mill user, and you’ll stand out. </p>
<h3>Rate Limiting</h3>
<p>Web scrapers can gather content extremely fast, but you should avoid going at top speed. There are two reasons for this:</p>
<ol>
<li><strong>Too many requests</strong> in short order can slow down the website’s server or even bring it down, causing trouble for the owner and other visitors. It can essentially become a DoS attack.</li>
<li>Without rotating proxies, it’s akin to loudly announcing that <strong>you’re using a bot</strong> since no human would send hundreds or thousands of requests per second.</li>
</ol>
<p>The solution is to introduce a delay between your requests, a practice called “rate limiting”. (<em>It’s pretty simple to implement, too!</em>)</p>
<p>In the Puppeteer example provided above, before creating the <code>body</code> variable, we can use the <code>waitForTimeout</code> method provided by Puppeteer to wait a couple of seconds before making another request:</p>
<pre><code>await page.waitForTimeout(3000);</code></pre>

<p>Where <code>ms</code> is the number of seconds you would want to wait.</p>
<p>Also, if we would want to do the same thig for the axios example, we can create a promise that calls the <code>setTimeout()</code> method, in order to help us wait for our desired number of miliseconds:</p>
<pre><code>fetchShelves.then(result =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; resolve(result), 3000)))</code></pre>

<p>In this way, you can avoid putting too much pressure on the targeted server and also, bring a more human approach to web scraping.</p>
Closing Thoughts
<p>And there you have it, a step-by-step guide to creating your own web scraper for Amazon product data! But remember, this was just one situation. If you’d like to scrape a different website, you’ll have to make a few tweaks to get any meaningful results.</p>
<h3>Related Reading</h3>
<p>If you’d still like to see more web scraping in action, here is some useful reading material for you:</p>
<ul>
<li>“<a href="https://www.webscrapingapi.com/the-ultimate-guide-to-web-scraping-with-javascript-and-node-js/">The Ultimate Guide to Web Scraping with JavaScript and Node.Js</a>,” Robert Sfichi</li>
<li>“<a href="https://www.webscrapingapi.com/web-scraping-with-a-headless-browser-using-puppeteer-and-node-js/">Advanced Node.JS Web Scraping with Puppeteer</a>,” Gabriel Cioci</li>
<li>“<a href="https://www.webscrapingapi.com/python-web-scraping/">Python Web Scraping: The Ultimate Guide to Building Your Scraper</a>,” Raluca Penciuc</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:36;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:34:"Eye-Tracking In Mobile UX Research";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:69:"https://smashingmagazine.com/2021/10/eye-tracking-mobile-ux-research/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:69:"https://smashingmagazine.com/2021/10/eye-tracking-mobile-ux-research/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Wed, 27 Oct 2021 10:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:291:"Thanks to technology, eye-tracking has become more accessible to UX research as it allows researchers to get insights about users ’visual attention. This article explores the latest trends in the eye-tracking market and how the methodology can be included in the UX researcher’s toolbox.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:43:"hello@smashingmagazine.com (Mariana Macedo)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:152:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3012986b-e407-4c49-8186-13a99528ef13/eye-tracking-mobile-ux-research.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:23020:"<p>The eye-tracking methodology can be extremely valuable for usability tests since it records the journey without interfering with the users’ natural behavior. Imagine, for example, that you test a prototype but discover that users are not interacting with the interface how they are supposed to. You most likely think that the buttons might be too small or you need to change the color, font, or position. As a result, you make the buttons more prominent, and still, the users are not interacting with the interface as intended.</p>
<p>After spending time and resources on improvements, you realize that the problem is not that they don’t see the buttons, but that even when they see them, they don’t know what to do with them. Utilizing an eye-tracking device, however, would help the researcher notice the lack of understanding right away. This is one example of the benefits of using eye-tracking. When the researcher can see through the user’s eyes, <strong>recognizing a usability problem sooner</strong> would save the client and developer time and money.</p>
<p>Eye-tracking provides information on how people navigate on a page and how attracted they are to visual elements on the screen, like in <a href="https://www.nngroup.com/articles/lawn-mower-pattern/">this study conducted by Nielsen Norman Group</a> which shows the pattern that people use to scan comparison tables. If you are designing an app or a website, you can test how easy and intuitive it is to complete a specific task, fill out a form, find certain information, or buy a product.</p>
Eye-Tracking Evolution
<p>The first time someone conducted a study observing the movement of the eyes was through direct observations in the 1800s. Since then, technology has evolved, and what started with naked-eye observations has become a sophisticated and accurate technology to measure eye movements.</p>
<p>Eye-tracking is nothing but new, but recent developments in technology made the methodology accessible to businesses of all sizes.</p>
<p>In the late 1990s, <a href="https://news.google.com/newspapers?id=yngVAAAAIBAJ&amp;sjid=k-sDAAAAIBAJ&amp;pg=6872,4783461&amp;dq=eye-tracking&amp;hl=en">marketing and advertising agencies saw the potential of eye-tracking for the Internet</a> and started using the technology to analyze how people consume content online. One of the few advertising companies that used eye-tracking back then was EURO RSCG/DSW Partners. They used eye-tracking to measure visual attention on banners, animated graphics, and navigational tools in websites. Before those studies, web pages were designed as printed media, <a href="https://mashable.com/feature/yahoo-history">with columns and big blocks of text</a>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df5a937e-b95d-48a5-899a-d0af61761bba/5-eye-tracking-mobile-ux-research.png" /></p>
<p>It was the implementation of eye-tracking that provided useful insights that helped shape the work of web designers.</p>
<p>For instance, <a href="https://www.nngroup.com/articles/f-shaped-pattern-reading-web-content-discovered/">Nielsen’s research</a> conducted in 2006 showed that people read content on the Internet in an <strong>F-shaped pattern</strong>. Users tend to start reading from top/left. Next, they move to the top/right of the page, skimming through the content that stands out, such as images and subheadings. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2368c14-7e47-471b-b092-b3ea5ff09fe9/2-eye-tracking-mobile-ux-research.png" /></p>
<p>Nowadays, hardware and software are designed to conduct eye-tracking studies for <a href="https://www.oculid.com/oculid-blog/eye-tracking-in-packaging-research-case-study">marketing</a>, <a href="https://www.oculid.com/oculid-blog/how-to-use-smartphone-eye-tracking-on-ux-research-case-study">UX</a>, <a href="https://ai.googleblog.com/2021/05/accelerating-eye-movement-research-for.html">psychological and medical research</a>, <a href="https://techcrunch.com/2017/02/19/unlocking-the-potential-of-eye-tracking-technology/">gaming</a>, and several other use cases.</p>
<p>In marketing, eye-tracking is used to test advertising, product placement, and packaging, such as this use case that shows the <strong>visual attention</strong> that different smoothie brands receive from shoppers:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46519698-93c6-450c-b6b3-9eb5dd284c5e/9-eye-tracking-mobile-ux-research.png" /></p>
<p>Another area that has been showing huge potential is eye-tracking in the context of <strong>virtual reality</strong>. VR headsets use eye-tracking to see where the person is really looking and make the experience significantly more immersive. For PC gaming, eye-tracking allows the player to just look at the object that they want to interact with and press a button instead of using the mouse or controller to guide them to the place the player has their eyes on. </p>
<p>The eye-tracking market is <a href="https://www.grandviewresearch.com/press-release/global-eye-tracking-market">expected to be worth USD 1.75 billion by 2025</a>, being present in different segments and industries. </p>
How Eye-Tracking Works
<p>To incorporate eye-tracking in your research, it is necessary to understand how this methodology works. The researcher uses an eye tracker, namely a device designed to measure the eyes’ movements (usually glasses), or software integrated with a webcam or selfie camera of the smartphone, to conduct a test. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e88e1813-f083-4e9c-af15-701aed14c223/3-eye-tracking-mobile-ux-research.jpg" /></p>
<p>Usually, researchers select areas of the stimulus to be displayed, namely Area of Interest (AOI). In usability, it can be a filter function in the app or an advertisement on the website, for example. The AOI will determine what areas you will calculate metrics for. Besides the AOI, two concepts are extensively used in eye-tracking: </p>
<ol>
<li><strong>Fixation</strong><br />When the person’s gaze stops moving and rests focused on one object.</li>
<li><strong>Saccade</strong><br />The movement of the eyes between the fixations. </li>
</ol>
<p>After defining the AOIs and designing the test, it is time for the participants to join the study and interact with your app or website. The metrics and how they will be shown depending on the eye-tracking tool you choose. It also ranges from studying individual recordings to gather data about the <strong>behavior of specific users</strong> to quantitatively comparing the number of users who looked at an AOI, the amount of time that they spent on it, and the speed with which it is first detected.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/395ea7a5-79ee-4b57-9f28-54a23084fc6d/8-eye-tracking-mobile-ux-research.png" /></p>
<p>By visualizing the gaze path on video recordings or heatmaps, you can see where the person is looking, for how long, and get actionable data. For example, a long time for the user to first fixate on the AOI (more than 0.15 seconds) can indicate that the AOI should be positioned elsewhere. Or conversely, a long time looking at an AOI can suggest that either it was not clear for the user what to do with that information or simply that the AOI was engaging enough to get the user’s attention for a long time. The <strong>data needs to be analyzed in context</strong> so that it can be interpreted correctly.</p>
<p>That is why eye-tracking can and should be combined with other methodologies such as surveys, Thinking Aloud (when users verbalize what goes through their mind while performing a task during a usability test), and click rate to provide valuable insights for the researcher.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a2e6872-9acb-478c-8ff4-f6a243b52f73/4-eye-tracking-mobile-ux-research.png" /></p>
Eye-Tracking For UX Research
<p>Although some information provided by eye-tracking could be obtained with <a href="https://www.crazyegg.com/blog/click-heatmap/">click heatmaps</a> (visual representation using thermal imaging that shows where people are clicking) or surveys, eye-tracking can also capture data that the participant does not remember, does not describe, or interacts with only visually, without tapping or clicking on it. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea92104e-390f-4ed9-9fc4-6f6ef444d064/6-eye-tracking-mobile-ux-research.png" /></p>
<p>With eye-tracking, product designers can get actionable data about how the users perceive and interact with the UI, on both desktop and mobile. However, <strong>the price of eye-tracking</strong> used to be much higher than heatmaps, as measuring users’ gaze required special hardware to be used in-lab. However, conducting eye-tracking studies became considerably cheaper recently, with software that can transform any webcam or selfie camera of the smartphone into an eye tracker.</p>
<p>Next, we will focus on usability in mobile research and present a use case that shows how UX teams can incorporate eye-tracking in their research toolbox. </p>
Mobile UX Research
<p>Incorporating eye-tracking in mobile UX research was complicated until very recently due to the technological struggle to measure eyes’ movements on the smartphone. Web designers worked until recently with a desktop-first approach. <a href="https://www.interaction-design.org/literature/topics/mobile-ux-design">Since 2014</a>, however, mobile users have been gaining more and more importance. Designing for mobile is not only about the <strong>size of the screen</strong> but also about the <strong>users’ behavior</strong>. When using smartphones, <a href="https://www.interaction-design.org/literature/topics/mobile-ux-design">people are usually distracted, have shorter attention spans, or want to perform a task quickly</a> — such as buying a ticket or finding an address. For this reason, doing UX research for mobile nowadays is <a href="https://hbr.org/2017/09/the-surprising-power-of-online-experiments">essential to many companies</a>. </p>
<p>Eye trackers, the glasses used for most eye-tracking studies, are usually not as precise to track the small screens of smartphones. Therefore, it needed elaborate synchronization of the screen content and the eye-tracking data, resulting in a <strong>complex study design and analysis</strong>. At the same time, using the webcam does not allow the user to test the app or website in a natural setting; after all, the users usually interact with mobile apps and websites on the smartphone. However, conducting online experiments is a fairly inexpensive way to develop better websites, apps, services, and strategies and make decisions not based on intuition, but on scientific data.</p>
<p><a href="https://hbr.org/2017/09/the-surprising-power-of-online-experiments">Companies such as Amazon, Facebook, Google, and Microsoft conduct more than 10,000 controlled online tests annually each</a>: they know the investment pays off. Bing also benefited from testing and made revenue-related improvements that resulted in a 10% to 25% increase in revenue per search every year. </p>
<p>Luckily, technology has evolved, from eye trackers and webcams to mobile software, to now enable the opportunity to conduct eye-tracking tests for <strong>mobile UX research directly on the smartphone</strong> — with no additional hardware required. <a href="https://www.nature.com/articles/s41467-020-18360-5">Software-only solutions can be up to 100x more affordable than eye-tracker studies</a> and allow researchers to conduct tests with participants from all over the world and <a href="https://www.oculid.com/oculid-blog/how-to-use-smartphone-eye-tracking-on-ux-research-case-study">get accurate results immediately</a> that will help them draw strategies for their digital product.</p>
How To Conduct An Eye-Tracking Study
<p>An eye-tracking study always begins with a question. Let’s say, for example, that you are launching an e-commerce app and want to find out if people see the sales banner placed on the main page. Based on this well-thought research question, you can formulate a hypothesis that reflects your assumptions regarding the users’ behavior, such as “using a photo of the products on sale will drive more conversion”. This will enable you to <strong>test predictions</strong> and make it easier to analyze the results. After defining assumptions you select the essential metrics to track and measure whether your assumptions indeed reflect the users’ behavior. Next, you create the tasks and the visual stimuli the participants will interact with.</p>
<p>It is very productive for web and mobile eye-tracking research to conduct studies with different versions of your website, application or advertisement, and competitors’ websites, known as A/B testing. By running <strong>comparative studies</strong>, you will be able to evaluate which elements work best. Once you have designed the test and implemented the study in the testing tool of your choice, it is time to think about the people who will join your study. </p>
<p>For studies where researchers will analyze only <strong>heatmaps</strong>, it is necessary to recruit at least 30 participants. Although heatmaps are visually appealing and tend to be more popular among researchers, they require many participants to generate more satisfactory results. You can also conduct smaller studies, watching the individual video replays while listening to what they say with the thinking aloud method. For this kind of study, you should have at least six participants joining. </p>
<p>The study can be conducted in-lab or remotely, moderated or unmoderated. <strong>In-lab studies</strong> demand more time and resources and it is limited to participants who can join the study in person. All the eye-tracking devices and software must be provided in the lab and the study must be monitored by researchers and facilitators.</p>
<p><strong>Remote studies</strong> can be conducted with participants from all over the world, which suits companies who have clients located in different cities or even countries. Remote studies can be done unmoderated with the help of tools that can collect and save the data. All the researcher needs to do is to send out the invitation and relax while the technology does all the work. </p>
<p>The metrics available in eye-tracking can vary from tool to tool. Most tools offer qualitative as well as some quantitative results. What is more relevant to you highly <strong>depends on the type of study</strong> that you run. Some of the most used metrics to measure eyes’ movements quantitatively are <em>Time to first Fixation</em>, <em>First Fixation Duration</em>, <em>Dwell Time</em>, <em>Revisits</em>, amongst many others.</p>
Eye-Tracking Insights
<p>A study conducted by Eye Square, a market research institute, using their in-real context testing and Oculid’s smartphone eye-tracking technology, shows that <strong>remote eye-tracking research</strong> conducted on smartphones can give insightful data for UX teams.</p>
<p><a href="https://www.oculid.com/oculid-blog/how-to-use-smartphone-eye-tracking-on-ux-research-case-study">The Eye Square and Oculid study</a> was based on tests done by 100 respondents across the United States to find out how shoppers interact with e-commerce and what are the elements that get them engaged in a product, with samples being collected during two days. Each tester was given 3 to 5 minutes to complete each test. Two UX-related scenarios were included in this study: an <strong>online shopping</strong> scenario and a scenario where <strong>advertising was tested in context</strong>.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6cf3289e-cfeb-4a62-bc89-35b185bb343c/7-eye-tracking-mobile-ux-research.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/186a9855-d03e-408e-8ab1-614f2f1a15b7/7-eye-tracking-mobile-ux-research-800w.gif" /></a>The eye-tracking study was designed on Oculid’s platform. (Source: Oculid) (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6cf3289e-cfeb-4a62-bc89-35b185bb343c/7-eye-tracking-mobile-ux-research.gif">Large preview</a>)

<p>The analysis of the study provided deep insights into what customers were doing and why, while at the same time guaranteeing their privacy. It is an automated, anonymous analysis, with <strong>full transparency for testers</strong> and compliant with the regulation in EU law General Data Protection Regulation 2016/697 (GDPR). The data is recorded only with the explicit consent of the user and deleted according to GDPR regulations.</p>
<p>Here are the findings of the two scenarios analyzed in the eye-tracking study: </p>
<h3>1. Online Shopping</h3>
<p>When examining or considering online shopping, eye-tracking shows which elements engage the consumers at first sight. Eye Square conducted an A/B test, a process in which two or more versions of a variable (page element, advertising, app) are shown to different segments of users, using Oculid’s eye-tracking technology.</p>
<p>An <a href="https://hbr.org/2017/09/the-surprising-power-of-online-experiments">A/B test is conducted</a> by having two groups interacting with two different versions of the website:</p>
<ul>
<li><code>A</code> (the control): this one confirms the hypothesis;</li>
<li><code>B</code> (the challenger): this one is a modification.</li>
</ul>
<p>The analysis showed that less than 10% of shoppers scroll down to see products that are not visible on the first page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2a3a712-58ac-4d78-b9e4-30206bbd6902/1-eye-tracking-mobile-ux-research.png" /></p>
<p>The A/B test also demonstrated that consumers engage with visual triggers they already know, but also with other images that are big and clear. However, the decision-making does not limit to the visuals of the page, but it is also <strong>influenced by the content</strong>. For example, shoppers tend to spend a long time reading the <em>Product Detail Page</em>, proving the importance of having compelling copywriting on the product page.</p>
<p>The second UX scenario was an advertisement in the social media context. </p>
<h3>2. Advertising In Context</h3>
<p>In the scenario of the <em>Eye Square</em> and <em>Oculid</em> study where an ad was displayed in context, the participants first viewed an Instagram feed which, amongst other items, showed a video advertising <strong>a specific pair of headphones</strong>. Subsequently, the participants of the study were asked to shop online for a pair of headphones. Here it was not specified what type of headphones that should be. Participants were directed to the webpage of Amazon where they saw different products from this category with different brands being displayed.</p>
<p>The analysis of <em>Oculid’s</em> eye-tracking data provided by the advertisement in context revealed that the specific headphone displayed in the video advertising received <strong>more visual attention</strong> than products from the competitor brands. The advertised headphones received 2.4 seconds of visual attention as compared to 2.1 seconds from the closest competitor, even though the closest competitor was listed before.</p>
<p>This was true even though the researched product was listed as fourth in the online shopping platform, demonstrating that the advertisement contributes to getting the customers’ attention. In addition to receiving longer viewing times overall, customers of the <em>Eye Square</em> and <em>Oculid</em> study showed <strong>50% more interactions/clicks</strong> with the advertised product than with any other competing product. For UX teams, this study showcases how measuring visual attention can give information about patterns that people follow when accessing a website or an app.</p>
Conclusion
<p>Eye-tracking used to be an expensive and challenging methodology, which turned many researchers away from it and made it difficult for UX researchers to conduct mobile studies. Nowadays, smartphones have up to 50-megapixel selfie cameras and can be used as highly accurate eye trackers to conduct mobile UX research. Thanks to technology and easy integration of study design and data analysis, eye-tracking can be easily incorporated into the researchers’ toolbox.</p>
<p>Including eye-tracking in the process of usability testing can offer many benefits for UX teams. For one, it allows you to <strong>test prototypes</strong> and make changes based not only on what users say but on what they do, almost like seeing over the shoulders of the users, but in their natural environment. Also, it can provide <strong>insights about users’ behavior</strong> that will save time and money for the company. </p>
<p>The technology can be used by eye-tracking experts, but also by UX teams that are only familiar with other methodologies. Knowledge about usability testing and some reading about the main metrics of eye-tracking and how to interpret them is enough to get started and try out. Giving a chance to test this methodology can complement usability testing and take it to a higher level. </p>
<p>It is certain that not every question on mobile UX can be answered with eye-tracking alone. As mentioned before, <strong>combining different methods</strong> is recommended to get different perspectives of users’ behavior. However, the technology combined with online questionnaires, <em>Thinking Aloud</em>, interviews, and so on can offer insights about subconscious processes that affect decision-making and are not obtained through other methods.</p>
<h3>Sources</h3>
<ul>
<li><a href="https://www.interaction-design.org/literature/topics/mobile-ux-design">Mobile User Experience (UX) Design</a>, Interaction Design Foundation</li>
<li>“<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3563053/">Pioneers Of Eye Movement Research</a>,” Nicholas J Wade</li>
<li>“<a href="https://www.uxbooth.com/articles/a-brief-history-of-eye-tracking/">A Brief History Of Eye-Tracking</a>,” David Leggett</li>
<li>“<a href="https://xd.adobe.com/ideas/process/user-research/eye-tracking-and-usability/">Eye Tracking And Usability: How Does It Work?</a>” by Nick Babich</li>
<li><a href="https://www.usability.de/en/services/ux-testing-research/eyetracking.html">Eye Tracking</a>, Usability.de</li>
<li>“<a href="https://hbr.org/2017/09/the-surprising-power-of-online-experiments">The Surprising Power Of Online Experiments</a>,” Ron Kohavi &amp; Stefan Thomke</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:37;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:39:"Optimizing Next.js Applications With Nx";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:71:"https://smashingmagazine.com/2021/10/optimizing-nextjs-applications-nx/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:71:"https://smashingmagazine.com/2021/10/optimizing-nextjs-applications-nx/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Tue, 26 Oct 2021 10:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:251:"Nx is a build framework that facilitates optimization, efficient scaling of applications, and other features such as shared libraries and components. In this article, we will be looking at how we can effectively scale Next.js applications by using Nx.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:48:"hello@smashingmagazine.com (Melvin Kosisochukwu)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:154:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32b5517f-415c-43ed-98a6-70215d408f7a/optimizing-nextjs-applications-nx.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:20559:"<p>In this article, we will go through how to optimize and build a high-performance Next.js application using <a href="https://nx.dev/">Nx</a> and its rich features. We will go through how to set up an Nx server, how to add a plugin to an existing server, and the concept of a monorepo with a practical visualization.</p>
<p>If you’re a developer looking to optimize applications and create reuseable components across applications effectively, this article will show you how to quickly scale your applications, and how to work with Nx. To follow along, you will need basic knowledge of the Next.js framework and TypeScript.</p>
What Is Nx?
<p><a href="https://nx.dev/">Nx</a> is an open-source build framework that helps you architect, test, and build at any scale — integrating seamlessly with modern technologies and libraries, while providing a robust command-line interface (CLI), caching, and dependency management. Nx offers developers advanced CLI tools and plugins for modern frameworks, tests, and tools.</p>
<p>For this article, we will be focusing on how Nx works with Next.js applications. Nx provides standard tools for testing and styling in your Next.js applications, such as Cypress, Storybook, and styled-components. Nx facilitates a monorepo for your applications, creating a workspace that can hold the source code and libraries of multiple applications, allowing you to share resources between applications.</p>
Why Use Nx?
<p>Nx provides developers with a reasonable amount of functionality out of the box, including boilerplates for end-to-end (E2E) testing of your application, a styling library, and a monorepo.</p>
<p>Many advantages come with using Nx, and we’ll walk through a few of them in this section.</p>
<ul>
<li><strong>Graph-based task execution</strong><br />Nx uses distributed graph-based task execution and computation caching to speed up tasks. The system will schedule tasks and commands using a graph system to determine which node (i.e. application) should execute each task. This handles the execution of applications and optimizes execution time efficiently.</li>
<li><strong>Testing</strong><br />Nx provides preconfigured test tools for unit testing and E2E tests.</li>
<li><strong>Caching</strong><br />Nx also stores the cached project graph. This enables it to reanalyze only updated files. Nx keeps track of files changed since the last commit and lets you test, build, and perform actions on only those files; this allows for proper optimization when you’re working with a large code base.</li>
<li><strong>Dependency graph</strong><br />The visual dependency graph enables you to inspect how components interact with each other.</li>
<li><strong>Cloud storage</strong><br />Nx also provides cloud storage and GitHub integration, so that you can share links with team members to review project logs.</li>
<li><strong>Code sharing</strong><br />Creating a new shared library for every project can be quite taxing. Nx eliminates this complication, freeing you to focus on the core functionality of your app. With Nx, you can share libraries and components across applications. You can even share reusable code between your front-end and back-end applications.</li>
<li><strong>Support for monorepos</strong><br />Nx provides one workspace for multiple applications. With this setup, one GitHub repository can house the code source for various applications under your workspace.</li>
</ul>
Nx for Publishable Libraries
<p>Nx allows you to create publishable libraries. This is essential when you have libraries that you will use outside of the monorepo. In any instance where you are developing organizational UI components with Nx Storybook integration, Nx will create publishable components alongside your stories. The publishable components can compile these components to create a library bundle that you can deploy to an external registry. You would use the <code>--publishable</code> option when generating the library, unlike <code>--buildable</code>, which is used to generate libraries that are used only in the monorepo. Nx does not deploy the publishable libraries automatically; you can invoke the build via a command such as <code>nx build mylib</code> (where <code>mylib</code> is the name of the library), which will then produce an optimized bundle in the <code>dist</code>/<code>mylib</code> folder that can be deployed to an external registry.</p>
<p>Nx gives you the option to create a new workspace with Next.js as a preset, or to add Next.js to an existing workspace.</p>
<p>To create a new workspace with Next.js as a preset, you can use the following command:</p>
<pre><code>npx create-nx-workspace happynrwl \
--preset=next \
--style=styled-components \
--appName=todo</code></pre>

<p>This command will create a new Nx workspace with a Next.js app named “todo” and with <code>styled-components</code> as the styling library.</p>
<p>Then, we can add the Next.js application to an existing Nx workspace with the following command:</p>
<pre><code>npx nx g @nrwl/next:app</code></pre>

Building a Next.js and Nx Application
<p>The Nx plugin for Next.js includes tools and executors for running and optimizing a Next.js application. To get started, we need to create a new Nx workspace with <code>next</code> as a preset:</p>
<pre><code>npx create-nx-workspace happynrwl \
--preset=next \
--style=styled-components \
--appName=todo</code></pre>

<p>The code block above will generate a new Nx workspace and the Next.js application. We will get a prompt to use Nx Cloud. For this tutorial, we will select “No”, and then wait for our dependencies to install. Once that’s done, we should have a file tree similar to this:</p>
<pre><code>📦happynrwl
 ┣ 📂apps
 ┃ ┣ 📂todo
 ┃ ┣ 📂todo-e2e
 ┃ ┗ 📜.gitkeep
 ┣ 📂libs
 ┣ 📂node_modules
 ┣ 📂tools
 ┣ 📜.editorconfig
 ┣ 📜.eslintrc.json
 ┣ 📜.gitignore
 ┣ 📜.prettierignore
 ┣ 📜.prettierrc
 ┣ 📜README.md
 ┣ 📜babel.config.json
 ┣ 📜jest.config.js
 ┣ 📜jest.preset.js
 ┣ 📜nx.json
 ┣ 📜package-lock.json
 ┣ 📜package.json
 ┣ 📜tsconfig.base.json
 ┗ 📜workspace.json</code></pre>

<p>In the <code>📂apps</code> folder, we’ll have our Next.js application “todo”, with the preconfigured E2E test for the to-do app. All is this is auto-generated with the powerful Nx CLI tool.</p>
<p>To run our app, use the <code>npx nx serve todo</code> command. Once you’re done serving the app, you should see the screen below:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7e5e7aec-7c22-43c2-88f0-eca07dddd458/image-nx-home.png" /></p>
<h3>Building the API</h3>
<p>At this point, we have set up the workspace. Up next is building the CRUD API that we will use on the Next.js application. To do this, we will be using Express; to demonstrate monorepo support, we will build our server as an application in the workspace. First, we have to install the Express plugin for Nx by running this command:</p>
<pre><code>npm install --save-dev @nrwl/express</code></pre>

<p>Once that’s done, we are ready to set up our Express app in the workspace provided. To generate an Express app, run the command below:</p>
<pre><code>npx nx g @nrwl/express:application --name=todo-api --frontendProject=todo</code></pre>

<p>The command <code>nx g @nrwl/express:application</code> will generate an Express application to which we can pass additional specification parameters; to specify the name of the application, use the <code>--name</code> flag; to indicate the front-end application that will be using the Express app, pass the name of an app in our workspace to <code>--frontendProject</code>. A few other <a href="https://nx.dev/latest/node/express/application">options are available for an Express app</a>. When this is done, we will have an updated file structure in the <code>apps</code> folder with the <code>📂todo-api</code> folder added to it.</p>
<pre><code>📦happynrwl
 ┣ 📂apps
 ┃ ┣ 📂todo
 ┃ ┣ 📂todo-api
 ┃ ┣ 📂todo-e2e
 ┃ ┗ 📜.gitkeep
 …</code></pre>

<p>The <code>todo-api</code> folder is an Express boilerplate with a <code>main.ts</code> entry file.</p>
<pre><code>/**
 * This is not a production server yet!
 * This is only minimal back end to get started.
 */
import * as express from 'express';
import {v4 as uuidV4} from 'uuid';

const app = express();
app.use(express.json()); // used instead of body-parser

app.get('/api', (req, res) =&gt; {
  res.send({ message: 'Welcome to todo-api!' });
});

const port = process.env.port || 3333;
const server = app.listen(port, () =&gt; {
  console.log(`Listening at http://localhost:${port}/api`);
});
server.on('error', console.error);
</code></pre>

<p>We will be creating our routes inside this app. To get started, we will initialize an array of objects with two key-value pairs, <code>item</code> and <code>id</code>, just under the app declaration.</p>
<pre><code>/**
 * This is not a production server yet!
 * This is only minimal back end to get started.
 */
import * as express from 'express';
import {v4 as uuidV4} from 'uuid';

const app = express();
app.use(express.json()); // used instead of body-parser

let todoArray: Array&lt;{ item: string; id: string }&gt; = [
  { item: 'default todo', id: uuidV4() },
];
…</code></pre>

<p>Next up, we will set up the route to fetch all to-do lists under <code>app.get()</code>:</p>
<pre><code>…
app.get('/api', (req, res) =&gt; {
  res.status(200).json({
    data: todoArray,
  });
});
…</code></pre>

<p>The code block above will return the current value of <code>todoArray</code>. Subsequently, we will have routes for creating, updating, and removing to-do items from the array.</p>
<pre><code>…

app.post('/api', (req, res) =&gt; {
  const item: string = req.body.item;
  // Increment ID of item based on the ID of the last item in the array.
  let id: string = uuidV4();
  // Add the new object to the array
  todoArray.push({ item, id });
  res.status(200).json({
    message: 'item added successfully',
  });
});
app.patch('/api', (req, res) =&gt; {
  // Value of the updated item
  const updatedItem: string = req.body.updatedItem;
  // ID of the position to update
  const id: string = req.body.id;
  // Find index of the ID
  const arrayIndex = todoArray.findIndex((obj) =&gt; obj.id === id);

  // Update item that matches the index
  todoArray[arrayIndex].item = updatedItem

  res.status(200).json({
    message: 'item updated successfully',
  });
});

app.delete('/api', (req, res) =&gt; {
  // ID of the position to remove
  const id: string = req.body.id;
  // Update array and remove the object that matches the ID
  todoArray = todoArray.filter((val) =&gt; val.id !== id);
  res.status(200).json({
    message: 'item removed successfully',
  });
});

…</code></pre>

<p>To create a new to-do item, all we need is the value of the new item as a string. We’ll generate an ID by incrementing the ID of the last element in the array on the server. To update an existing item, we would pass in the new value for the item and the ID of the item object to be updated; on the server, we would loop through each item with the <code>forEach</code> method, and update the item in the place where the ID matches the ID sent with the request. Finally, to remove an item from the array, we’d send the item’s ID to be removed with the request; then, we filter through the array, and return a new array of all items not matching the ID sent with the request, assigning the new array to the <code>todoArray</code> variable.</p>
<p><strong>Note:</strong> If you look in the Next.js application folder, you should see a <code>proxy.conf.json</code> file with the configuration below:</p>
<pre><code>{
  "/api": {
    "target": "http://localhost:3333",
    "secure": false
  }
}</code></pre>

<p>This creates a proxy, allowing all API calls to routes matching <code>/api</code> to target the <code>todo-api</code> server.</p>
<h3>Generating Next.js Pages With Nx</h3>
<p>In our Next.js application, we will generate a new page, <code>home</code>, and an item component. Nx provides a CLI tool for us to easily create a page:</p>
<pre><code>npx nx g @nrwl/next:page home</code></pre>

<p>Upon running this command, we will get a prompt to select the styling library that we want to use for the page; for this article, we will select <code>styled-components</code>. Voilà! Our page is created. To create a component, run <code>npx nx g @nrwl/next:component todo-item</code>; this will create a <code>component</code> folder with the <code>todo-item</code> component.</p>
<h3>API Consumption in Next.js Application</h3>
<p>In each to-do item, we will have two buttons, to edit and delete the to-do item. The asynchronous functions performing these actions are passed as props from the home page.</p>
<pre><code>…
export interface TodoItemProps {
  updateItem(id: string, updatedItem: string): Promise&lt;void&gt;;
  deleteItem(id: string): Promise&lt;void&gt;;
  fetchItems(): Promise&lt;any&gt;;
  item: string;
  id: string;
}
export const FlexWrapper = styled.div`
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ccc;
  padding-bottom: 10px;
  margin-top: 20px;
  @media all and (max-width: 470px) {
    flex-direction: column;
    input {
      width: 100%;
    }
    button {
      width: 100%;
    }
  }
`;

export function TodoItem(props: TodoItemProps) {
  const [isEditingItem, setIsEditingItem] = useState&lt;boolean&gt;(false);
  const [item, setNewItem] = useState&lt;string | null&gt;(null);

  return (
    &lt;FlexWrapper&gt;
      &lt;Input
        disabled={!isEditingItem}
        defaultValue={props.item}
        isEditing={isEditingItem}
        onChange={({ target }) =&gt; setNewItem(target.value)}
      /&gt;
      {!isEditingItem &amp;&amp; &lt;Button
        onClick={() =&gt; setIsEditingItem(true)}
      &gt;
        Edit
      &lt;/Button&gt;}
      {isEditingItem &amp;&amp; &lt;Button onClick={async () =&gt; {
         await props.updateItem(props.id, item);
         //fetch updated items
         await props.fetchItems();
         setIsEditingItem(false)
         }}&gt;
        Update
      &lt;/Button&gt;}
      &lt;Button
        danger
        onClick={async () =&gt; {
          await props.deleteItem(props.id);

          //fetch updated items
          await await props.fetchItems();
        }}
      &gt;
        Delete
      &lt;/Button&gt;
    &lt;/FlexWrapper&gt;
  );
}</code></pre>

<p>For the updating functionality, we have an input that is disabled when the <code>isEditingItem</code> state is <code>false</code>. Once the “Edit” button is clicked, it toggles the <code>isEditingItem</code> state to <code>true</code> and displays the “Update” button. Here, the input component is enabled, and the user can enter a new value; when the “Update” button is clicked, it calls the <code>updateItem</code> function with the parameters passed in, and it toggles <code>isEditingItem</code> back to <code>false</code>.</p>
<p>In the <code>home</code> page component, we have the asynchronous functions performing the CRUD operation.</p>
<pre><code> …
  const [items, setItems] = useState&lt;Array&lt;{ item: string; id: string }&gt;&gt;([]);
  const [newItem, setNewItem] = useState&lt;string&gt;('');
  const fetchItems = async () =&gt; {
    try {
      const data = await fetch('/api/fetch');
      const res = await data.json();
      setItems(res.data);
    } catch (error) {
      console.log(error);
    }
  };
  const createItem = async (item: string) =&gt; {
    try {
      const data = await fetch('/api', {
        method: 'POST',
        body: JSON.stringify({ item }),
        headers: {
          'Content-Type': 'application/json',
        },
      });
    } catch (error) {
      console.log(error);
    }
  };
  const deleteItem = async (id: string) =&gt; {
    try {
      const data = await fetch('/api', {
        method: 'DELETE',
        body: JSON.stringify({ id }),
        headers: {
          'Content-Type': 'application/json',
        },
      });
      const res = await data.json();
      alert(res.message);
    } catch (error) {
      console.log(error);
    }
  };
  const updateItem = async (id: string, updatedItem: string) =&gt; {
    try {
      const data = await fetch('/api', {
        method: 'PATCH',
        body: JSON.stringify({ id, updatedItem }),
        headers: {
          'Content-Type': 'application/json',
        },
      });
      const res = await data.json();
      alert(res.message);
    } catch (error) {
      console.log(error);
    }
  };
  useEffect(() =&gt; {
    fetchItems();
  }, []);
…</code></pre>

<p>In the code block above, we have <code>fetchItems</code>, which returns <code>todoArray</code> from the server. Then, we have the <code>createItem</code> function, which takes a string; the parameter is the value of the new to-do item. The <code>updateItem</code> function takes two parameters, the ID of the item to be updated and the <code>updatedItem</code> value. And the <code>deleteItem</code> function removes the item matching the ID that is passed in.</p>
<p>To render the to-do item, we map through the <code>items</code> state:</p>
<pre><code> …
return (
    &lt;StyledHome&gt;
      &lt;h1&gt;Welcome to Home!&lt;/h1&gt;
      &lt;TodoWrapper&gt;
         {items.length &gt; 0 &amp;&amp;
          items.map((val) =&gt; (
            &lt;TodoItem
              key={val.id}
              item={val.item}
              id={val.id}
              deleteItem={deleteItem}
              updateItem={updateItem}
              fetchItems={fetchItems}
            /&gt;
          ))}
      &lt;/TodoWrapper&gt;
      &lt;form
        onSubmit={async(e) =&gt; {
          e.preventDefault();
          await createItem(newItem);
          //Clean up new item
          setNewItem('');
          await fetchItems();
        }}
      &gt;
        &lt;FlexWrapper&gt;
          &lt;Input
            value={newItem}
            onChange={({ target }) =&gt; setNewItem(target.value)}
            placeholder="Add new item…"
          /&gt;
          &lt;Button success type="submit"&gt;
            Add +
          &lt;/Button&gt;
        &lt;/FlexWrapper&gt;
      &lt;/form&gt;
    &lt;/StyledHome&gt;
  );
…</code></pre>

<p>Our server and front end are now set up. We can serve the API application by running <code>npx nx serve todo-api</code>, and for the Next.js application, we run <code>npx nx serve todo</code>. Click the “Continue” button, and you will see a page with the default to-do item displayed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/363121db-4f9d-453c-bb27-392631228fdd/image-app-home.png" /></p>
<p>We now have a working Next.js and Express application working together in one workspace.</p>
<p>Nx has another CLI tool that allows us to view the dependency graph of our application in our terminal run. Run <code>npx nx dep-graph</code>, and we should see a screen similar to the image below, depicting the dependency graph of our application.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd3a32f3-b23f-4fa3-b3ed-233bb3c6f6b7/image-app-architecture.png" /></p>
<h3>Other CLI Commands for Nx</h3>
<ul>
<li><code>nx list</code><br />Lists the currently installed Nx plugins.</li>
<li><code>nx migrate latest</code><br />Updates the packages in <code>package.json</code> to the latest version.</li>
<li><code>nx affected</code><br />Performs the action on only the affected or modified apps.</li>
<li><code>nx run-many --target serve --projects todo-api,todo</code><br />Runs the target command across all projects listed.</li>
</ul>
Conclusion
<p>As a general overview of Nx, this article has covered what Nx offers and how it makes work easier for us. We also walked through setting up a Next.js application in an Nx workspace, adding an Express plugin to an existing workspace, and using the monorepo feature to house more than one application in our workspace.</p>
<p>You will find the complete source code in the <a href="https://github.com/MelvinManni/NX_Next_Express">GitHub repository</a>. For additional information about Nx, check out the <a href="https://nx.dev/">documentation</a> or the Nx <a href="https://nx.dev/latest/react/guides/nextjs">documentation for Next.js</a>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:38;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:54:"A Deep Dive Into object-fit And background-size In CSS";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:68:"https://smashingmagazine.com/2021/10/object-fit-background-size-css/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:68:"https://smashingmagazine.com/2021/10/object-fit-background-size-css/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Mon, 25 Oct 2021 13:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:185:"In this article, we will go through how `object-fit` and `background-size` work, when we can use them, and why, along with some practical use cases and recommendations. Let’s dive in.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Ahmad Shadeed)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:151:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/19e7f717-46d5-4949-96f4-671f4744d0e1/object-fit-background-size-css.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:13261:"<p>We’re not always able to load different-sized images for an HTML element. If we use a width and height that isn’t proportional to the image’s aspect ratio, the image might either be compressed or stretched. That isn’t good, and it can be solved either with <code>object-fit</code> for an <code>img</code> element or by using <code>background-size</code>.</p>
<p>First, let’s define the problem. Consider the following figure:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb4530e2-8132-4b2c-8571-5c17403b691c/1-object-fit-vs-css-background-size.jpg" /></p>
<p>Why is this happening?</p>
<p>An image will have an aspect ratio, and the browser will fill the containing box with that image. If the image’s aspect ratio is different than the width and height specified for it, then the result will be either a squeezed or stretched image.</p>
<p>We see this in the following figure:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ce9612f8-1aaf-48a1-ab7e-8602cffa254f/2-object-fit-vs-css-background-size.jpg" /></p>
The Solution
<p>We don’t always need to add a different-sized image when the aspect ratio of the image doesn’t align with the containing element’s width and height. Before diving into CSS solutions, I want to show you how we used to do this in photo-editing apps:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2592a2fd-4af4-463c-a923-36c7400d016a/3-object-fit-vs-css-background-size.jpg" /></p>
<p>Now that we understand how that works, let’s get into how this works in the browser. (<em>Spoiler alert: It’s easier!</em>)</p>
CSS <code>object-fit</code>
<p>The <code>object-fit</code> property defines how the content of a replaced element such as <code>img</code> or <code>video</code> should be resized to fit its container. The default value for <code>object-fit</code> is <code>fill</code>, which can result in an image being squeezed or stretched.</p>
<p>Let’s go over the possible values.</p>
Possible Values for <code>object-fit</code>
<h3><code>object-fit: contain</code></h3>
<p>In this case, the image will be resized to fit the aspect ratio of its container. If the image’s aspect ratio doesn’t match the container’s, it will be letterboxed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b89f31a5-2331-4e8b-83b6-1e4236ab9c3f/4-object-fit-vs-css-background-size.jpg" /></p>
<h3><code>object-fit: cover</code></h3>
<p>Here, the image will also be resized to fit the aspect ratio of its container, and if the image’s aspect ratio doesn’t match the container’s, then it will be clipped to fit.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2014cca8-1d63-4ba4-972a-8df125d95ff1/5-object-fit-vs-css-background-size.jpg" /></p>
<h3><code>object-fit: fill</code></h3>
<p>With this, the image will be resized to fit the aspect ratio of its container, and if the image’s aspect ratio doesn’t match the container’s, it will be either squeezed or stretched. We don’t want that.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/25952e19-9887-4c23-a82e-c99526abbc99/6-object-fit-vs-css-background-size.jpg" /></p>
<h3><code>object-fit: none</code></h3>
<p>In this case, the image won’t be resized at all, neither stretched nor squeezed. It works like the <code>cover</code> value, but it doesn’t respect its container’s aspect ratio.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/26496e78-d65c-4adb-a181-9f018552f3e9/7-object-fit-vs-css-background-size.jpg" /></p>
<p>Aside from <code>object-fit</code>, we also have the <code>object-position</code> property, which is responsible for positioning an image within its container.</p>
Possible Values For <code>object-position</code>
<p>The <code>object-position</code> property works similar to CSS’ <code>background-position</code> property:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c59111ec-674f-40b0-9291-e33a51b5c595/8-object-fit-vs-css-background-size.jpg" /></p>
<p>The <code>top</code> and <code>bottom</code> keywords also work when the aspect ratio of the containing box is vertically larger:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46e538d2-7f9e-464f-9859-3e8b9da4b8e7/9-object-fit-vs-css-background-size.jpg" /></p>
CSS <code>background-size</code>
<p>With <code>background-size</code>, the first difference is that we’re dealing with the background, not an HTML (<code>img</code>) element.</p>
<h3>Possible Values for <code>background-size</code></h3>
<p>The possible values for <code>background-size</code> are <code>auto</code>, <code>contain</code>, and <code>cover</code>.</p>
<h3><code>background-size: auto</code></h3>
<p>With <code>auto</code>, the image will stay at its default size:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/96a07dc6-3ae3-4cfe-859f-87c3b75037fb/10-object-fit-vs-css-background-size.jpg" /></p>
<h3><code>background-size: cover</code></h3>
<p>Here, the image will be resized to fit in the container. If the aspect ratios are not the same, then the image will be masked to fit.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a91ed8b-23f0-4e90-9b47-187fe742cfed/11-object-fit-vs-css-background-size.jpg" /></p>
<h3><code>background-size: contain</code></h3>
<p>In this case, the image will be resized to fit in the container. If the aspect ratios are off, then the image will be letterboxed as shown in the next example:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cdcccbf-88ae-46ac-98d9-7596fa160535/12-object-fit-vs-css-background-size.jpg" /></p>
<p>As for <code>background-position</code>, it’s similar to how <code>object-position</code> works. The only difference is that the default position of <code>object-position</code> is different than that of <code>background-position</code>.</p>
When Not to Use <code>object-fit</code> or <code>background-size</code>
<p>If the element or the image is given a fixed height and has either <code>background-size: cover</code> or <code>object-fit: cover</code> applied to it, there will be a point where the image will be too wide, thus losing important detail that might affect how the user perceives the image.</p>
<p>Consider the following example in which the image is given a fixed height:</p>
<pre><code>.card__thumb {
    height: 220px;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6fad9813-b8a6-4b98-9f05-514c2100bfe4/13-object-fit-vs-css-background-size.jpg" /></p>
<p>If the card’s container is too wide, it will result in what we see on the right (an image that is too wide). That is because we are not specifying an aspect ratio.</p>
<p>There is only one of two fixes for this. The first is to use the <a href="https://alistapart.com/article/creating-intrinsic-ratios-for-video/">padding hack</a> to create an intrinsic ratio.</p>
<pre><code>.card__thumb {
    position: relative;
    padding-bottom: 75%;
    height: 0;
}

.card__thumb img {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
}</code></pre>

<p>The second fix is to use the new <code>aspect-ratio</code> CSS property. Using it, we can do the following:</p>
<pre><code>.card__thumb img {
    aspect-ratio: 4 / 3;
}</code></pre>

<p><strong>Note</strong>: <em>I’ve already written about the <code>aspect-ratio</code> property in detail in case you want to learn about it: “<a href="https://ishadeed.com/article/css-aspect-ratio/">Let’s Learn About Aspect Ratio In CSS</a>”.</em></p>
Use Cases And Examples
<h3>User Avatars</h3>
<p>A perfect use case for <code>object-fit: cover</code> is user avatars. The aspect ratio allowed for an avatar is often square. Placing an image in a square container could distort the image.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6370423-39f5-4ae9-b3c1-ea92a6492a91/14-object-fit-vs-css-background-size.jpg" /></p>
<pre><code>.c-avatar {
    object-fit: cover;
}</code></pre>

<h3>Logos List</h3>
<p>Listing the clients of a business is important. We will often use logos for this purpose. Because the logos will have different sizes, we need a way to resize them without distorting them.</p>
<p>Thankfully, <code>object-fit: contain</code> is a good solution for that.</p>
<pre><code>.logo__img {
    width: 150px;
    height: 80px;
    object-fit: contain;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/29bc3a9c-e2d7-4c8b-8a41-d12200edd257/15-object-fit-vs-css-background-size.jpg" /></p>
<h3>Article Thumbnail</h3>
<p>This is a very common use case. The container for an article thumbnail might not always have an image with the same aspect ratio. This issue should be fixed by the content management system (CMS) in the first place, but it isn’t always.</p>
<pre><code>.article__thumb {
    object-fit: cover;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5a9bc9d-2446-4014-9a2a-9eb21cd5cd48/16-object-fit-vs-css-background-size.jpg" /></p>
<h3>Hero Background</h3>
<p>In this use case, the decision of whether to use an <code>img</code> element or a CSS background will depend on the following:</p>
<ul>
<li>Is the image important? If CSS is disabled for some reason, would we want the user to see the image?</li>
<li>Or is the image’s purpose merely decorative?</li>
</ul>
<p>Based on our answer, we can decide which feature to use. If the image is <strong>important</strong>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6ed2e85-f185-4387-9ebf-33a148bcf911/17-object-fit-vs-css-background-size.jpg" /></p>
<pre><code>&lt;section class="hero"&gt;
    &lt;img class="hero__thumb" src="thumb.jpg" alt="" /&gt;
&lt;/section&gt;</code></pre>

<pre><code>.hero {
    position: relative;
}

.hero__thumb {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;    
}</code></pre>

<p>If the image is <strong>decorative</strong>, we can go with <code>background-image</code>:</p>
<pre><code>.hero {
    position: relative;
    background-image: linear-gradient(to top, #a34242, rgba(0,0,0,0), url("thumb.jpg");
    background-repeat: no-repeat;
    background-size: cover;
}</code></pre>

<p>The CSS is shorter in this case. Make sure that any <a href="https://ishadeed.com/article/handling-text-over-image-css/">text placed over the image</a> is readable and accessible.</p>
<h3>Adding a Background to an Image With <code>object-fit: contain</code></h3>
<p>Did you know that you can add a background color to <code>img</code>? We would benefit from that when also using <code>object-fit: contain</code>.</p>
<p>In the example below, we have a grid of images. When the aspect ratios of the image and the container are different, the background color will appear.</p>
<pre><code>img {
    object-fit: contain;
    background-color: #def4fd;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7f0ee22-0621-4329-aa03-2ac78f55bbd5/18-object-fit-vs-css-background-size.jpg" /></p>
<h3>Video Element</h3>
<p>Have you ever needed a <code>video</code> as a background? If so, then you probably wanted it to take up the full width and height of its parent.</p>
<pre><code>.hero {
    position: relative;
    background-color: #def4fd;
}

.hero__video {
    position: aboslute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6e3bb7a1-b82c-4459-849f-a0dbb81fbbee/19-object-fit-vs-css-background-size.jpg" /></p>
<p>To make it fully cover the width and height of its parent, we need to override the default <code>object-fit</code> value:</p>
<pre><code>.hero__video {
    /* other styles */
    object-fit: cover;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b524670a-5a57-44f7-a0b8-53c5b0d00108/20-object-fit-vs-css-background-size.jpg" /></p>
Conclusion
<p>As we’ve seen, both <code>object-fit</code> and <code>background-size</code> are very useful for handling different image aspect ratios. We won’t always have control over setting the perfect dimensions for each image, and that’s where these two CSS features shine.</p>
<p>A friendly reminder on the accessibility implications of choosing between an <code>img</code> element and a CSS background: If the image is purely decorative, then go for a CSS background. Otherwise, an <code>img</code> is more suitable.</p>
<p>I hope you’ve found this article useful. Thank you for reading.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:39;a:6:{s:4:"data";s:113:"
            
            
            
            
            
            
            
            
        ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:0:"";a:7:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:73:"An Introduction To Quasar Framework: Building Cross-Platform Applications";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:95:"https://smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:95:"https://smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:29:"Sat, 23 Oct 2021 11:00:00 GMT";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:352:"Quasar is an open-source Vue.js-based cross-platform framework that allows you, as a developer, to easily build apps for both desktop and mobile using technologies such as Cordova and Electron and writing your code once. The app we’ll build will store and get its data from Firebase, meaning that we will also be seeing how to use Firebase in Quasar.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:5:{s:4:"data";s:42:"hello@smashingmagazine.com (Joel Olawanle)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"enclosure";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:178:"http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e64d5e62-7c13-430a-90c6-f21b1c0325fe/introduction-quasar-framework-cross-platform-applications.jpg";s:6:"length";s:1:"0";s:4:"type";s:9:"image/jpg";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:40:"http://purl.org/rss/1.0/modules/content/";a:1:{s:7:"encoded";a:1:{i:0;a:5:{s:4:"data";s:38631:"<p>In this article, I will explain how to use Quasar Framework and its state-of-the-art UI (which follows Material guidelines) to build a notes app. The app will get its data from and store its data to Firebase. This tutorial is meant for anyone interested in building cross-platform applications that work well across all devices simultaneously. At the end of the article, you should have a proper understanding of what Quasar is, how to get started creating apps with Quasar, and also how to use Firebase.</p>
<p>To follow along in this article, you should have:</p>
<ul>
<li>an understanding of HTML, CSS, and JavaScript;</li>
<li>at least a little experience with <a href="https://vuejs.org/">Vue.js</a>;</li>
<li>Node.js version 10 or above and npm version 5 or above installed on your machine.</li>
<li>knowledge of how the command-line interface (CLI) works.</li>
</ul>
<p>The deployed app is <a href="https://quasar-notess-app.netlify.app/">available for viewing</a>, and the final code is <a href="https://github.com/olawanlejoel/Quasar-notes-app">on Github</a>.</p>
What Is Quasar Framework?
<p>Quasar Framework is an open-source Vue.js-based cross-platform framework whose <a href="https://quasar.dev/introduction-to-quasar">motto is</a>: “write code once and simultaneously deploy it as a website, a mobile app and/or an Electron app”. It has many features that enable you, as a web developer, to build apps on desktop and mobile and to create progressive web apps (PWAs) using technologies such as Cordova, Electron, and the web (Vue.js).</p>
Why Quasar Framework?
<p>Quasar is an easy-to-use but powerful UI kit comprising a lot of UI components, layout elements, and helpers. Together, these elements provide a full-featured toolset for building responsive front-end apps, without your having to make use of many different UI libraries. It does the heavy lifting for you, allowing you to focus on features and not boilerplate.</p>
<p>In summary, Quasar offers support for many build modes, including:</p>
<ul>
<li>single-page applications;</li>
<li>progressive web applications;</li>
<li>server-side rendering;</li>
<li>mobile apps (iOS and Android), using Cordova or Сapacitor;</li>
<li>multi-platform desktop apps, using Electron;</li>
<li>browser extensions.</li>
</ul>
Getting Started
<p>To get started, let’s look at how to install Quasar on your local machine and set up a project.</p>
Installation
<p>There are three ways to start using Quasar:</p>
<ul>
<li>embedding to an existing project via a content delivery network (CDN);</li>
<li>installing using the Vue.js CLI Quasar plugin;</li>
<li>installing using the Quasar CLI.</li>
</ul>
<p>For this tutorial, we will be using the third method, which is the Quasar CLI. The first thing to do is install the Quasar CLI globally on your computer, or check whether it is installed by running the following commands in your CLI:</p>
<pre><code>quasar -v #check if quasar has been installed previously

yarn global add @quasar/cli
# or
npm install -g @quasar/cli</code></pre>

<p>Once this is done, you can now move on to setting up the project.</p>
Project Set-Up
<p>Run the following command in your CLI:</p>
<pre><code>quasar create &lt;folder_name&gt;</code></pre>

<p>Following this, you are going to be asked some questions. Here is my full configuration for the app we will be building.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3da4ae7a-6396-428b-bb01-b51d414a79f7/12-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>Now we can move into the project folder and start up the application using the following commands:</p>
<pre><code>cd &lt;folder_name&gt;
quasar dev</code></pre>

<p>With the steps above complete, our app should be running on <a href="http://localhost:3000/">http://localhost:8080</a>. This is what we should see:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34125423-d35a-44df-9c31-a54f3d8d9a71/16-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
Quasar’s Folder Structure
<p>The default application structure for Quasar is intended to be a great starting point for developers to build any type of application. You can organize the application however you like and create directories whenever you need them.</p>
<pre><code>.
├── public/                  # pure static assets (directly copied)
├── src/
│   ├── assets/              # dynamic assets (processed by Webpack)
│   ├── components/          # .vue components used in pages and layouts
│   ├── css/                 # CSS/Stylus/Sass/… files for your app
│   ├── layouts/             # layout .vue files
│   ├── pages/               # page .vue files
│   ├── boot/                # boot files (app initialization code)
│   ├── router/              # Vue Router
│   ├── store/               # Vuex Store
│   ├── App.vue              # root Vue component of your app
│   └── index.template.html  # template for index.html
├── .editorconfig            # editor config
├── .gitignore               # GIT ignore paths
├── .postcssrc.js            # PostCSS config
├── babel.config.js          # Babel config
├── package.json             # npm scripts and dependencies
├── quasar.conf.js           # Quasar app config file
└── README.md                # readme for your app</code></pre>

<p>The source folder consists of about seven major directories that a beginner should care about:</p>
<ul>
<li><code>quasar.conf.js</code><br />This is the brain behind any Quasar application, because most configurations are done in this file. Amazingly, Quasar handles most of the complex configurations needed by the various tools and packages that you might use in an application. Some of these configurations are for:<ul>
<li>Quasar components, directives, and plugins that would be needed in your app;</li>
<li>icon packs;</li>
<li><a href="https://v0-17.quasar-framework.org/components/transition.html">CSS animation</a>;</li>
<li>PWA <a href="https://v0-17.quasar-framework.org/guide/pwa-configuring-pwa.html#Configuring-Manifest-File">manifest file</a> and <a href="https://v0-17.quasar-framework.org/guide/pwa-configuring-pwa.html#Quasar-conf-js">Workbox options</a>;</li>
<li><a href="https://v0-17.quasar-framework.org/guide/electron-configuring-electron.html">Electron packager</a> and/or <a href="https://v0-17.quasar-framework.org/electron-configuring-electron.html">Electron builder</a>;</li>
<li>and a <a href="https://v0-17.quasar-framework.org/guide/app-quasar.conf.js.html">lot more</a>.</li>
</ul>
</li>
<li><code>src/assets</code><br />The <code>assets</code> directory contains your uncompiled assets, such as Stylus or Sass files, images, and fonts.</li>
<li><code>src/components</code><br />This is where all of your reusable components will live. These components make up the different parts of the application and can be reused and imported into your pages, layouts, and even other components.</li>
<li><code>src/css</code><br />You will not find this in Vue.js, but Quasar provides this so that we can have all of our global CSS in Sass form. It consists of two files: <code>app.sass</code> is where all of our styles will go, while <code>quasar.variables.sass</code> contains all of the reusable variables we would want to make use of when styling our app. You could ignore the CSS directory if you feel it’s of no use to you.</li>
<li><code>src/layouts</code><br />This helps us create defined layouts for an app without repeating code. This is useful when you want to include sidebars or fixed bottom bars or have distinct layouts for mobile and desktop.</li>
<li><code>src/pages</code><br />The <code>pages</code> directory contains our application’s views and routes. Our pages are injected into the app and managed through Vue Router in <code>/src/router/routes.js</code>. This means that each page needs to be referenced there.</li>
<li><code>src/router</code><br />This holds the routing configuration of our app. It consists of two folders:<ul>
<li><code>/src/router/index.js</code> holds the Vue Router initialization code.</li>
<li><code>/src/router/routes.js</code> holds the routes of the app, loading our layouts alongside the routes or pages in the app.<br />You might not need to do anything to the <code>index.js</code> file in a small project, but if your project will have routes, you will need to add them to the <code>routes.js</code> file.</li>
</ul>
</li>
</ul>
Building a Notes App
<p>When building an application with Quasar, the first thing we will want to do is create a layout. Quasar has made this process a lot easier than any other framework by making use of a layout builder. For our notes app, we will want something like the following, which is quite similar to the default layout but with a few modifications:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b39fdbbf-1ba7-4e07-ac7d-9e220e75b540/9-introduction-quasar-framework-cross-platform-applications.png" /></p>
App Layout
<p>In the sidebar of <a href="https://quasar.dev/">Quasar’s documentation</a>, you will see the “Layout and Grid” option. When you click it, a dropdown will appear with more options, one of which is “<a href="https://quasar.dev/layout-builder">Layout Builder</a>”. Click on “Layout Builder”, which will bring you here:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5615634b-74ac-4097-a3a8-6da9bd184824/15-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>This allows us to choose the options we want and remove the ones we don’t. Then, we would generate the code to paste in the layout file.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a089ac2-1d0e-4fd3-a3c8-120a5c51da67/1-introduction-quasar-framework-cross-platform-applications.png" /></p>
<p>The first option helps us to pick the layout parts, while the second allows us to configure the layout parts. Finally, we export the generated layout.</p>
<p>If you want the exact same layout as mine, use the code below:</p>
<pre><code>&lt;template&gt;
  &lt;q-layout view="lHh lpR fFf"&gt;
    &lt;q-header elevated class="bg-primary text-white"&gt;
      &lt;q-toolbar&gt;
        &lt;q-btn dense flat round icon="menu" @click="left = !left" /&gt;
        &lt;q-toolbar-title&gt;
          &lt;q-avatar&gt;
            &lt;img src="https://cdn.quasar.dev/logo-v2/svg/logo-mono-white.svg" /&gt;
          &lt;/q-avatar&gt;
          Title
        &lt;/q-toolbar-title&gt;
      &lt;/q-toolbar&gt;
    &lt;/q-header&gt;
    &lt;q-drawer show-if-above v-model="left" side="left" bordered&gt;
      &lt;!-- drawer content --&gt;
    &lt;/q-drawer&gt;
    &lt;q-page-container&gt;
      &lt;router-view /&gt;
    &lt;/q-page-container&gt;
  &lt;/q-layout&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  data() {
    return {
      left: false
    };
  }
};
&lt;/script&gt;
</code></pre>

<p>Remove the default layout and paste the code above or the code that you have generated into <code>src/layouts/MainLayout.vue</code>.</p>
<p>The code above is divided into three sections: the header (navbar), the drawer (sidebar), and the page container (which contains the router view).</p>
<p>We’ve made use of the state-of-the-art UI to style the whole page. As I said earlier, when using Quasar, you won’t need additional heavy libraries such as Hammer.js, Moment.js, or Bootstrap.</p>
<p>We will be adding data to the sidebar and editing the navbar. Once you’ve saved, you will notice our app now looks like this:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/27d57fb2-80cb-4c46-8850-7edf5e23e0e9/2-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>Let’s work on the layout, adding some items to the sidebar and changing the title of the app, If you scan the layout code that we added, you will see where we are supposed to edit and add these various items.</p>
<p>Here is what my layout looks like after I’ve added items to the sidebar and changed the title:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7eda12f3-df15-4b82-ba3d-29158b409341/3-introduction-quasar-framework-cross-platform-applications.png" /></p>
<p>And here is the code:</p>
<pre><code>&lt;template&gt;
  &lt;q-layout view="lHh lpR fFf"&gt;
    &lt;q-header elevated class="bg-primary text-white"&gt;
      &lt;q-toolbar&gt;
        &lt;q-btn dense flat round icon="menu" @click="left = !left" /&gt;
        &lt;q-toolbar-title class="text-h6"&gt;
          My Notes
        &lt;/q-toolbar-title&gt;
      &lt;/q-toolbar&gt;
    &lt;/q-header&gt;
    &lt;q-drawer show-if-above v-model="left" side="left" bordered&gt;
      &lt;q-list class="q-pt-xl"&gt;
        &lt;q-item clickable v-ripple to="/"&gt;
          &lt;q-item-section avatar&gt;
            &lt;q-icon name="home" size="md" /&gt;
          &lt;/q-item-section&gt;
          &lt;q-item-section class="text-weight-bold"&gt;Home&lt;/q-item-section&gt;
        &lt;/q-item&gt;
        &lt;q-item clickable v-ripple to="/about"&gt;
          &lt;q-item-section avatar&gt;
            &lt;q-icon name="info" size="md" /&gt;
          &lt;/q-item-section&gt;
          &lt;q-item-section class="text-weight-bold"&gt;About&lt;/q-item-section&gt;
        &lt;/q-item&gt;
      &lt;/q-list&gt;
    &lt;/q-drawer&gt;
    &lt;q-page-container&gt;
      &lt;router-view /&gt;
    &lt;/q-page-container&gt;
    &lt;q-footer class="bg-grey-2 text-black "&gt;
      &lt;q-toolbar&gt;
        &lt;q-toolbar-title class="text-subtitle2"&gt;
          Designed and Built For this article.
        &lt;/q-toolbar-title&gt;
      &lt;/q-toolbar&gt;
    &lt;/q-footer&gt;
  &lt;/q-layout&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  data() {
    return {
      left: false
    };
  }
};
&lt;/script&gt;</code></pre>

<p>We removed the logo in the navbar and edited the text, then added a list to the sidebar, making use of Quasar’s state-of-the-art UI. Check out the list items, and copy the code of any you wish to use.</p>
App Design
<p>Earlier on, I said I was going to use Quasar’s state-of-the-art UI (which follows Material guidelines) to build a notes app, and that’s what we will be doing now. Explaining the whole process in an article like this is difficult, but the “Style &amp; Identity” section of Quasar’s documentation covers it well.</p>
<p>This will be a one-page app (<code>index.vue</code>), and here is the code, without any styling applied:</p>
<pre><code>&lt;template&gt;
  &lt;q-page class=""&gt;
    &lt;div class="q-pa-md"&gt;
      &lt;q-input
        bottom-slots
        v-model="newNoteContent"
        placeholder="Write your note here..."
        counter
        autogrow
        maxlength="300"
      &gt;
        &lt;template v-slot:after&gt;
          &lt;q-btn round dense flat icon="send" /&gt;
        &lt;/template&gt;
      &lt;/q-input&gt;
    &lt;/div&gt;
    &lt;q-separator size="10px" /&gt;
    &lt;q-list bordered class="rounded-borders" style="max-width: 600px"&gt;
      &lt;q-item-label header&gt;You have 3 Note(s)&lt;/q-item-label&gt;
      &lt;div&gt;
        &lt;q-item&gt;
          &lt;q-item-section top&gt;
            &lt;q-item-label caption class="text-grey-9"&gt;
              He who has imagination without learning has wings but no feet.
            &lt;/q-item-label&gt;
          &lt;/q-item-section&gt;
          &lt;q-item-section top side&gt;
            &lt;div class="text-grey-9 q-gutter-xs"&gt;
              &lt;q-btn size="13px" flat dense round icon="delete" /&gt;
            &lt;/div&gt;
          &lt;/q-item-section&gt;
        &lt;/q-item&gt;
        &lt;q-separator size="1px" /&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;q-item&gt;
          &lt;q-item-section top&gt;
            &lt;q-item-label caption class="text-grey-9"&gt;
              He who has imagination without learning has wings but no feet.
            &lt;/q-item-label&gt;
          &lt;/q-item-section&gt;
          &lt;q-item-section top side&gt;
            &lt;div class="text-grey-9 q-gutter-xs"&gt;
              &lt;q-btn size="13px" flat dense round icon="delete" /&gt;
            &lt;/div&gt;
          &lt;/q-item-section&gt;
        &lt;/q-item&gt;
        &lt;q-separator size="1px" /&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;q-item&gt;
          &lt;q-item-section top&gt;
            &lt;q-item-label caption class="text-grey-9"&gt;
              He who has imagination without learning has wings but no feet.
            &lt;/q-item-label&gt;
          &lt;/q-item-section&gt;
          &lt;q-item-section top side&gt;
            &lt;div class="text-grey-9 q-gutter-xs"&gt;
              &lt;q-btn size="13px" flat dense round icon="delete" /&gt;
            &lt;/div&gt;
          &lt;/q-item-section&gt;
        &lt;/q-item&gt;
        &lt;q-separator size="1px" /&gt;
      &lt;/div&gt;
    &lt;/q-list&gt;
  &lt;/q-page&gt;
&lt;/template&gt;
&lt;script&gt;
import db from "src/boot/firebase";
export default {
  name: "PageIndex",
  data() {
    return {
      basic: false,
      fixed: false,
      newNoteContent: ""
    };
  }
};
&lt;/script&gt;
</code></pre>

<p>In the code above, we have an <a href="https://quasar.dev/vue-components/input">input field</a> from Quasar. We’ve attached a <code>v-model</code> to get the data from the input field once the “Submit” button is clicked. We also have a list of items that will be used to display each note, and each list item has an icon used to delete that particular item when clicked.</p>
Setting Up Local Data
<p>At this point, the design of our app is in place. The next thing we will do is create an array that would contain all of our notes. We will ensure that we can add to and delete from this array before setting up Firebase.</p>
<p>Here is the array that we will be making use of in our app for now. Later, we will remove this array or comment out the code.</p>
<pre><code>notes: [
  {
    id: 1,
    noteContent: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea vereprehenderit aspernatur mollitia saepe cupiditate pariatur natus accusantium esse repudiandae nisi velit provident corporis commodi eius fugiat reiciendis non aliquam."
  },
  {
    id: 2,
    noteContent: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea vereprehenderit aspernatur mollitia saepe cupiditate pariatur natus accusantium esse repudiandae nisi velit provident corporis commodi eius fugiat reiciendis non aliquam."
  },
  {
    id: 3,
    noteContent: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Ea vereprehenderit aspernatur mollitia saepe cupiditate pariatur natus accusantium esse repudiandae nisi velit provident corporis commodi eius fugiat reiciendis non aliquam."
  }
]</code></pre>

<h3>Fetching Data</h3>
<p>We now have our array. Let’s add these data to our app. Because we understand Vue.js, all we will do is loop through this array using the <code>v-for</code> directive, use the data gotten from the array, and then put the content wherever we want it to appear.</p>
<pre><code>&lt;div v-for="noteContent in notes" :key="noteContent.id"&gt;
  &lt;q-item&gt;
    &lt;q-item-section top&gt;
      &lt;q-item-label caption class="text-grey-9"&gt;
        {{ noteContent.note }}
      &lt;/q-item-label&gt;
    &lt;/q-item-section&gt;
    &lt;q-item-section top side&gt;
      &lt;div class="text-grey-9 q-gutter-xs"&gt;
        &lt;q-btn
          size="13px"
          flat
          dense
          round
          icon="delete"
          @click="deleteNote(noteContent)"
        /&gt;
      &lt;/div&gt;
    &lt;/q-item-section&gt;
  &lt;/q-item&gt;
  &lt;q-separator size="1px" /&gt;
&lt;/div&gt;</code></pre>

<p>We also added a click event handler to the delete button, so that it loads this function whenever it’s created.</p>
<h3>Adding Notes</h3>
<p>Let’s see how to add notes to our app by using the input field. We will use JavaScript’s <code>unShift()</code> methods, which adds one or more elements to the beginning of an array and returns the new length of the array.</p>
<p>The first thing to do is to add a click event handler to the button.</p>
<pre><code>&lt;q-btn round dense flat icon="send" @click="addNote" /&gt;</code></pre>

<p>Then, proceed to create this method in the script area.</p>
<pre><code>methods: {
  addNote() {
    let newNote = {
      id: this.notes.length + 1,
     note: this.newNoteContent
    };
    this.notes.unshift(newNote);
    this.newNoteContent = "";
  }
}</code></pre>

<p>In the code above, we created an object for the new note, which comprises the ID and the note itself, and then we added this <code>newNote</code> to the array of <code>notes</code> via the <code>unShift()</code> method.</p>
<h3>Deleting Notes</h3>
<p>Finally, before proceeding to use Firebase in our app, let’s see how to delete a note. The first thing would be to add an event listener to the delete icon:</p>
<pre><code>&lt;q-btn
  size="13px"
  flat
  dense
  round
  icon="delete"
  @click="deleteNote(noteContent)"
/&gt;</code></pre>

<p>And then we would create a method:</p>
<pre><code>deleteNote(noteContent) {
  let noteId = noteContent.id;

  //doing this to get the real id of the notes
  let index = this.notes.findIndex(noteContent =&gt; noteContent.id === noteId);
  this.notes.splice(index, 1);
}</code></pre>

<p>In this code, we got the <code>id</code> of the particular note that we want to delete through the parameter passed to the click event method that was created. Then, we made use of the <code>splice</code> method to remove only that item from the array.</p>
Firebase
<p>Now that these two pieces of functionality work, let’s now see how we can use Firebase in Quasar to add, fetch, and delete data. Firebase will also give us real-time data syncing across all devices. The data in our app won’t be very much, because it’s just for the purpose of learning. In case you are thinking of something big that would be used by millions of people, check out the <a href="https://firebase.google.com/pricing">pricing page</a>.</p>
<p>Firebase is application development software from Google that enables us to develop iOS, Android, and web apps.</p>
<h3>Setting Up Cloud Firestore</h3>
<p>To get started, visit <a href="https://firebase.google.com">firebase.google.com</a> and click on either the “Go to console” link in the top-right corner of your screen or the “Get started” button (ensure that you sign in with your Google account).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbcf729a-7644-4a40-83d8-4728e65e4d22/11-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>This will bring us to the <a href="https://console.firebase.google.com/u/0/">console area</a>, where we can create a project. Click on the “Add a project” button, and a form to create your project will appear. The first question will request the project’s name, which could be anything; for this article, we will call it “notesApp”. Let’s also disable Google Analytics because ours is a mini-app.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a9813cb8-19a2-414c-a16e-5d9ad518fe81/8-introduction-quasar-framework-cross-platform-applications.png" /></p>
<p>Click on the “Create project” button (this might take few seconds, so be patient). Then, click on “Continue”, so that we can create our cloud Firestore.</p>
<p>In the sidebar, click on “Firestore”, and then “Create database”.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f0525960-b2d9-43dc-bddf-9c0c9dbd11ba/5-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>This will bring up a modal. Click on “Start in test mode”, which will make it easy for us to start working with our database. Bear in mind that, “The default security rules for test mode allow anyone with your database reference to view, edit and delete all data in your database for the next 30 days”.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/079915ec-ba53-4fbf-9683-8b028729a008/18-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>Click on “Next”, leave the default Cloud Firestore location, and then click on the “Enable” button. Once it loads, our database will be fully ready for us to use.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3552ecd-0870-4634-9f8a-c4d505569ab0/10-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p><strong>Note:</strong> The Firebase database is made up of collections, and these collections contain documents, and each document is a JavaScript object that has fields in it.</p>
<p>Let’s get started by creating a new collection for our notes.</p>
<p>To create a collection, click on “Start collection”. A modal will pop up for you to enter the collection ID — meaning, a name. Then, click on the “Next” button.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b31be315-7b72-4a89-b4d0-3032cc61ef5e/7-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>You can now start creating the documents and fields for each note. Auto-generate the ID of the document to ensure that it is unique by clicking “Auto-ID” beside the document field.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aafd5d2f-27df-4204-a711-4383d7bd6d5e/13-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>Click “Save”, and continue to create more documents. In the end, this is what my database looks like:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b71b559-d0d6-4b4e-a9f3-4a003ad79edc/6-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>Now that we are done, let’s see how to connect Firebase to our app. Go to “Project overview” in the sidebar, and let’s add this to a web app by clicking the “Web” button.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7e52e47-5852-47ab-9be6-9bd524f6ee44/14-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>A form will appear for us to “Add Firebase” to our web app. We will give it the same name, “notesApp”, and register the app (don’t check the “Firebase hosting” field).</p>
<p>Once it has loaded, it will bring up an SDK to help us initialize our database in the app. We won’t do it this way, although we will need some information from the generated SDK. The right way to do this in Quasar is to import the modules that we need and use a boot file.</p>
<p>So, leave that tab open, and let’s see how to add the Firebase SDK and initialize Firebase in our Quasar app.</p>
<p>The first thing to do would be to install Firebase in our project with npm.</p>
<pre><code>npm install --save firebase</code></pre>

<p>Once installation is complete, we are going to initialize our app’s connection to Firebase by creating a boot file, so that we have immediate access to the database when our app is ready.</p>
<p>A boot file helps us to run code before the app’s Vue.js root component is instantiated. Quasar’s documentation has more information about <a href="https://quasar.dev/quasar-cli/boot-files#introduction">boot files</a> and <a href="https://quasar.dev/quasar-cli/boot-files#when-to-use-boot-files">when to use boot files</a>.</p>
<p>To generate a boot file, we will run this command in our CLI:</p>
<pre><code>quasar new boot firebase</code></pre>

<p><strong>Note:</strong> You don’t need to use Firebase as the name of the boot file.</p>
<p>Once this is done, you will notice that the file is now created in the <code>boot</code> folder. To make use of this newly created boot file, we’ll need to add it to the <code>quasar.config.js</code> file’s boot array.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55ee3862-7f27-46f1-b600-435b05b87ea7/4-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>Let’s go back to the newly created boot file. Delete all of the code there because we don’t need it. We’ll import the modules that we need and configure our database. Paste in the following code:</p>
<pre><code>import firebase from "firebase/app";
import "firebase/firestore";

const firebaseConfig = {
  // ...
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);</code></pre>

<p>Here, we’ve imported Firebase itself and Firestore, and we’ve initialized Firebase, making use of the config, which we will be adding now.</p>
<p>At this point, we are almost done configuring our app. We need to add our unique configuration, which was provided in the SDK that was generated when we added Firebase to our web app. Copy only the configuration, and paste it into our array.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68ec212d-348a-4601-8393-0348c67cd0aa/17-introduction-quasar-framework-cross-platform-applications.JPG" /></p>
<p>We should now have something like this:</p>
<pre><code>import firebase from "firebase/app";
import "firebase/firestore";
const firebaseConfig = {
  apiKey: "AIzaSyDRcq5PXJSi5c5C8rl6Q6nudIJqTFaxXeA",
  authDomain: "notesapp-ffd7c.firebaseapp.com",
  projectId: "notesapp-ffd7c",
  storageBucket: "notesapp-ffd7c.appspot.com",
  messagingSenderId: "18944010047",
  appId: "1:18944010047:web:ddfb46fc6bc8bba375158a"
};
// Initialize Firebase
firebase.initializeApp(firebaseConfig);</code></pre>

<p>One last thing, since we are making use of Firestore, is that we’ll need to initialize the cloud Firestore by adding this code to our boot file (the last line):</p>
<pre><code>let db = firebase.firestore();
export default db;</code></pre>

<p>This <code>db</code> will give us access to our Firestore database. We also exported it so that we can use it anywhere in our app.</p>
<p>At this point, you might still be a little confused, but if you have followed this guide, then you will have properly initialized Firebase for your application. You can read more about adding Firebase to your JavaScript project <a href="https://firebase.google.com/docs/web/setup?authuser=0">in the documentation</a>.</p>
<h3>Fetching Data From Firebase</h3>
<p>If you have followed the guide so far, everything should work fine once you launch your app. Now let’s grab the notes created in the database and display them in our app.</p>
<p>For this, we will be making use of the <code>.onSnapshot</code> hook, which will be fired any time the data in our collection changes. This will tell us whether a document has been added, removed, or updated. For this guide, we will only deal with the addition and removal of documents. Using hooks like this makes real-time syncing across devices possible. Let’s get started.</p>
<p>The first thing to do would be for us to get access to the database by importing it into the index page of our app.</p>
<pre><code>import db from 'src/boot/firebase';</code></pre>

<p>Then, create a mounted hook, because we want to fetch our data immediately after the app has loaded.</p>
<pre><code>mounted() {
  db.collection("notes").onSnapshot(snapshot =&gt; {
    snapshot.docChanges().forEach(change =&gt; {

      let noteChange = change.doc.data();

      if (change.type === "added") {
        console.log("New note: ", noteChange);
        this.notes.unshift(noteChange);
      }
      if (change.type === "modified") {
        console.log("Modified note: ", noteChange);
      }
      if (change.type === "removed") {
        console.log("Removed note: ", noteChange);
      }
    });
  });
}</code></pre>

<p>In the code above, we are simply grabbing our <code>notes</code> collection, and every time there is a change in the collection, the <code>onSnapShot</code> method will be fired, which will return a <code>snapShot</code> of all our data. All of these data will be objects with <code>type</code> properties. These <code>type</code> properties will tell us the type of change that has happened and give us access to the data that was either added, modified, or removed.</p>
<p>This might sound confusing, but you will understand what we are doing as you read on.</p>
<p>If you save your code and check the console environment, you will notice that each note has been logged out. We can now push these objects to the <code>notes</code> array that we created earlier, so that we can display real-time data in our application.</p>
<p>The first thing to do is delete or comment out the objects in the <code>notes</code> array, so that we have something like this:</p>
<pre><code>notes: []</code></pre>

<p>Then, pass the objects to this array:</p>
<pre><code>this.notes.unshift(noteChange);</code></pre>

<p>Your code should now look like this:</p>
<pre><code>if (change.type === "added") {
  this.notes.unshift(noteChange);
}</code></pre>

<p>At this point, if you load the app, you will notice that you have successfully fetched your data from Firebase.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed1be4bb-89ca-4e2d-a3ab-74a24f3b5469/19-introduction-quasar-framework-cross-platform-applications.png" /></p>
<h3>Adding Data to Firebase</h3>
<p>Let’s see how to add a note to our notes collection in this app. At this point, if you try to use the input field to add a note, it will work but the note will disappear once you refresh the page because it’s not stored in any database.</p>
<p>To do this with Firebase, all that is needed is to update the <code>addNote()</code> method that we created earlier.</p>
<pre><code>addNote() {
  let newNote = {
    // id: this.notes.length + 1,
    note: this.newNoteContent
  };
  // this.notes.unshift(newNote);

  db.collection("notes")
    .add(newNote)
    .then(docRef =&gt; {
      console.log("Document written with ID: ", docRef.id);
    })
    .catch(error =&gt; {
      console.error("Error adding document: ", error);
    });

  this.newNoteContent = "";
},</code></pre>

<p>The first thing we did here was remove the ID that is used when we made use of the previous array, because we are now going to auto-generate the ID from Firebase. We also removed the <code>unshift()</code> method; it’s no longer useful because data is being fetched for our app once there is an update using the <code>snapShot</code> hook.</p>
<p>If we look at the code responsible for updating the Firestore <code>db</code>, all we are passing to the collection (<code>notes</code>) is the new object (<code>newNote</code>), and this function will automatically generate an ID for each of our documents. The documentation has more information on <a href="https://firebase.google.com/docs/firestore/manage-data/add-data#add_a_document">adding data to Firebase</a>.</p>
<h3>Deleting Data From Firebase</h3>
<p>We are almost done with our app, but we need to be able to delete data in our app from Firebase. Currently, the <code>delete</code> function works, but if you reload the app, the deleted data will reappear.</p>
<p>As we did before, we are going to delete these data (or documents) from Firebase using the unique ID generated by Firebase.</p>
<p>Currently, we don’t have access to the ID. To access it, we will add it to the <code>noteChange</code> object:</p>
<pre><code>noteChange.id = change.doc.id;</code></pre>

<p>Once that is set, deleting data will be as easy as adding it. All we have to do is go to the <code>deleteNote(noteContent)</code> method that we created previously, delete the previous code, and make use of this:</p>
<pre><code>deleteNote(noteContent) {
  let noteId = noteContent.id;
  db.collection("notes")
    .doc(noteId)
    .delete()
    .then(() =&gt; {
      console.log("Document successfully deleted!");
    })
    .catch(error =&gt; {
      console.error("Error removing document: ", error);
    });
}</code></pre>

<p>This checks the notes collection for a document with the specified ID and then deletes it. But if we save our code now and click the delete icon, the data will delete but won’t leave the app’s interface unless we refresh our code, meaning that the <code>snapshot</code> hook needs to be updated. Go to the <code>snapshot</code> hook for <code>removed</code>, and add this code:</p>
<pre><code>if (change.type === "removed") {
  console.log("Removed note: ", noteChange);
  let index = this.notes.findIndex(
    noteContent =&gt; noteContent.id === noteChange.id
  );
  this.notes.splice(index, 1);
}</code></pre>

<p>This simply gets the ID of the post that we deleted and removes it from the interface.</p>
<p>With that done, we have built an app with Quasar that works with Firebase. One major advantage of Quasar is that it enables us to simultaneously deploy our project as a website, mobile app, or Electron app.</p>
<p>To deploy for iOS, <a href="https://cordova.apache.org/">Cordova</a> needs to be installed on our local machine. A MacBook is highly preferable. Navigate to your CLI, and install Cordova globally:</p>
<pre><code>$ npm install - g cordova</code></pre>

<p>To install on Windows, you would make use of Electron. The documentation <a href="https://quasar.dev/quasar-cli/developing-cordova-apps/preparation#android-setup">properly explains how to do this</a>.</p>
Conclusion
<p>In this guide, we have built a notes application using Quasar and Firebase. By following this guide, you are now in a position to improve on and add your own features and functionality. Here are a few ideas to get you started:</p>
<ul>
<li>Implement functionality to modify notes.</li>
<li>Add dates, so that you can order the data by date.</li>
<li>Style the app, and make it more creative.</li>
<li>Add images.</li>
<li>A lot more.</li>
</ul>
<h3>Useful Resources</h3>
<ul>
<li><a href="https://quasar.dev/">Quasar documentation</a></li>
<li><a href="https://firebase.google.com/docs/firestore">Firebase documentation</a></li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:4:"href";s:38:"https://www.smashingmagazine.com/feed/";s:3:"rel";s:4:"self";s:4:"type";s:19:"application/rss+xml";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:16:{s:13:"accept-ranges";s:5:"bytes";s:12:"content-type";s:15:"application/xml";s:4:"date";s:29:"Sat, 25 Dec 2021 18:47:35 GMT";s:4:"etag";s:41:""72233b3b4b761156b7896d4c3d993f5b-ssl-df"";s:4:"link";s:68:"<https://d33wubrfki0l68.cloudfront.net>; rel=preconnect; crossorigin";s:15:"referrer-policy";s:26:"no-referrer-when-downgrade";s:25:"strict-transport-security";s:16:"max-age=31536000";s:6:"server";s:7:"Netlify";s:16:"content-encoding";s:2:"br";s:4:"vary";s:15:"Accept-Encoding";s:13:"cache-control";s:48:"public,max-age=14400,stale-while-revalidate=7200";s:22:"x-content-type-options";s:7:"nosniff";s:15:"x-frame-options";s:10:"SAMEORIGIN";s:15:"x-nf-request-id";s:26:"01FQSEPNDRQQG9CG8MKK847CRD";s:3:"age";s:1:"0";s:16:"x-xss-protection";s:1:"1";}s:5:"build";s:14:"20211219073923";}